# 1 "src/ParticleSwarm.c"
# 1 "/usr/include/stdc-predef.h" 1 3















 










 






 

# 43 "/usr/include/stdc-predef.h" 3

# 51 "/usr/include/stdc-predef.h" 3






 


# 1 "src/ParticleSwarm.c" 2


# 1 "include/ParticleSwarm.h" 1






 





# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 1


 

# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscbag.h" 1




# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h" 1





 



 






 
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscconf.h" 1



# 19 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscconf_poison.h" 1
#pragma GCC poison PETSC_PETSC_HAVE_ACCESS
#pragma GCC poison PETSC_PETSC_HAVE_ATOLL
#pragma GCC poison PETSC_PETSC_HAVE_ATTRIBUTEALIGNED
#pragma GCC poison PETSC_PETSC_HAVE_BOOST
#pragma GCC poison PETSC_PETSC_HAVE_BUILTIN_EXPECT
#pragma GCC poison PETSC_PETSC_HAVE_BZERO
#pragma GCC poison PETSC_PETSC_HAVE_C99_COMPLEX
#pragma GCC poison PETSC_PETSC_HAVE_CLOCK
#pragma GCC poison PETSC_PETSC_HAVE_CXX
#pragma GCC poison PETSC_PETSC_HAVE_CXX_COMPLEX
#pragma GCC poison PETSC_PETSC_HAVE_CXX_COMPLEX_FIX
#pragma GCC poison PETSC_PETSC_HAVE_CXX_DIALECT_CXX11
#pragma GCC poison PETSC_PETSC_HAVE_CXX_DIALECT_CXX14
#pragma GCC poison PETSC_PETSC_HAVE_CXX_DIALECT_CXX17
#pragma GCC poison PETSC_PETSC_HAVE_DLADDR
#pragma GCC poison PETSC_PETSC_HAVE_DLCLOSE
#pragma GCC poison PETSC_PETSC_HAVE_DLERROR
#pragma GCC poison PETSC_PETSC_HAVE_DLFCN_H
#pragma GCC poison PETSC_PETSC_HAVE_DLOPEN
#pragma GCC poison PETSC_PETSC_HAVE_DLSYM
#pragma GCC poison PETSC_PETSC_HAVE_DOUBLE_ALIGN_MALLOC
#pragma GCC poison PETSC_PETSC_HAVE_DRAND48
#pragma GCC poison PETSC_PETSC_HAVE_DYNAMIC_LIBRARIES
#pragma GCC poison PETSC_PETSC_HAVE_ERF
#pragma GCC poison PETSC_PETSC_HAVE_EXECUTABLE_EXPORT
#pragma GCC poison PETSC_PETSC_HAVE_FCNTL_H
#pragma GCC poison PETSC_PETSC_HAVE_FENV_H
#pragma GCC poison PETSC_PETSC_HAVE_FFTW
#pragma GCC poison PETSC_PETSC_HAVE_FLOAT_H
#pragma GCC poison PETSC_PETSC_HAVE_FORK
#pragma GCC poison PETSC_PETSC_HAVE_FORTRAN
#pragma GCC poison PETSC_PETSC_HAVE_FORTRAN_FLUSH
#pragma GCC poison PETSC_PETSC_HAVE_FORTRAN_FREE_LINE_LENGTH_NONE
#pragma GCC poison PETSC_PETSC_HAVE_FORTRAN_GET_COMMAND_ARGUMENT
#pragma GCC poison PETSC_PETSC_HAVE_FORTRAN_TYPE_STAR
#pragma GCC poison PETSC_PETSC_HAVE_FORTRAN_UNDERSCORE
#pragma GCC poison PETSC_PETSC_HAVE_FSTATAT
#pragma GCC poison PETSC_PETSC_HAVE_GETCWD
#pragma GCC poison PETSC_PETSC_HAVE_GETDOMAINNAME
#pragma GCC poison PETSC_PETSC_HAVE_GETHOSTBYNAME
#pragma GCC poison PETSC_PETSC_HAVE_GETHOSTNAME
#pragma GCC poison PETSC_PETSC_HAVE_GETPAGESIZE
#pragma GCC poison PETSC_PETSC_HAVE_GETRUSAGE
#pragma GCC poison PETSC_PETSC_HAVE_HYPRE
#pragma GCC poison PETSC_PETSC_HAVE_IMMINTRIN_H
#pragma GCC poison PETSC_PETSC_HAVE_INTTYPES_H
#pragma GCC poison PETSC_PETSC_HAVE_ISINF
#pragma GCC poison PETSC_PETSC_HAVE_ISNAN
#pragma GCC poison PETSC_PETSC_HAVE_ISNORMAL
#pragma GCC poison PETSC_PETSC_HAVE_I_MPI_NUMVERSION
#pragma GCC poison PETSC_PETSC_HAVE_LGAMMA
#pragma GCC poison PETSC_PETSC_HAVE_LOG2
#pragma GCC poison PETSC_PETSC_HAVE_LSEEK
#pragma GCC poison PETSC_PETSC_HAVE_MALLOC_H
#pragma GCC poison PETSC_PETSC_HAVE_MEMMOVE
#pragma GCC poison PETSC_PETSC_HAVE_METIS
#pragma GCC poison PETSC_PETSC_HAVE_MKL_INCLUDES
#pragma GCC poison PETSC_PETSC_HAVE_MKL_LIBS
#pragma GCC poison PETSC_PETSC_HAVE_MKL_SPARSE
#pragma GCC poison PETSC_PETSC_HAVE_MKL_SPARSE_OPTIMIZE
#pragma GCC poison PETSC_PETSC_HAVE_MKL_SPARSE_SP2M_FEATURE
#pragma GCC poison PETSC_PETSC_HAVE_MMAP
#pragma GCC poison PETSC_PETSC_HAVE_MPICH_NUMVERSION
#pragma GCC poison PETSC_PETSC_HAVE_MPIIO
#pragma GCC poison PETSC_PETSC_HAVE_MPI_COMBINER_CONTIGUOUS
#pragma GCC poison PETSC_PETSC_HAVE_MPI_COMBINER_DUP
#pragma GCC poison PETSC_PETSC_HAVE_MPI_COMBINER_NAMED
#pragma GCC poison PETSC_PETSC_HAVE_MPI_F90MODULE
#pragma GCC poison PETSC_PETSC_HAVE_MPI_F90MODULE_VISIBILITY
#pragma GCC poison PETSC_PETSC_HAVE_MPI_GET_ACCUMULATE
#pragma GCC poison PETSC_PETSC_HAVE_MPI_GET_LIBRARY_VERSION
#pragma GCC poison PETSC_PETSC_HAVE_MPI_INIT_THREAD
#pragma GCC poison PETSC_PETSC_HAVE_MPI_INT64_T
#pragma GCC poison PETSC_PETSC_HAVE_MPI_LONG_DOUBLE
#pragma GCC poison PETSC_PETSC_HAVE_MPI_NEIGHBORHOOD_COLLECTIVES
#pragma GCC poison PETSC_PETSC_HAVE_MPI_NONBLOCKING_COLLECTIVES
#pragma GCC poison PETSC_PETSC_HAVE_MPI_ONE_SIDED
#pragma GCC poison PETSC_PETSC_HAVE_MPI_PROCESS_SHARED_MEMORY
#pragma GCC poison PETSC_PETSC_HAVE_MPI_REDUCE_LOCAL
#pragma GCC poison PETSC_PETSC_HAVE_MPI_REDUCE_SCATTER_BLOCK
#pragma GCC poison PETSC_PETSC_HAVE_MPI_RGET
#pragma GCC poison PETSC_PETSC_HAVE_MPI_WIN_CREATE
#pragma GCC poison PETSC_PETSC_HAVE_MUMPS
#pragma GCC poison PETSC_PETSC_HAVE_NANOSLEEP
#pragma GCC poison PETSC_PETSC_HAVE_NETDB_H
#pragma GCC poison PETSC_PETSC_HAVE_NETINET_IN_H
#pragma GCC poison PETSC_PETSC_HAVE_PACKAGES
#pragma GCC poison PETSC_PETSC_HAVE_POPEN
#pragma GCC poison PETSC_PETSC_HAVE_POSIX_MEMALIGN
#pragma GCC poison PETSC_PETSC_HAVE_PTHREAD
#pragma GCC poison PETSC_PETSC_HAVE_PTHREAD_BARRIER_T
#pragma GCC poison PETSC_PETSC_HAVE_PTHREAD_H
#pragma GCC poison PETSC_PETSC_HAVE_PWD_H
#pragma GCC poison PETSC_PETSC_HAVE_RAND
#pragma GCC poison PETSC_PETSC_HAVE_READLINK
#pragma GCC poison PETSC_PETSC_HAVE_REALPATH
#pragma GCC poison PETSC_PETSC_HAVE_REAL___FLOAT128
#pragma GCC poison PETSC_PETSC_HAVE_REGEX
#pragma GCC poison PETSC_PETSC_HAVE_RTLD_GLOBAL
#pragma GCC poison PETSC_PETSC_HAVE_RTLD_LAZY
#pragma GCC poison PETSC_PETSC_HAVE_RTLD_LOCAL
#pragma GCC poison PETSC_PETSC_HAVE_RTLD_NOW
#pragma GCC poison PETSC_PETSC_HAVE_SCALAPACK
#pragma GCC poison PETSC_PETSC_HAVE_SCHED_CPU_SET_T
#pragma GCC poison PETSC_PETSC_HAVE_SETJMP_H
#pragma GCC poison PETSC_PETSC_HAVE_SLEEP
#pragma GCC poison PETSC_PETSC_HAVE_SNPRINTF
#pragma GCC poison PETSC_PETSC_HAVE_SOCKET
#pragma GCC poison PETSC_PETSC_HAVE_SO_REUSEADDR
#pragma GCC poison PETSC_PETSC_HAVE_STDINT_H
#pragma GCC poison PETSC_PETSC_HAVE_STRCASECMP
#pragma GCC poison PETSC_PETSC_HAVE_STRINGS_H
#pragma GCC poison PETSC_PETSC_HAVE_STRUCT_SIGACTION
#pragma GCC poison PETSC_PETSC_HAVE_SUITESPARSE
#pragma GCC poison PETSC_PETSC_HAVE_SYSINFO
#pragma GCC poison PETSC_PETSC_HAVE_SYS_PARAM_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_PROCFS_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_RESOURCE_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_SOCKET_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_SYSCTL_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_SYSINFO_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_TIMES_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_TIME_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_TYPES_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_UTSNAME_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_WAIT_H
#pragma GCC poison PETSC_PETSC_HAVE_TGAMMA
#pragma GCC poison PETSC_PETSC_HAVE_TIME
#pragma GCC poison PETSC_PETSC_HAVE_TIME_H
#pragma GCC poison PETSC_PETSC_HAVE_UNAME
#pragma GCC poison PETSC_PETSC_HAVE_UNISTD_H
#pragma GCC poison PETSC_PETSC_HAVE_USLEEP
#pragma GCC poison PETSC_PETSC_HAVE_VA_COPY
#pragma GCC poison PETSC_PETSC_HAVE_VSNPRINTF
#pragma GCC poison PETSC_PETSC_HAVE_XMMINTRIN_H
#pragma GCC poison PETSC_PETSC_HAVE___INT64
#pragma GCC poison PETSC_PETSC_USE_AVX512_KERNELS
#pragma GCC poison PETSC_PETSC_USE_BACKWARD_LOOP
#pragma GCC poison PETSC_PETSC_USE_CTABLE
#pragma GCC poison PETSC_PETSC_USE_DMLANDAU_2D
#pragma GCC poison PETSC_PETSC_USE_INFO
#pragma GCC poison PETSC_PETSC_USE_ISATTY
#pragma GCC poison PETSC_PETSC_USE_LOG
#pragma GCC poison PETSC_PETSC_USE_MALLOC_COALESCED
#pragma GCC poison PETSC_PETSC_USE_PROC_FOR_SIZE
#pragma GCC poison PETSC_PETSC_USE_REAL_DOUBLE
#pragma GCC poison PETSC_PETSC_USE_SHARED_LIBRARIES
#pragma GCC poison PETSC_PETSC_USE_SINGLE_LIBRARY
#pragma GCC poison PETSC_PETSC_USE_SOCKET_VIEWER
#pragma GCC poison PETSC_PETSC_USE_VISIBILITY_C
#pragma GCC poison PETSC_PETSC_USE_VISIBILITY_CXX
# 20 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscfix.h" 1



# 21 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmacros.h" 1



# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscconf_poison.h" 1
#pragma GCC poison PETSC_PETSC_HAVE_ACCESS
#pragma GCC poison PETSC_PETSC_HAVE_ATOLL
#pragma GCC poison PETSC_PETSC_HAVE_ATTRIBUTEALIGNED
#pragma GCC poison PETSC_PETSC_HAVE_BOOST
#pragma GCC poison PETSC_PETSC_HAVE_BUILTIN_EXPECT
#pragma GCC poison PETSC_PETSC_HAVE_BZERO
#pragma GCC poison PETSC_PETSC_HAVE_C99_COMPLEX
#pragma GCC poison PETSC_PETSC_HAVE_CLOCK
#pragma GCC poison PETSC_PETSC_HAVE_CXX
#pragma GCC poison PETSC_PETSC_HAVE_CXX_COMPLEX
#pragma GCC poison PETSC_PETSC_HAVE_CXX_COMPLEX_FIX
#pragma GCC poison PETSC_PETSC_HAVE_CXX_DIALECT_CXX11
#pragma GCC poison PETSC_PETSC_HAVE_CXX_DIALECT_CXX14
#pragma GCC poison PETSC_PETSC_HAVE_CXX_DIALECT_CXX17
#pragma GCC poison PETSC_PETSC_HAVE_DLADDR
#pragma GCC poison PETSC_PETSC_HAVE_DLCLOSE
#pragma GCC poison PETSC_PETSC_HAVE_DLERROR
#pragma GCC poison PETSC_PETSC_HAVE_DLFCN_H
#pragma GCC poison PETSC_PETSC_HAVE_DLOPEN
#pragma GCC poison PETSC_PETSC_HAVE_DLSYM
#pragma GCC poison PETSC_PETSC_HAVE_DOUBLE_ALIGN_MALLOC
#pragma GCC poison PETSC_PETSC_HAVE_DRAND48
#pragma GCC poison PETSC_PETSC_HAVE_DYNAMIC_LIBRARIES
#pragma GCC poison PETSC_PETSC_HAVE_ERF
#pragma GCC poison PETSC_PETSC_HAVE_EXECUTABLE_EXPORT
#pragma GCC poison PETSC_PETSC_HAVE_FCNTL_H
#pragma GCC poison PETSC_PETSC_HAVE_FENV_H
#pragma GCC poison PETSC_PETSC_HAVE_FFTW
#pragma GCC poison PETSC_PETSC_HAVE_FLOAT_H
#pragma GCC poison PETSC_PETSC_HAVE_FORK
#pragma GCC poison PETSC_PETSC_HAVE_FORTRAN
#pragma GCC poison PETSC_PETSC_HAVE_FORTRAN_FLUSH
#pragma GCC poison PETSC_PETSC_HAVE_FORTRAN_FREE_LINE_LENGTH_NONE
#pragma GCC poison PETSC_PETSC_HAVE_FORTRAN_GET_COMMAND_ARGUMENT
#pragma GCC poison PETSC_PETSC_HAVE_FORTRAN_TYPE_STAR
#pragma GCC poison PETSC_PETSC_HAVE_FORTRAN_UNDERSCORE
#pragma GCC poison PETSC_PETSC_HAVE_FSTATAT
#pragma GCC poison PETSC_PETSC_HAVE_GETCWD
#pragma GCC poison PETSC_PETSC_HAVE_GETDOMAINNAME
#pragma GCC poison PETSC_PETSC_HAVE_GETHOSTBYNAME
#pragma GCC poison PETSC_PETSC_HAVE_GETHOSTNAME
#pragma GCC poison PETSC_PETSC_HAVE_GETPAGESIZE
#pragma GCC poison PETSC_PETSC_HAVE_GETRUSAGE
#pragma GCC poison PETSC_PETSC_HAVE_HYPRE
#pragma GCC poison PETSC_PETSC_HAVE_IMMINTRIN_H
#pragma GCC poison PETSC_PETSC_HAVE_INTTYPES_H
#pragma GCC poison PETSC_PETSC_HAVE_ISINF
#pragma GCC poison PETSC_PETSC_HAVE_ISNAN
#pragma GCC poison PETSC_PETSC_HAVE_ISNORMAL
#pragma GCC poison PETSC_PETSC_HAVE_I_MPI_NUMVERSION
#pragma GCC poison PETSC_PETSC_HAVE_LGAMMA
#pragma GCC poison PETSC_PETSC_HAVE_LOG2
#pragma GCC poison PETSC_PETSC_HAVE_LSEEK
#pragma GCC poison PETSC_PETSC_HAVE_MALLOC_H
#pragma GCC poison PETSC_PETSC_HAVE_MEMMOVE
#pragma GCC poison PETSC_PETSC_HAVE_METIS
#pragma GCC poison PETSC_PETSC_HAVE_MKL_INCLUDES
#pragma GCC poison PETSC_PETSC_HAVE_MKL_LIBS
#pragma GCC poison PETSC_PETSC_HAVE_MKL_SPARSE
#pragma GCC poison PETSC_PETSC_HAVE_MKL_SPARSE_OPTIMIZE
#pragma GCC poison PETSC_PETSC_HAVE_MKL_SPARSE_SP2M_FEATURE
#pragma GCC poison PETSC_PETSC_HAVE_MMAP
#pragma GCC poison PETSC_PETSC_HAVE_MPICH_NUMVERSION
#pragma GCC poison PETSC_PETSC_HAVE_MPIIO
#pragma GCC poison PETSC_PETSC_HAVE_MPI_COMBINER_CONTIGUOUS
#pragma GCC poison PETSC_PETSC_HAVE_MPI_COMBINER_DUP
#pragma GCC poison PETSC_PETSC_HAVE_MPI_COMBINER_NAMED
#pragma GCC poison PETSC_PETSC_HAVE_MPI_F90MODULE
#pragma GCC poison PETSC_PETSC_HAVE_MPI_F90MODULE_VISIBILITY
#pragma GCC poison PETSC_PETSC_HAVE_MPI_GET_ACCUMULATE
#pragma GCC poison PETSC_PETSC_HAVE_MPI_GET_LIBRARY_VERSION
#pragma GCC poison PETSC_PETSC_HAVE_MPI_INIT_THREAD
#pragma GCC poison PETSC_PETSC_HAVE_MPI_INT64_T
#pragma GCC poison PETSC_PETSC_HAVE_MPI_LONG_DOUBLE
#pragma GCC poison PETSC_PETSC_HAVE_MPI_NEIGHBORHOOD_COLLECTIVES
#pragma GCC poison PETSC_PETSC_HAVE_MPI_NONBLOCKING_COLLECTIVES
#pragma GCC poison PETSC_PETSC_HAVE_MPI_ONE_SIDED
#pragma GCC poison PETSC_PETSC_HAVE_MPI_PROCESS_SHARED_MEMORY
#pragma GCC poison PETSC_PETSC_HAVE_MPI_REDUCE_LOCAL
#pragma GCC poison PETSC_PETSC_HAVE_MPI_REDUCE_SCATTER_BLOCK
#pragma GCC poison PETSC_PETSC_HAVE_MPI_RGET
#pragma GCC poison PETSC_PETSC_HAVE_MPI_WIN_CREATE
#pragma GCC poison PETSC_PETSC_HAVE_MUMPS
#pragma GCC poison PETSC_PETSC_HAVE_NANOSLEEP
#pragma GCC poison PETSC_PETSC_HAVE_NETDB_H
#pragma GCC poison PETSC_PETSC_HAVE_NETINET_IN_H
#pragma GCC poison PETSC_PETSC_HAVE_PACKAGES
#pragma GCC poison PETSC_PETSC_HAVE_POPEN
#pragma GCC poison PETSC_PETSC_HAVE_POSIX_MEMALIGN
#pragma GCC poison PETSC_PETSC_HAVE_PTHREAD
#pragma GCC poison PETSC_PETSC_HAVE_PTHREAD_BARRIER_T
#pragma GCC poison PETSC_PETSC_HAVE_PTHREAD_H
#pragma GCC poison PETSC_PETSC_HAVE_PWD_H
#pragma GCC poison PETSC_PETSC_HAVE_RAND
#pragma GCC poison PETSC_PETSC_HAVE_READLINK
#pragma GCC poison PETSC_PETSC_HAVE_REALPATH
#pragma GCC poison PETSC_PETSC_HAVE_REAL___FLOAT128
#pragma GCC poison PETSC_PETSC_HAVE_REGEX
#pragma GCC poison PETSC_PETSC_HAVE_RTLD_GLOBAL
#pragma GCC poison PETSC_PETSC_HAVE_RTLD_LAZY
#pragma GCC poison PETSC_PETSC_HAVE_RTLD_LOCAL
#pragma GCC poison PETSC_PETSC_HAVE_RTLD_NOW
#pragma GCC poison PETSC_PETSC_HAVE_SCALAPACK
#pragma GCC poison PETSC_PETSC_HAVE_SCHED_CPU_SET_T
#pragma GCC poison PETSC_PETSC_HAVE_SETJMP_H
#pragma GCC poison PETSC_PETSC_HAVE_SLEEP
#pragma GCC poison PETSC_PETSC_HAVE_SNPRINTF
#pragma GCC poison PETSC_PETSC_HAVE_SOCKET
#pragma GCC poison PETSC_PETSC_HAVE_SO_REUSEADDR
#pragma GCC poison PETSC_PETSC_HAVE_STDINT_H
#pragma GCC poison PETSC_PETSC_HAVE_STRCASECMP
#pragma GCC poison PETSC_PETSC_HAVE_STRINGS_H
#pragma GCC poison PETSC_PETSC_HAVE_STRUCT_SIGACTION
#pragma GCC poison PETSC_PETSC_HAVE_SUITESPARSE
#pragma GCC poison PETSC_PETSC_HAVE_SYSINFO
#pragma GCC poison PETSC_PETSC_HAVE_SYS_PARAM_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_PROCFS_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_RESOURCE_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_SOCKET_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_SYSCTL_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_SYSINFO_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_TIMES_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_TIME_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_TYPES_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_UTSNAME_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_WAIT_H
#pragma GCC poison PETSC_PETSC_HAVE_TGAMMA
#pragma GCC poison PETSC_PETSC_HAVE_TIME
#pragma GCC poison PETSC_PETSC_HAVE_TIME_H
#pragma GCC poison PETSC_PETSC_HAVE_UNAME
#pragma GCC poison PETSC_PETSC_HAVE_UNISTD_H
#pragma GCC poison PETSC_PETSC_HAVE_USLEEP
#pragma GCC poison PETSC_PETSC_HAVE_VA_COPY
#pragma GCC poison PETSC_PETSC_HAVE_VSNPRINTF
#pragma GCC poison PETSC_PETSC_HAVE_XMMINTRIN_H
#pragma GCC poison PETSC_PETSC_HAVE___INT64
#pragma GCC poison PETSC_PETSC_USE_AVX512_KERNELS
#pragma GCC poison PETSC_PETSC_USE_BACKWARD_LOOP
#pragma GCC poison PETSC_PETSC_USE_CTABLE
#pragma GCC poison PETSC_PETSC_USE_DMLANDAU_2D
#pragma GCC poison PETSC_PETSC_USE_INFO
#pragma GCC poison PETSC_PETSC_USE_ISATTY
#pragma GCC poison PETSC_PETSC_USE_LOG
#pragma GCC poison PETSC_PETSC_USE_MALLOC_COALESCED
#pragma GCC poison PETSC_PETSC_USE_PROC_FOR_SIZE
#pragma GCC poison PETSC_PETSC_USE_REAL_DOUBLE
#pragma GCC poison PETSC_PETSC_USE_SHARED_LIBRARIES
#pragma GCC poison PETSC_PETSC_USE_SINGLE_LIBRARY
#pragma GCC poison PETSC_PETSC_USE_SOCKET_VIEWER
#pragma GCC poison PETSC_PETSC_USE_VISIBILITY_C
#pragma GCC poison PETSC_PETSC_USE_VISIBILITY_CXX
# 6 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmacros.h" 2

 

# 22 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmacros.h"





# 39 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmacros.h"





 
 






 



 














# 88 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmacros.h"









 
# 107 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmacros.h"




















































 














































 














  



 


































































 































 
# 332 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmacros.h"






















































 





























 










































 

 






 






 
# 485 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmacros.h"





# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscversion.h" 1




# 11 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscversion.h"

















# 35 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscversion.h"











# 491 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmacros.h" 2


 





































 
































 
# 572 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmacros.h"






































 

   
# 619 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmacros.h"





































































 
# 700 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmacros.h"
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  



















 






































 
































 











































 



  











































































 
# 946 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmacros.h"

  


















































 


# 1016 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmacros.h"

  























 


  





















































# 1104 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmacros.h"













 










 
















 
# 1155 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmacros.h"

# 22 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h" 2

 

# 43 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h"

# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsystypes.h" 1


 




# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscconf_poison.h" 1
#pragma GCC poison PETSC_PETSC_HAVE_ACCESS
#pragma GCC poison PETSC_PETSC_HAVE_ATOLL
#pragma GCC poison PETSC_PETSC_HAVE_ATTRIBUTEALIGNED
#pragma GCC poison PETSC_PETSC_HAVE_BOOST
#pragma GCC poison PETSC_PETSC_HAVE_BUILTIN_EXPECT
#pragma GCC poison PETSC_PETSC_HAVE_BZERO
#pragma GCC poison PETSC_PETSC_HAVE_C99_COMPLEX
#pragma GCC poison PETSC_PETSC_HAVE_CLOCK
#pragma GCC poison PETSC_PETSC_HAVE_CXX
#pragma GCC poison PETSC_PETSC_HAVE_CXX_COMPLEX
#pragma GCC poison PETSC_PETSC_HAVE_CXX_COMPLEX_FIX
#pragma GCC poison PETSC_PETSC_HAVE_CXX_DIALECT_CXX11
#pragma GCC poison PETSC_PETSC_HAVE_CXX_DIALECT_CXX14
#pragma GCC poison PETSC_PETSC_HAVE_CXX_DIALECT_CXX17
#pragma GCC poison PETSC_PETSC_HAVE_DLADDR
#pragma GCC poison PETSC_PETSC_HAVE_DLCLOSE
#pragma GCC poison PETSC_PETSC_HAVE_DLERROR
#pragma GCC poison PETSC_PETSC_HAVE_DLFCN_H
#pragma GCC poison PETSC_PETSC_HAVE_DLOPEN
#pragma GCC poison PETSC_PETSC_HAVE_DLSYM
#pragma GCC poison PETSC_PETSC_HAVE_DOUBLE_ALIGN_MALLOC
#pragma GCC poison PETSC_PETSC_HAVE_DRAND48
#pragma GCC poison PETSC_PETSC_HAVE_DYNAMIC_LIBRARIES
#pragma GCC poison PETSC_PETSC_HAVE_ERF
#pragma GCC poison PETSC_PETSC_HAVE_EXECUTABLE_EXPORT
#pragma GCC poison PETSC_PETSC_HAVE_FCNTL_H
#pragma GCC poison PETSC_PETSC_HAVE_FENV_H
#pragma GCC poison PETSC_PETSC_HAVE_FFTW
#pragma GCC poison PETSC_PETSC_HAVE_FLOAT_H
#pragma GCC poison PETSC_PETSC_HAVE_FORK
#pragma GCC poison PETSC_PETSC_HAVE_FORTRAN
#pragma GCC poison PETSC_PETSC_HAVE_FORTRAN_FLUSH
#pragma GCC poison PETSC_PETSC_HAVE_FORTRAN_FREE_LINE_LENGTH_NONE
#pragma GCC poison PETSC_PETSC_HAVE_FORTRAN_GET_COMMAND_ARGUMENT
#pragma GCC poison PETSC_PETSC_HAVE_FORTRAN_TYPE_STAR
#pragma GCC poison PETSC_PETSC_HAVE_FORTRAN_UNDERSCORE
#pragma GCC poison PETSC_PETSC_HAVE_FSTATAT
#pragma GCC poison PETSC_PETSC_HAVE_GETCWD
#pragma GCC poison PETSC_PETSC_HAVE_GETDOMAINNAME
#pragma GCC poison PETSC_PETSC_HAVE_GETHOSTBYNAME
#pragma GCC poison PETSC_PETSC_HAVE_GETHOSTNAME
#pragma GCC poison PETSC_PETSC_HAVE_GETPAGESIZE
#pragma GCC poison PETSC_PETSC_HAVE_GETRUSAGE
#pragma GCC poison PETSC_PETSC_HAVE_HYPRE
#pragma GCC poison PETSC_PETSC_HAVE_IMMINTRIN_H
#pragma GCC poison PETSC_PETSC_HAVE_INTTYPES_H
#pragma GCC poison PETSC_PETSC_HAVE_ISINF
#pragma GCC poison PETSC_PETSC_HAVE_ISNAN
#pragma GCC poison PETSC_PETSC_HAVE_ISNORMAL
#pragma GCC poison PETSC_PETSC_HAVE_I_MPI_NUMVERSION
#pragma GCC poison PETSC_PETSC_HAVE_LGAMMA
#pragma GCC poison PETSC_PETSC_HAVE_LOG2
#pragma GCC poison PETSC_PETSC_HAVE_LSEEK
#pragma GCC poison PETSC_PETSC_HAVE_MALLOC_H
#pragma GCC poison PETSC_PETSC_HAVE_MEMMOVE
#pragma GCC poison PETSC_PETSC_HAVE_METIS
#pragma GCC poison PETSC_PETSC_HAVE_MKL_INCLUDES
#pragma GCC poison PETSC_PETSC_HAVE_MKL_LIBS
#pragma GCC poison PETSC_PETSC_HAVE_MKL_SPARSE
#pragma GCC poison PETSC_PETSC_HAVE_MKL_SPARSE_OPTIMIZE
#pragma GCC poison PETSC_PETSC_HAVE_MKL_SPARSE_SP2M_FEATURE
#pragma GCC poison PETSC_PETSC_HAVE_MMAP
#pragma GCC poison PETSC_PETSC_HAVE_MPICH_NUMVERSION
#pragma GCC poison PETSC_PETSC_HAVE_MPIIO
#pragma GCC poison PETSC_PETSC_HAVE_MPI_COMBINER_CONTIGUOUS
#pragma GCC poison PETSC_PETSC_HAVE_MPI_COMBINER_DUP
#pragma GCC poison PETSC_PETSC_HAVE_MPI_COMBINER_NAMED
#pragma GCC poison PETSC_PETSC_HAVE_MPI_F90MODULE
#pragma GCC poison PETSC_PETSC_HAVE_MPI_F90MODULE_VISIBILITY
#pragma GCC poison PETSC_PETSC_HAVE_MPI_GET_ACCUMULATE
#pragma GCC poison PETSC_PETSC_HAVE_MPI_GET_LIBRARY_VERSION
#pragma GCC poison PETSC_PETSC_HAVE_MPI_INIT_THREAD
#pragma GCC poison PETSC_PETSC_HAVE_MPI_INT64_T
#pragma GCC poison PETSC_PETSC_HAVE_MPI_LONG_DOUBLE
#pragma GCC poison PETSC_PETSC_HAVE_MPI_NEIGHBORHOOD_COLLECTIVES
#pragma GCC poison PETSC_PETSC_HAVE_MPI_NONBLOCKING_COLLECTIVES
#pragma GCC poison PETSC_PETSC_HAVE_MPI_ONE_SIDED
#pragma GCC poison PETSC_PETSC_HAVE_MPI_PROCESS_SHARED_MEMORY
#pragma GCC poison PETSC_PETSC_HAVE_MPI_REDUCE_LOCAL
#pragma GCC poison PETSC_PETSC_HAVE_MPI_REDUCE_SCATTER_BLOCK
#pragma GCC poison PETSC_PETSC_HAVE_MPI_RGET
#pragma GCC poison PETSC_PETSC_HAVE_MPI_WIN_CREATE
#pragma GCC poison PETSC_PETSC_HAVE_MUMPS
#pragma GCC poison PETSC_PETSC_HAVE_NANOSLEEP
#pragma GCC poison PETSC_PETSC_HAVE_NETDB_H
#pragma GCC poison PETSC_PETSC_HAVE_NETINET_IN_H
#pragma GCC poison PETSC_PETSC_HAVE_PACKAGES
#pragma GCC poison PETSC_PETSC_HAVE_POPEN
#pragma GCC poison PETSC_PETSC_HAVE_POSIX_MEMALIGN
#pragma GCC poison PETSC_PETSC_HAVE_PTHREAD
#pragma GCC poison PETSC_PETSC_HAVE_PTHREAD_BARRIER_T
#pragma GCC poison PETSC_PETSC_HAVE_PTHREAD_H
#pragma GCC poison PETSC_PETSC_HAVE_PWD_H
#pragma GCC poison PETSC_PETSC_HAVE_RAND
#pragma GCC poison PETSC_PETSC_HAVE_READLINK
#pragma GCC poison PETSC_PETSC_HAVE_REALPATH
#pragma GCC poison PETSC_PETSC_HAVE_REAL___FLOAT128
#pragma GCC poison PETSC_PETSC_HAVE_REGEX
#pragma GCC poison PETSC_PETSC_HAVE_RTLD_GLOBAL
#pragma GCC poison PETSC_PETSC_HAVE_RTLD_LAZY
#pragma GCC poison PETSC_PETSC_HAVE_RTLD_LOCAL
#pragma GCC poison PETSC_PETSC_HAVE_RTLD_NOW
#pragma GCC poison PETSC_PETSC_HAVE_SCALAPACK
#pragma GCC poison PETSC_PETSC_HAVE_SCHED_CPU_SET_T
#pragma GCC poison PETSC_PETSC_HAVE_SETJMP_H
#pragma GCC poison PETSC_PETSC_HAVE_SLEEP
#pragma GCC poison PETSC_PETSC_HAVE_SNPRINTF
#pragma GCC poison PETSC_PETSC_HAVE_SOCKET
#pragma GCC poison PETSC_PETSC_HAVE_SO_REUSEADDR
#pragma GCC poison PETSC_PETSC_HAVE_STDINT_H
#pragma GCC poison PETSC_PETSC_HAVE_STRCASECMP
#pragma GCC poison PETSC_PETSC_HAVE_STRINGS_H
#pragma GCC poison PETSC_PETSC_HAVE_STRUCT_SIGACTION
#pragma GCC poison PETSC_PETSC_HAVE_SUITESPARSE
#pragma GCC poison PETSC_PETSC_HAVE_SYSINFO
#pragma GCC poison PETSC_PETSC_HAVE_SYS_PARAM_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_PROCFS_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_RESOURCE_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_SOCKET_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_SYSCTL_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_SYSINFO_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_TIMES_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_TIME_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_TYPES_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_UTSNAME_H
#pragma GCC poison PETSC_PETSC_HAVE_SYS_WAIT_H
#pragma GCC poison PETSC_PETSC_HAVE_TGAMMA
#pragma GCC poison PETSC_PETSC_HAVE_TIME
#pragma GCC poison PETSC_PETSC_HAVE_TIME_H
#pragma GCC poison PETSC_PETSC_HAVE_UNAME
#pragma GCC poison PETSC_PETSC_HAVE_UNISTD_H
#pragma GCC poison PETSC_PETSC_HAVE_USLEEP
#pragma GCC poison PETSC_PETSC_HAVE_VA_COPY
#pragma GCC poison PETSC_PETSC_HAVE_VSNPRINTF
#pragma GCC poison PETSC_PETSC_HAVE_XMMINTRIN_H
#pragma GCC poison PETSC_PETSC_HAVE___INT64
#pragma GCC poison PETSC_PETSC_USE_AVX512_KERNELS
#pragma GCC poison PETSC_PETSC_USE_BACKWARD_LOOP
#pragma GCC poison PETSC_PETSC_USE_CTABLE
#pragma GCC poison PETSC_PETSC_USE_DMLANDAU_2D
#pragma GCC poison PETSC_PETSC_USE_INFO
#pragma GCC poison PETSC_PETSC_USE_ISATTY
#pragma GCC poison PETSC_PETSC_USE_LOG
#pragma GCC poison PETSC_PETSC_USE_MALLOC_COALESCED
#pragma GCC poison PETSC_PETSC_USE_PROC_FOR_SIZE
#pragma GCC poison PETSC_PETSC_USE_REAL_DOUBLE
#pragma GCC poison PETSC_PETSC_USE_SHARED_LIBRARIES
#pragma GCC poison PETSC_PETSC_USE_SINGLE_LIBRARY
#pragma GCC poison PETSC_PETSC_USE_SOCKET_VIEWER
#pragma GCC poison PETSC_PETSC_USE_VISIBILITY_C
#pragma GCC poison PETSC_PETSC_USE_VISIBILITY_CXX
# 10 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsystypes.h" 2
# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 1 3































 


typedef long ptrdiff_t;


# 47 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3
typedef unsigned long size_t;




 







 





typedef int wchar_t;



# 80 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 87 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3




typedef struct {
  long long __clang_max_align_nonce1
      __attribute__((__aligned__(__alignof__(long long))));
  long double __clang_max_align_nonce2
      __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;
# 103 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3





 
# 12 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsystypes.h" 2

 







 
typedef int PetscErrorCode;
















 
typedef int PetscClassId;















 
typedef int PetscMPIInt;











 
typedef size_t PetscSizeT;













 
typedef ptrdiff_t PetscCount;








 
typedef enum {
  ENUM_DUMMY
} PetscEnum;

typedef short PetscShort;
typedef char  PetscChar;
typedef float PetscFloat;











 

# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stdint.h" 1 3






























 









 






















# 74 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stdint.h" 3

# 1 "/sw/eb/sw/GCCcore/11.2.0/lib/gcc/x86_64-pc-linux-gnu/11.2.0/include/stdint.h" 1 3
# 1 "/usr/include/stdint.h" 1 3















 



 




# 1 "/usr/include/bits/libc-header-start.h" 1 3
















 







 







# 1 "/usr/include/features.h" 1 3















 


































































































 


 
# 143 "/usr/include/features.h" 3


 










 
# 163 "/usr/include/features.h" 3




 
# 174 "/usr/include/features.h" 3

 





 
# 188 "/usr/include/features.h" 3

 
# 212 "/usr/include/features.h" 3


 
# 223 "/usr/include/features.h" 3

 





 





 





# 254 "/usr/include/features.h" 3



 
# 267 "/usr/include/features.h" 3

# 283 "/usr/include/features.h" 3






 
# 296 "/usr/include/features.h" 3



















# 322 "/usr/include/features.h" 3







# 354 "/usr/include/features.h" 3

























# 403 "/usr/include/features.h" 3




 







 







 




 






 
# 1 "/usr/include/sys/cdefs.h" 1 3















 




 






 




 






 
# 48 "/usr/include/sys/cdefs.h" 3





 
# 72 "/usr/include/sys/cdefs.h" 3

# 87 "/usr/include/sys/cdefs.h" 3



 







 




 




 



 
# 120 "/usr/include/sys/cdefs.h" 3


 



 
# 135 "/usr/include/sys/cdefs.h" 3

# 184 "/usr/include/sys/cdefs.h" 3

# 196 "/usr/include/sys/cdefs.h" 3




 
# 219 "/usr/include/sys/cdefs.h" 3










 



# 247 "/usr/include/sys/cdefs.h" 3






 




 






 







 
# 280 "/usr/include/sys/cdefs.h" 3



 






 








 
# 307 "/usr/include/sys/cdefs.h" 3

 








 
# 325 "/usr/include/sys/cdefs.h" 3






 









 
# 348 "/usr/include/sys/cdefs.h" 3


 







 
# 371 "/usr/include/sys/cdefs.h" 3

 



 
# 383 "/usr/include/sys/cdefs.h" 3


 














 
# 413 "/usr/include/sys/cdefs.h" 3






 








 




 
# 441 "/usr/include/sys/cdefs.h" 3



 
# 459 "/usr/include/sys/cdefs.h" 3

# 467 "/usr/include/sys/cdefs.h" 3







# 483 "/usr/include/sys/cdefs.h" 3




 





# 500 "/usr/include/sys/cdefs.h" 3

# 1 "/usr/include/bits/wordsize.h" 1 3
 

# 10 "/usr/include/bits/wordsize.h" 3



 
# 502 "/usr/include/sys/cdefs.h" 2 3
# 1 "/usr/include/bits/long-double.h" 1 3
















 


 
# 503 "/usr/include/sys/cdefs.h" 2 3

# 535 "/usr/include/sys/cdefs.h" 3





 
# 548 "/usr/include/sys/cdefs.h" 3







 
# 565 "/usr/include/sys/cdefs.h" 3

# 439 "/usr/include/features.h" 2 3



 







 










 
# 1 "/usr/include/gnu/stubs.h" 1 3


 


# 1 "/usr/include/gnu/stubs-64.h" 1 3



 





# 11 "/usr/include/gnu/stubs.h" 2 3
# 463 "/usr/include/features.h" 2 3


# 34 "/usr/include/bits/libc-header-start.h" 2 3


 
# 44 "/usr/include/bits/libc-header-start.h" 3


 
# 53 "/usr/include/bits/libc-header-start.h" 3


 
# 62 "/usr/include/bits/libc-header-start.h" 3


 
# 27 "/usr/include/stdint.h" 2 3
# 1 "/usr/include/bits/types.h" 1 3
















 



 




# 1 "/usr/include/bits/wordsize.h" 1 3
 

# 10 "/usr/include/bits/wordsize.h" 3



 
# 28 "/usr/include/bits/types.h" 2 3

 
typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;

 
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;





 
typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;

 

typedef long int __quad_t;
typedef unsigned long int __u_quad_t;





 

typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;

































 

# 135 "/usr/include/bits/types.h" 3
 
# 1 "/usr/include/bits/typesizes.h" 1 3
















 









 

 
# 37 "/usr/include/bits/typesizes.h" 3

# 75 "/usr/include/bits/typesizes.h" 3




 


 


 





 



# 141 "/usr/include/bits/types.h" 2 3


typedef unsigned long int __dev_t;	 
typedef unsigned int __uid_t;	 
typedef unsigned int __gid_t;	 
typedef unsigned long int __ino_t;	 
typedef unsigned long int __ino64_t;	 
typedef unsigned int __mode_t;	 
typedef unsigned long int __nlink_t;	 
typedef long int __off_t;	 
typedef long int __off64_t;	 
typedef int __pid_t;	 
typedef struct { int __val[2]; } __fsid_t;	 
typedef long int __clock_t;	 
typedef unsigned long int __rlim_t;	 
typedef unsigned long int __rlim64_t;	 
typedef unsigned int __id_t;		 
typedef long int __time_t;	 
typedef unsigned int __useconds_t;  
typedef long int __suseconds_t;  

typedef int __daddr_t;	 
typedef int __key_t;	 

 
typedef int __clockid_t;

 
typedef void * __timer_t;

 
typedef long int __blksize_t;

 

 
typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;

 
typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;

 
typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;

 
typedef long int __fsword_t;

typedef long int __ssize_t;  

 
typedef long int __syscall_slong_t;
 
typedef unsigned long int __syscall_ulong_t;


 
typedef __off64_t __loff_t;	 
typedef char *__caddr_t;

 
typedef long int __intptr_t;

 
typedef unsigned int __socklen_t;



 
typedef int __sig_atomic_t;



# 28 "/usr/include/stdint.h" 2 3
# 1 "/usr/include/bits/wchar.h" 1 3
















 













 

# 40 "/usr/include/bits/wchar.h" 3

# 48 "/usr/include/bits/wchar.h" 3

# 29 "/usr/include/stdint.h" 2 3
# 1 "/usr/include/bits/wordsize.h" 1 3
 

# 10 "/usr/include/bits/wordsize.h" 3



 
# 30 "/usr/include/stdint.h" 2 3

 

 
# 1 "/usr/include/bits/stdint-intn.h" 1 3
















 






typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;

# 35 "/usr/include/stdint.h" 2 3

 
# 1 "/usr/include/bits/stdint-uintn.h" 1 3
















 






typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;

# 38 "/usr/include/stdint.h" 2 3


 

 
typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;

 
typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;


 

 
typedef signed char		int_fast8_t;

typedef long int		int_fast16_t;
typedef long int		int_fast32_t;
typedef long int		int_fast64_t;
# 69 "/usr/include/stdint.h" 3

 
typedef unsigned char		uint_fast8_t;

typedef unsigned long int	uint_fast16_t;
typedef unsigned long int	uint_fast32_t;
typedef unsigned long int	uint_fast64_t;
# 82 "/usr/include/stdint.h" 3


 


typedef long int		intptr_t;


typedef unsigned long int	uintptr_t;
# 98 "/usr/include/stdint.h" 3


 
typedef __intmax_t		intmax_t;
typedef __uintmax_t		uintmax_t;


# 112 "/usr/include/stdint.h" 3

 

 




 





 






 




 





 






 
# 161 "/usr/include/stdint.h" 3
 
# 171 "/usr/include/stdint.h" 3

 
# 182 "/usr/include/stdint.h" 3


 
# 194 "/usr/include/stdint.h" 3


 

 


 



 

 
# 220 "/usr/include/stdint.h" 3

 



 
# 235 "/usr/include/stdint.h" 3

 

 




 



 
# 256 "/usr/include/stdint.h" 3

 
# 266 "/usr/include/stdint.h" 3

 
# 275 "/usr/include/stdint.h" 3

# 318 "/usr/include/stdint.h" 3

# 10 "/sw/eb/sw/GCCcore/11.2.0/lib/gcc/x86_64-pc-linux-gnu/11.2.0/include/stdint.h" 2 3
# 76 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stdint.h" 2 3

# 85 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stdint.h" 3

# 117 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsystypes.h" 2
# 1 "/usr/include/inttypes.h" 1 3















 



 





 
# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stdint.h" 1 3






























 









 






















# 74 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stdint.h" 3



# 85 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stdint.h" 3

# 28 "/usr/include/inttypes.h" 2 3

 




typedef int __gwchar_t;
# 42 "/usr/include/inttypes.h" 3

# 50 "/usr/include/inttypes.h" 3

 

 































 















 















 















 
















 
# 157 "/usr/include/inttypes.h" 3


 
# 166 "/usr/include/inttypes.h" 3


 

 















 















 















 















 
















 






 











 
typedef struct
  {
    long int quot;		 
    long int rem;		 
  } imaxdiv_t;

# 287 "/usr/include/inttypes.h" 3


 
extern intmax_t imaxabs (intmax_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern intmax_t strtoimax (const char *__restrict __nptr,
			   char **__restrict __endptr, int __base) __attribute__ ((__nothrow__ , __leaf__));

 
extern uintmax_t strtoumax (const char *__restrict __nptr,
			    char ** __restrict __endptr, int __base) __attribute__ ((__nothrow__ , __leaf__));

 
extern intmax_t wcstoimax (const __gwchar_t *__restrict __nptr,
			   __gwchar_t **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__));

 
extern uintmax_t wcstoumax (const __gwchar_t *__restrict __nptr,
			    __gwchar_t ** __restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__));

# 431 "/usr/include/inttypes.h" 3



# 123 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsystypes.h" 2






typedef int64_t PetscInt64;
# 137 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsystypes.h"




typedef int       PetscInt;


# 156 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsystypes.h"
































 





typedef int       PetscBLASInt;















 
typedef int PetscCuBLASInt;














 
typedef int PetscHipBLASInt;











 
typedef enum {
  PETSC_FALSE,
  PETSC_TRUE
} PetscBool;










 
typedef enum {
  PETSC_BOOL3_FALSE,
  PETSC_BOOL3_TRUE,
  PETSC_BOOL3_UNKNOWN = -1
} PetscBool3;
















 




typedef double    PetscReal;
# 294 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsystypes.h"


























 
# 342 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsystypes.h"

# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/complex.h" 1 3












 





 




# 1 "/usr/include/complex.h" 1 3















 



 




# 1 "/usr/include/bits/libc-header-start.h" 1 3
















 







 










 
# 44 "/usr/include/bits/libc-header-start.h" 3


 
# 53 "/usr/include/bits/libc-header-start.h" 3


 
# 62 "/usr/include/bits/libc-header-start.h" 3


 
# 27 "/usr/include/complex.h" 2 3

 
# 1 "/usr/include/bits/mathdef.h" 1 3















 

# 30 "/usr/include/complex.h" 2 3

 
# 1 "/usr/include/bits/floatn.h" 1 3
















 










 
# 36 "/usr/include/bits/floatn.h" 3


 








 





 





 
# 68 "/usr/include/bits/floatn.h" 3

 
# 80 "/usr/include/bits/floatn.h" 3

 


 




 








 
# 106 "/usr/include/bits/floatn.h" 3




 








# 1 "/usr/include/bits/floatn-common.h" 1 3

















 




# 1 "/usr/include/bits/long-double.h" 1 3
















 


 
# 25 "/usr/include/bits/floatn-common.h" 2 3




 



 

















 
# 58 "/usr/include/bits/floatn-common.h" 3




 





 










 
# 88 "/usr/include/bits/floatn-common.h" 3

# 96 "/usr/include/bits/floatn-common.h" 3

# 108 "/usr/include/bits/floatn-common.h" 3

# 116 "/usr/include/bits/floatn-common.h" 3

# 128 "/usr/include/bits/floatn-common.h" 3

# 136 "/usr/include/bits/floatn-common.h" 3

 
# 146 "/usr/include/bits/floatn-common.h" 3

# 154 "/usr/include/bits/floatn-common.h" 3

# 166 "/usr/include/bits/floatn-common.h" 3

# 174 "/usr/include/bits/floatn-common.h" 3

# 186 "/usr/include/bits/floatn-common.h" 3

# 194 "/usr/include/bits/floatn-common.h" 3

 
# 210 "/usr/include/bits/floatn-common.h" 3







# 223 "/usr/include/bits/floatn-common.h" 3










 

# 249 "/usr/include/bits/floatn-common.h" 3





# 260 "/usr/include/bits/floatn-common.h" 3











# 277 "/usr/include/bits/floatn-common.h" 3











# 294 "/usr/include/bits/floatn-common.h" 3

# 309 "/usr/include/bits/floatn-common.h" 3



# 326 "/usr/include/bits/floatn-common.h" 3



# 120 "/usr/include/bits/floatn.h" 2 3

# 33 "/usr/include/complex.h" 2 3





 








 



 




 





































 

# 103 "/usr/include/complex.h" 3

# 1 "/usr/include/bits/cmathcalls.h" 1 3

















 






















 










 

 
extern double _Complex cacos (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __cacos (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
 
extern double _Complex casin (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __casin (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
 
extern double _Complex catan (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __catan (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

 
extern double _Complex ccos (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __ccos (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
 
extern double _Complex csin (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __csin (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
 
extern double _Complex ctan (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __ctan (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


 

 
extern double _Complex cacosh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __cacosh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
 
extern double _Complex casinh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __casinh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
 
extern double _Complex catanh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __catanh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

 
extern double _Complex ccosh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __ccosh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
 
extern double _Complex csinh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __csinh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
 
extern double _Complex ctanh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __ctanh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


 

 
extern double _Complex cexp (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __cexp (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

 
extern double _Complex clog (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __clog (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));







 

 
extern double _Complex cpow (double _Complex __x, double _Complex __y) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __cpow (double _Complex __x, double _Complex __y) __attribute__ ((__nothrow__ , __leaf__));

 
extern double _Complex csqrt (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __csqrt (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


 

 
extern double cabs (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double __cabs (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

 
extern double carg (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double __carg (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

 
extern double _Complex conj (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __conj (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

 
extern double _Complex cproj (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __cproj (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


 

 
extern double cimag (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double __cimag (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

 
extern double creal (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double __creal (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
# 107 "/usr/include/complex.h" 2 3



 
# 1 "/usr/include/bits/cmathcalls.h" 1 3

















 






















 










 

 
extern float _Complex cacosf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __cacosf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
 
extern float _Complex casinf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __casinf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
 
extern float _Complex catanf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __catanf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

 
extern float _Complex ccosf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __ccosf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
 
extern float _Complex csinf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __csinf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
 
extern float _Complex ctanf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __ctanf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


 

 
extern float _Complex cacoshf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __cacoshf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
 
extern float _Complex casinhf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __casinhf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
 
extern float _Complex catanhf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __catanhf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

 
extern float _Complex ccoshf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __ccoshf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
 
extern float _Complex csinhf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __csinhf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
 
extern float _Complex ctanhf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __ctanhf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


 

 
extern float _Complex cexpf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __cexpf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

 
extern float _Complex clogf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __clogf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));







 

 
extern float _Complex cpowf (float _Complex __x, float _Complex __y) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __cpowf (float _Complex __x, float _Complex __y) __attribute__ ((__nothrow__ , __leaf__));

 
extern float _Complex csqrtf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __csqrtf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


 

 
extern float cabsf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float __cabsf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

 
extern float cargf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float __cargf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

 
extern float _Complex conjf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __conjf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

 
extern float _Complex cprojf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __cprojf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


 

 
extern float cimagf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float __cimagf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

 
extern float crealf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float __crealf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
# 114 "/usr/include/complex.h" 2 3




 
# 126 "/usr/include/complex.h" 3

# 1 "/usr/include/bits/cmathcalls.h" 1 3

















 






















 










 

 
extern long double _Complex cacosl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __cacosl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
 
extern long double _Complex casinl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __casinl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
 
extern long double _Complex catanl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __catanl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

 
extern long double _Complex ccosl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __ccosl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
 
extern long double _Complex csinl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __csinl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
 
extern long double _Complex ctanl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __ctanl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


 

 
extern long double _Complex cacoshl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __cacoshl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
 
extern long double _Complex casinhl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __casinhl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
 
extern long double _Complex catanhl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __catanhl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

 
extern long double _Complex ccoshl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __ccoshl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
 
extern long double _Complex csinhl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __csinhl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
 
extern long double _Complex ctanhl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __ctanhl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


 

 
extern long double _Complex cexpl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __cexpl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

 
extern long double _Complex clogl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __clogl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));







 

 
extern long double _Complex cpowl (long double _Complex __x, long double _Complex __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __cpowl (long double _Complex __x, long double _Complex __y) __attribute__ ((__nothrow__ , __leaf__));

 
extern long double _Complex csqrtl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __csqrtl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


 

 
extern long double cabsl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cabsl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

 
extern long double cargl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cargl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

 
extern long double _Complex conjl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __conjl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

 
extern long double _Complex cprojl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __cprojl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


 

 
extern long double cimagl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cimagl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

 
extern long double creall (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double __creall (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
# 130 "/usr/include/complex.h" 2 3




# 145 "/usr/include/complex.h" 3

# 157 "/usr/include/complex.h" 3

# 169 "/usr/include/complex.h" 3

# 181 "/usr/include/complex.h" 3

# 193 "/usr/include/complex.h" 3

# 205 "/usr/include/complex.h" 3

# 217 "/usr/include/complex.h" 3







# 26 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/complex.h" 2 3





         








# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math_common_define.h" 1 3












 







# 34 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math_common_define.h" 3

# 42 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math_common_define.h" 3







# 62 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math_common_define.h" 3

# 41 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/complex.h" 2 3


                 













             



# 74 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/complex.h" 3

                 

# 93 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/complex.h" 3
                extern double _Complex  cis( double __x );
                extern float _Complex   cisf( float __x );
                extern long double _Complex  cisl( long double __x );
                extern double _Complex  cisd( double __x );
                extern float _Complex   cisdf( float __x );
                extern long double _Complex  cisdl( long double __x );

                 





                extern double _Complex  cexp2( double _Complex __z );
                extern float _Complex   cexp2f( float _Complex __z );
                extern long double _Complex  cexp2l( long double _Complex __z );
                extern double _Complex  cexp10( double _Complex __z );
                extern float _Complex   cexp10f( float _Complex __z );
                extern long double _Complex  cexp10l( long double _Complex __z );
# 126 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/complex.h" 3

                 





                extern double _Complex  clog2( double _Complex __z );
                extern float _Complex   clog2f( float _Complex __z );
                extern long double _Complex  clog2l( long double _Complex __z );
                extern double _Complex  clog10( double _Complex __z );
                extern float _Complex   clog10f( float _Complex __z );
                extern long double _Complex  clog10l( long double _Complex __z );

                 

# 150 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/complex.h" 3

                 

# 163 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/complex.h" 3

# 188 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/complex.h" 3

# 219 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/complex.h" 3



# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math_common_undefine.h" 1 3












 










# 223 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/complex.h" 2 3

# 374 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsystypes.h" 2



typedef double _Complex PetscComplex;

















 




typedef PetscReal PetscScalar;




















 
typedef enum {
  PETSC_COPY_VALUES,
  PETSC_OWN_POINTER,
  PETSC_USE_POINTER
} PetscCopyMode;










 










 









 
typedef double PetscLogDouble;























 
typedef enum {
  PETSC_DATATYPE_UNKNOWN = 0,
  PETSC_DOUBLE           = 1,
  PETSC_COMPLEX          = 2,
  PETSC_LONG             = 3,
  PETSC_SHORT            = 4,
  PETSC_FLOAT            = 5,
  PETSC_CHAR             = 6,
  PETSC_BIT_LOGICAL      = 7,
  PETSC_ENUM             = 8,
  PETSC_BOOL             = 9,
  PETSC___FLOAT128       = 10,
  PETSC_OBJECT           = 11,
  PETSC_FUNCTION         = 12,
  PETSC_STRING           = 13,
  PETSC___FP16           = 14,
  PETSC_STRUCT           = 15,
  PETSC_INT              = 16,
  PETSC_INT64            = 17,
  PETSC_COUNT            = 18
} PetscDataType;

# 517 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsystypes.h"















 
typedef struct _p_PetscToken *PetscToken;












 
typedef struct _p_PetscObject *PetscObject;











 
typedef PetscInt64 PetscObjectId;











 
typedef PetscInt64 PetscObjectState;








 
typedef struct _n_PetscFunctionList *PetscFunctionList;














 
typedef enum {
  FILE_MODE_UNDEFINED = -1,
  FILE_MODE_READ      = 0,
  FILE_MODE_WRITE,
  FILE_MODE_APPEND,
  FILE_MODE_UPDATE,
  FILE_MODE_APPEND_UPDATE
} PetscFileMode;

typedef void *PetscDLHandle;
typedef enum {
  PETSC_DL_DECIDE = 0,
  PETSC_DL_NOW    = 1,
  PETSC_DL_LOCAL  = 2
} PetscDLMode;










 
typedef struct _n_PetscObjectList *PetscObjectList;







 
typedef struct _n_PetscDLLibrary *PetscDLLibrary;










 
typedef struct _p_PetscContainer *PetscContainer;







 
typedef struct _p_PetscRandom *PetscRandom;






 
# 669 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsystypes.h"







 
typedef enum {
  PETSC_BINARY_SEEK_SET = 0,
  PETSC_BINARY_SEEK_CUR = 1,
  PETSC_BINARY_SEEK_END = 2
} PetscBinarySeekType;















 
typedef enum {
  PETSC_BUILDTWOSIDED_NOTSET     = -1,
  PETSC_BUILDTWOSIDED_ALLREDUCE  = 0,
  PETSC_BUILDTWOSIDED_IBARRIER   = 1,
  PETSC_BUILDTWOSIDED_REDSCATTER = 2
   
} PetscBuildTwoSidedType;

 








 
typedef enum {
  NOT_SET_VALUES,
  INSERT_VALUES,
  ADD_VALUES,
  MAX_VALUES,
  MIN_VALUES,
  INSERT_ALL_VALUES,
  ADD_ALL_VALUES,
  INSERT_BC_VALUES,
  ADD_BC_VALUES
} InsertMode;










 











 








 








 



































 
typedef struct _n_PetscSubcomm *PetscSubcomm;
typedef enum {
  PETSC_SUBCOMM_GENERAL    = 0,
  PETSC_SUBCOMM_CONTIGUOUS = 1,
  PETSC_SUBCOMM_INTERLACED = 2
} PetscSubcommType;







 
typedef struct _PetscHeap *PetscHeap;

typedef struct _n_PetscShmComm *PetscShmComm;
typedef struct _n_PetscOmpCtrl *PetscOmpCtrl;







 
typedef struct _n_PetscSegBuffer *PetscSegBuffer;

typedef struct _n_PetscOptionsHelpPrinted *PetscOptionsHelpPrinted;
# 45 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h" 2

 









 
# 1 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h" 1












 
 










































 
 



 







 




# 90 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"

# 97 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"

# 106 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"

# 115 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"


 





# 132 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"








 
# 149 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"

 





typedef int MPI_Datatype;
# 174 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"

# 195 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"












 
# 214 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"

# 248 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"

 
# 257 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"






 
# 271 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"

 
# 284 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"

 
# 294 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"

# 305 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"

 





 


# 323 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"

 




 





 




 
typedef int MPI_Comm;



 
typedef int MPI_Group;


 
typedef int MPI_Win;


 
 


 
typedef struct ADIOI_FileD *MPI_File;


 
typedef int MPI_Op;

# 378 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"

 











 
# 399 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"


 










 






 



 
typedef enum MPIR_Win_flavor {
    MPI_WIN_FLAVOR_CREATE      = 1,
    MPI_WIN_FLAVOR_ALLOCATE    = 2,
    MPI_WIN_FLAVOR_DYNAMIC     = 3,
    MPI_WIN_FLAVOR_SHARED      = 4
} MPIR_Win_flavor_t;

 
typedef enum MPIR_Win_model {
    MPI_WIN_SEPARATE   = 1,
    MPI_WIN_UNIFIED    = 2
} MPIR_Win_model_t;

 


 
typedef enum MPIR_Topo_type { MPI_GRAPH=1, MPI_CART=2, MPI_DIST_GRAPH=3 } MPIR_Topo_type;



extern  int * const MPI_UNWEIGHTED ;
extern  int * const MPI_WEIGHTS_EMPTY ;









 
typedef void (MPI_Handler_function) ( MPI_Comm *, int *, ... );
typedef int (MPI_Comm_copy_attr_function)(MPI_Comm, int, void *, void *, 
					  void *, int *);
typedef int (MPI_Comm_delete_attr_function)(MPI_Comm, int, void *, void *);
typedef int (MPI_Type_copy_attr_function)(MPI_Datatype, int, void *, void *, 
					  void *, int *);
typedef int (MPI_Type_delete_attr_function)(MPI_Datatype, int, void *, void *);
typedef int (MPI_Win_copy_attr_function)(MPI_Win, int, void *, void *, void *,
					 int *);
typedef int (MPI_Win_delete_attr_function)(MPI_Win, int, void *, void *);
 
typedef void (MPI_Comm_errhandler_function)(MPI_Comm *, int *, ...);
typedef void (MPI_File_errhandler_function)(MPI_File *, int *, ...);
typedef void (MPI_Win_errhandler_function)(MPI_Win *, int *, ...);
 
typedef MPI_Comm_errhandler_function MPI_Comm_errhandler_fn;
typedef MPI_File_errhandler_function MPI_File_errhandler_fn;
typedef MPI_Win_errhandler_function MPI_Win_errhandler_fn;


 





 

typedef int MPI_Errhandler;



 
 



 
# 504 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"

 
typedef int MPI_Request;

 
typedef int MPI_Message;

 
typedef void (MPI_User_function) ( void *, void *, int *, MPI_Datatype * ); 

 
typedef int (MPI_Copy_function) ( MPI_Comm, int, void *, void *, void *, int * );
typedef int (MPI_Delete_function) ( MPI_Comm, int, void *, void * );






























 


































 



 
enum MPIR_Combiner_enum {
    MPI_COMBINER_NAMED            = 1,
    MPI_COMBINER_DUP              = 2,
    MPI_COMBINER_CONTIGUOUS       = 3, 
    MPI_COMBINER_VECTOR           = 4,
    MPI_COMBINER_HVECTOR_INTEGER  = 5,
    MPI_COMBINER_HVECTOR          = 6,
    MPI_COMBINER_INDEXED          = 7,
    MPI_COMBINER_HINDEXED_INTEGER = 8, 
    MPI_COMBINER_HINDEXED         = 9, 
    MPI_COMBINER_INDEXED_BLOCK    = 10, 
    MPI_COMBINER_STRUCT_INTEGER   = 11,
    MPI_COMBINER_STRUCT           = 12,
    MPI_COMBINER_SUBARRAY         = 13,
    MPI_COMBINER_DARRAY           = 14,
    MPI_COMBINER_F90_REAL         = 15,
    MPI_COMBINER_F90_COMPLEX      = 16,
    MPI_COMBINER_F90_INTEGER      = 17,
    MPI_COMBINER_RESIZED          = 18,
    MPI_COMBINER_HINDEXED_BLOCK   = 19
};

 
typedef int MPI_Info;





 
# 623 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"



 






 


 


 
typedef long MPI_Aint;
typedef int MPI_Fint;
typedef long long MPI_Count;







 



 



 
typedef long long MPI_Offset;






 
typedef struct MPI_Status {
    int count_lo;
    int count_hi_and_cancelled;
    int MPI_SOURCE;
    int MPI_TAG;
    int MPI_ERROR;
} MPI_Status;

 
struct MPIR_T_enum_s;
struct MPIR_T_cvar_handle_s;
struct MPIR_T_pvar_handle_s;
struct MPIR_T_pvar_session_s;

typedef struct MPIR_T_enum_s * MPI_T_enum;
typedef struct MPIR_T_cvar_handle_s * MPI_T_cvar_handle;
typedef struct MPIR_T_pvar_handle_s * MPI_T_pvar_handle;
typedef struct MPIR_T_pvar_session_s * MPI_T_pvar_session;

 
extern  struct MPIR_T_pvar_handle_s * const MPI_T_PVAR_ALL_HANDLES ;







 
typedef enum MPIR_T_verbosity_t {
    
 
    MPIX_T_VERBOSITY_INVALID = 0,

     
    MPI_T_VERBOSITY_USER_BASIC = 221,
    MPI_T_VERBOSITY_USER_DETAIL,
    MPI_T_VERBOSITY_USER_ALL,

    MPI_T_VERBOSITY_TUNER_BASIC,
    MPI_T_VERBOSITY_TUNER_DETAIL,
    MPI_T_VERBOSITY_TUNER_ALL,

    MPI_T_VERBOSITY_MPIDEV_BASIC,
    MPI_T_VERBOSITY_MPIDEV_DETAIL,
    MPI_T_VERBOSITY_MPIDEV_ALL
} MPIR_T_verbosity_t;

typedef enum MPIR_T_bind_t {
    
 
    MPIX_T_BIND_INVALID = 0,

     
    MPI_T_BIND_NO_OBJECT = 9700,
    MPI_T_BIND_MPI_COMM,
    MPI_T_BIND_MPI_DATATYPE,
    MPI_T_BIND_MPI_ERRHANDLER,
    MPI_T_BIND_MPI_FILE,
    MPI_T_BIND_MPI_GROUP,
    MPI_T_BIND_MPI_OP,
    MPI_T_BIND_MPI_REQUEST,
    MPI_T_BIND_MPI_WIN,
    MPI_T_BIND_MPI_MESSAGE,
    MPI_T_BIND_MPI_INFO
} MPIR_T_bind_t;

typedef enum MPIR_T_scope_t {
    
 
    MPIX_T_SCOPE_INVALID = 0,

     
    MPI_T_SCOPE_CONSTANT = 60438,
    MPI_T_SCOPE_READONLY,
    MPI_T_SCOPE_LOCAL,
    MPI_T_SCOPE_GROUP,
    MPI_T_SCOPE_GROUP_EQ,
    MPI_T_SCOPE_ALL,
    MPI_T_SCOPE_ALL_EQ
} MPIR_T_scope_t;

typedef enum MPIR_T_pvar_class_t {
    
 
    MPIX_T_PVAR_CLASS_INVALID = 0,

     
    MPIR_T_PVAR_CLASS_FIRST = 240,
    MPI_T_PVAR_CLASS_STATE = MPIR_T_PVAR_CLASS_FIRST,
    MPI_T_PVAR_CLASS_LEVEL,
    MPI_T_PVAR_CLASS_SIZE,
    MPI_T_PVAR_CLASS_PERCENTAGE,
    MPI_T_PVAR_CLASS_HIGHWATERMARK,
    MPI_T_PVAR_CLASS_LOWWATERMARK,
    MPI_T_PVAR_CLASS_COUNTER,
    MPI_T_PVAR_CLASS_AGGREGATE,
    MPI_T_PVAR_CLASS_TIMER,
    MPI_T_PVAR_CLASS_GENERIC,
    MPIR_T_PVAR_CLASS_LAST,
    MPIR_T_PVAR_CLASS_NUMBER = MPIR_T_PVAR_CLASS_LAST - MPIR_T_PVAR_CLASS_FIRST
} MPIR_T_pvar_class_t;

 

 
# 791 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"

 
# 811 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"





 
extern  MPI_Fint * MPI_F_STATUS_IGNORE ;
extern  MPI_Fint * MPI_F_STATUSES_IGNORE ;



 


 





 
typedef struct {
    MPI_Fint count_lo;
    MPI_Fint count_hi_and_cancelled;
    MPI_Fint MPI_SOURCE;
    MPI_Fint MPI_TAG;
    MPI_Fint MPI_ERROR;
} MPI_F08_status;

extern  MPI_F08_status MPIR_F08_MPI_STATUS_IGNORE_OBJ ;
extern  MPI_F08_status MPIR_F08_MPI_STATUSES_IGNORE_OBJ[1] ;
extern  int MPIR_F08_MPI_IN_PLACE ;
extern  int MPIR_F08_MPI_BOTTOM ;

 
extern  MPI_F08_status *MPI_F08_STATUS_IGNORE ;
extern  MPI_F08_status *MPI_F08_STATUSES_IGNORE ;

 





 
typedef int (MPI_Grequest_cancel_function)(void *, int); 
typedef int (MPI_Grequest_free_function)(void *); 
typedef int (MPI_Grequest_query_function)(void *, MPI_Status *); 
typedef int (MPIX_Grequest_poll_function)(void *, MPI_Status *);
typedef int (MPIX_Grequest_wait_function)(int, void **, double, MPI_Status *);

 

 
# 873 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"

 




 



 


 





 



 
# 910 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"


 





# 927 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"

# 936 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"






 
# 962 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"












# 980 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"




 

 
typedef int (MPI_Datarep_conversion_function)(void *, MPI_Datatype, int, 
             void *, MPI_Offset, void *);
typedef int (MPI_Datarep_extent_function)(MPI_Datatype datatype, MPI_Aint *,
                      void *);






 
 




 

 
 
int MPI_Send(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
             MPI_Comm comm)  ;
int MPI_Recv(void *buf, int count, MPI_Datatype datatype, int source, int tag,
             MPI_Comm comm, MPI_Status *status)  ;
int MPI_Get_count(const MPI_Status *status, MPI_Datatype datatype, int *count) ;
int MPI_Bsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
              MPI_Comm comm)  ;
int MPI_Ssend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
              MPI_Comm comm)  ;
int MPI_Rsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
              MPI_Comm comm)  ;
int MPI_Buffer_attach(void *buffer, int size) ;
int MPI_Buffer_detach(void *buffer_addr, int *size) ;
int MPI_Isend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
              MPI_Comm comm, MPI_Request *request)  ;
int MPI_Ibsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
               MPI_Comm comm, MPI_Request *request)  ;
int MPI_Issend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
               MPI_Comm comm, MPI_Request *request)  ;
int MPI_Irsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
               MPI_Comm comm, MPI_Request *request)  ;
int MPI_Irecv(void *buf, int count, MPI_Datatype datatype, int source, int tag,
              MPI_Comm comm, MPI_Request *request)  ;
int MPI_Wait(MPI_Request *request, MPI_Status *status) ;
int MPI_Test(MPI_Request *request, int *flag, MPI_Status *status) ;
int MPI_Request_free(MPI_Request *request) ;
int MPI_Waitany(int count, MPI_Request array_of_requests[], int *indx, MPI_Status *status) ;
int MPI_Testany(int count, MPI_Request array_of_requests[], int *indx, int *flag,
                MPI_Status *status) ;
int MPI_Waitall(int count, MPI_Request array_of_requests[], MPI_Status array_of_statuses[]) ;
int MPI_Testall(int count, MPI_Request array_of_requests[], int *flag,
                MPI_Status array_of_statuses[]) ;
int MPI_Waitsome(int incount, MPI_Request array_of_requests[], int *outcount,
                 int array_of_indices[], MPI_Status array_of_statuses[]) ;
int MPI_Testsome(int incount, MPI_Request array_of_requests[], int *outcount,
                 int array_of_indices[], MPI_Status array_of_statuses[]) ;
int MPI_Iprobe(int source, int tag, MPI_Comm comm, int *flag, MPI_Status *status) ;
int MPI_Probe(int source, int tag, MPI_Comm comm, MPI_Status *status) ;
int MPI_Cancel(MPI_Request *request) ;
int MPI_Test_cancelled(const MPI_Status *status, int *flag) ;
int MPI_Send_init(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
                  MPI_Comm comm, MPI_Request *request)  ;
int MPI_Bsend_init(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
                   MPI_Comm comm, MPI_Request *request)  ;
int MPI_Ssend_init(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
                   MPI_Comm comm, MPI_Request *request)  ;
int MPI_Rsend_init(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
                   MPI_Comm comm, MPI_Request *request)  ;
int MPI_Recv_init(void *buf, int count, MPI_Datatype datatype, int source, int tag,
                  MPI_Comm comm, MPI_Request *request)  ;
int MPI_Start(MPI_Request *request) ;
int MPI_Startall(int count, MPI_Request array_of_requests[]) ;
int MPI_Sendrecv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, int dest,
                 int sendtag, void *recvbuf, int recvcount, MPI_Datatype recvtype,
                 int source, int recvtag, MPI_Comm comm, MPI_Status *status)
                   ;
int MPI_Sendrecv_replace(void *buf, int count, MPI_Datatype datatype, int dest,
                         int sendtag, int source, int recvtag, MPI_Comm comm,
                         MPI_Status *status)  ;
int MPI_Type_contiguous(int count, MPI_Datatype oldtype, MPI_Datatype *newtype) ;
int MPI_Type_vector(int count, int blocklength, int stride, MPI_Datatype oldtype,
                    MPI_Datatype *newtype) ;
int MPI_Type_hvector(int count, int blocklength, MPI_Aint stride, MPI_Datatype oldtype,
                     MPI_Datatype *newtype) ;
int MPI_Type_indexed(int count, const int *array_of_blocklengths,
                     const int *array_of_displacements, MPI_Datatype oldtype,
                     MPI_Datatype *newtype) ;
int MPI_Type_hindexed(int count, int *array_of_blocklengths,
                      MPI_Aint *array_of_displacements, MPI_Datatype oldtype,
                      MPI_Datatype *newtype) ;
int MPI_Type_struct(int count, int *array_of_blocklengths,
                    MPI_Aint *array_of_displacements,
                    MPI_Datatype *array_of_types, MPI_Datatype *newtype) ;
int MPI_Address(void *location, MPI_Aint *address) ;
int MPI_Type_extent(MPI_Datatype datatype, MPI_Aint *extent) ;
int MPI_Type_size(MPI_Datatype datatype, int *size) ;
int MPI_Type_lb(MPI_Datatype datatype, MPI_Aint *displacement) ;
int MPI_Type_ub(MPI_Datatype datatype, MPI_Aint *displacement) ;
int MPI_Type_commit(MPI_Datatype *datatype) ;
int MPI_Type_free(MPI_Datatype *datatype) ;
int MPI_Get_elements(const MPI_Status *status, MPI_Datatype datatype, int *count) ;
int MPI_Pack(const void *inbuf, int incount, MPI_Datatype datatype, void *outbuf,
             int outsize, int *position, MPI_Comm comm)  ;
int MPI_Unpack(const void *inbuf, int insize, int *position, void *outbuf, int outcount,
               MPI_Datatype datatype, MPI_Comm comm)  ;
int MPI_Pack_size(int incount, MPI_Datatype datatype, MPI_Comm comm, int *size) ;
int MPI_Barrier(MPI_Comm comm) ;
int MPI_Bcast(void *buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm)
               ;
int MPI_Gather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf,
               int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm)
                 ;
int MPI_Gatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf,
                const int *recvcounts, const int *displs, MPI_Datatype recvtype, int root,
                MPI_Comm comm)
                  ;
int MPI_Scatter(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf,
                int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm)
                  ;
int MPI_Scatterv(const void *sendbuf, const int *sendcounts, const int *displs,
                 MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype,
                 int root, MPI_Comm comm)
                   ;
int MPI_Allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf,
                  int recvcount, MPI_Datatype recvtype, MPI_Comm comm)
                    ;
int MPI_Allgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf,
                   const int *recvcounts, const int *displs, MPI_Datatype recvtype, MPI_Comm comm)
                     ;
int MPI_Alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf,
                 int recvcount, MPI_Datatype recvtype, MPI_Comm comm)
                   ;
int MPI_Alltoallv(const void *sendbuf, const int *sendcounts, const int *sdispls,
                  MPI_Datatype sendtype, void *recvbuf, const int *recvcounts,
                  const int *rdispls, MPI_Datatype recvtype, MPI_Comm comm)
                    ;
int MPI_Alltoallw(const void *sendbuf, const int sendcounts[], const int sdispls[],
                  const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[],
                  const int rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm) ;
int MPI_Exscan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype,
               MPI_Op op, MPI_Comm comm)
                 ;
int MPI_Reduce(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype,
               MPI_Op op, int root, MPI_Comm comm)
                 ;
int MPI_Op_create(MPI_User_function *user_fn, int commute, MPI_Op *op) ;
int MPI_Op_free(MPI_Op *op) ;
int MPI_Allreduce(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype,
                  MPI_Op op, MPI_Comm comm)
                    ;
int MPI_Reduce_scatter(const void *sendbuf, void *recvbuf, const int recvcounts[],
                       MPI_Datatype datatype, MPI_Op op, MPI_Comm comm)
                         ;
int MPI_Scan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op,
             MPI_Comm comm)
               ;
int MPI_Group_size(MPI_Group group, int *size) ;
int MPI_Group_rank(MPI_Group group, int *rank) ;
int MPI_Group_translate_ranks(MPI_Group group1, int n, const int ranks1[], MPI_Group group2,
                              int ranks2[]) ;
int MPI_Group_compare(MPI_Group group1, MPI_Group group2, int *result) ;
int MPI_Comm_group(MPI_Comm comm, MPI_Group *group) ;
int MPI_Group_union(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup) ;
int MPI_Group_intersection(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup) ;
int MPI_Group_difference(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup) ;
int MPI_Group_incl(MPI_Group group, int n, const int ranks[], MPI_Group *newgroup) ;
int MPI_Group_excl(MPI_Group group, int n, const int ranks[], MPI_Group *newgroup) ;
int MPI_Group_range_incl(MPI_Group group, int n, int ranges[][3], MPI_Group *newgroup) ;
int MPI_Group_range_excl(MPI_Group group, int n, int ranges[][3], MPI_Group *newgroup) ;
int MPI_Group_free(MPI_Group *group) ;
int MPI_Comm_size(MPI_Comm comm, int *size) ;
int MPI_Comm_rank(MPI_Comm comm, int *rank) ;
int MPI_Comm_compare(MPI_Comm comm1, MPI_Comm comm2, int *result) ;
int MPI_Comm_dup(MPI_Comm comm, MPI_Comm *newcomm) ;
int MPI_Comm_dup_with_info(MPI_Comm comm, MPI_Info info, MPI_Comm *newcomm) ;
int MPI_Comm_create(MPI_Comm comm, MPI_Group group, MPI_Comm *newcomm) ;
int MPI_Comm_split(MPI_Comm comm, int color, int key, MPI_Comm *newcomm) ;
int MPI_Comm_free(MPI_Comm *comm) ;
int MPI_Comm_test_inter(MPI_Comm comm, int *flag) ;
int MPI_Comm_remote_size(MPI_Comm comm, int *size) ;
int MPI_Comm_remote_group(MPI_Comm comm, MPI_Group *group) ;
int MPI_Intercomm_create(MPI_Comm local_comm, int local_leader, MPI_Comm peer_comm,
                         int remote_leader, int tag, MPI_Comm *newintercomm) ;
int MPI_Intercomm_merge(MPI_Comm intercomm, int high, MPI_Comm *newintracomm) ;
int MPI_Keyval_create(MPI_Copy_function *copy_fn, MPI_Delete_function *delete_fn,
                      int *keyval, void *extra_state) ;
int MPI_Keyval_free(int *keyval) ;
int MPI_Attr_put(MPI_Comm comm, int keyval, void *attribute_val) ;
int MPI_Attr_get(MPI_Comm comm, int keyval, void *attribute_val, int *flag) ;
int MPI_Attr_delete(MPI_Comm comm, int keyval) ;
int MPI_Topo_test(MPI_Comm comm, int *status) ;
int MPI_Cart_create(MPI_Comm comm_old, int ndims, const int dims[], const int periods[],
                    int reorder, MPI_Comm *comm_cart) ;
int MPI_Dims_create(int nnodes, int ndims, int dims[]) ;
int MPI_Graph_create(MPI_Comm comm_old, int nnodes, const int indx[], const int edges[],
                     int reorder, MPI_Comm *comm_graph) ;
int MPI_Graphdims_get(MPI_Comm comm, int *nnodes, int *nedges) ;
int MPI_Graph_get(MPI_Comm comm, int maxindex, int maxedges, int indx[], int edges[]) ;
int MPI_Cartdim_get(MPI_Comm comm, int *ndims) ;
int MPI_Cart_get(MPI_Comm comm, int maxdims, int dims[], int periods[], int coords[]) ;
int MPI_Cart_rank(MPI_Comm comm, const int coords[], int *rank) ;
int MPI_Cart_coords(MPI_Comm comm, int rank, int maxdims, int coords[]) ;
int MPI_Graph_neighbors_count(MPI_Comm comm, int rank, int *nneighbors) ;
int MPI_Graph_neighbors(MPI_Comm comm, int rank, int maxneighbors, int neighbors[]) ;
int MPI_Cart_shift(MPI_Comm comm, int direction, int disp, int *rank_source, int *rank_dest) ;
int MPI_Cart_sub(MPI_Comm comm, const int remain_dims[], MPI_Comm *newcomm) ;
int MPI_Cart_map(MPI_Comm comm, int ndims, const int dims[], const int periods[], int *newrank) ;
int MPI_Graph_map(MPI_Comm comm, int nnodes, const int indx[], const int edges[], int *newrank) ;
int MPI_Get_processor_name(char *name, int *resultlen) ;
int MPI_Get_version(int *version, int *subversion) ;
int MPI_Get_library_version(char *version, int *resultlen) ;
int MPI_Errhandler_create(MPI_Handler_function *function, MPI_Errhandler *errhandler) ;
int MPI_Errhandler_set(MPI_Comm comm, MPI_Errhandler errhandler) ;
int MPI_Errhandler_get(MPI_Comm comm, MPI_Errhandler *errhandler) ;
int MPI_Errhandler_free(MPI_Errhandler *errhandler) ;
int MPI_Error_string(int errorcode, char *string, int *resultlen) ;
int MPI_Error_class(int errorcode, int *errorclass) ;
double MPI_Wtime(void) ;
double MPI_Wtick(void) ;
int MPI_Init(int *argc, char ***argv) ;
int MPI_Finalize(void) ;
int MPI_Initialized(int *flag) ;
int MPI_Abort(MPI_Comm comm, int errorcode) ;


 
int MPI_Pcontrol(const int level, ...) ;
int MPIR_Dup_fn(MPI_Comm oldcomm, int keyval, void *extra_state, void *attribute_val_in,
               void *attribute_val_out, int *flag) ;

 
int MPI_Close_port(const char *port_name) ;
int MPI_Comm_accept(const char *port_name, MPI_Info info, int root, MPI_Comm comm,
                    MPI_Comm *newcomm) ;
int MPI_Comm_connect(const char *port_name, MPI_Info info, int root, MPI_Comm comm,
                     MPI_Comm *newcomm) ;
int MPI_Comm_disconnect(MPI_Comm *comm) ;
int MPI_Comm_get_parent(MPI_Comm *parent) ;
int MPI_Comm_join(int fd, MPI_Comm *intercomm) ;
int MPI_Comm_spawn(const char *command, char *argv[], int maxprocs, MPI_Info info, int root,
                   MPI_Comm comm, MPI_Comm *intercomm, int array_of_errcodes[]) ;
int MPI_Comm_spawn_multiple(int count, char *array_of_commands[], char **array_of_argv[],
                            const int array_of_maxprocs[], const MPI_Info array_of_info[],
                            int root, MPI_Comm comm, MPI_Comm *intercomm, int array_of_errcodes[]) ;
int MPI_Lookup_name(const char *service_name, MPI_Info info, char *port_name) ;
int MPI_Open_port(MPI_Info info, char *port_name) ;
int MPI_Publish_name(const char *service_name, MPI_Info info, const char *port_name) ;
int MPI_Unpublish_name(const char *service_name, MPI_Info info, const char *port_name) ;
int MPI_Comm_set_info(MPI_Comm comm, MPI_Info info) ;
int MPI_Comm_get_info(MPI_Comm comm, MPI_Info *info) ;

 
int MPI_Accumulate(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype,
                   int target_rank, MPI_Aint target_disp, int target_count,
                   MPI_Datatype target_datatype, MPI_Op op, MPI_Win win)
                    ;
int MPI_Get(void *origin_addr, int origin_count, MPI_Datatype origin_datatype,
            int target_rank, MPI_Aint target_disp, int target_count,
            MPI_Datatype target_datatype, MPI_Win win)  ;
int MPI_Put(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype,
            int target_rank, MPI_Aint target_disp, int target_count,
            MPI_Datatype target_datatype, MPI_Win win)  ;
int MPI_Win_complete(MPI_Win win) ;
int MPI_Win_create(void *base, MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm,
                   MPI_Win *win) ;
int MPI_Win_fence(int assert, MPI_Win win) ;
int MPI_Win_free(MPI_Win *win) ;
int MPI_Win_get_group(MPI_Win win, MPI_Group *group) ;
int MPI_Win_lock(int lock_type, int rank, int assert, MPI_Win win) ;
int MPI_Win_post(MPI_Group group, int assert, MPI_Win win) ;
int MPI_Win_start(MPI_Group group, int assert, MPI_Win win) ;
int MPI_Win_test(MPI_Win win, int *flag) ;
int MPI_Win_unlock(int rank, MPI_Win win) ;
int MPI_Win_wait(MPI_Win win) ;

 
int MPI_Win_allocate(MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, void *baseptr,
                     MPI_Win *win) ;
int MPI_Win_allocate_shared(MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm,
                            void *baseptr, MPI_Win *win) ;
int MPI_Win_shared_query(MPI_Win win, int rank, MPI_Aint *size, int *disp_unit, void *baseptr) ;
int MPI_Win_create_dynamic(MPI_Info info, MPI_Comm comm, MPI_Win *win) ;
int MPI_Win_attach(MPI_Win win, void *base, MPI_Aint size) ;
int MPI_Win_detach(MPI_Win win, const void *base) ;
int MPI_Win_get_info(MPI_Win win, MPI_Info *info_used) ;
int MPI_Win_set_info(MPI_Win win, MPI_Info info) ;
int MPI_Get_accumulate(const void *origin_addr, int origin_count,
                        MPI_Datatype origin_datatype, void *result_addr, int result_count,
                        MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp,
                        int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win)
                        
                         ;
int MPI_Fetch_and_op(const void *origin_addr, void *result_addr,
                      MPI_Datatype datatype, int target_rank, MPI_Aint target_disp,
                      MPI_Op op, MPI_Win win)
                       ;
int MPI_Compare_and_swap(const void *origin_addr, const void *compare_addr,
                          void *result_addr, MPI_Datatype datatype, int target_rank,
                          MPI_Aint target_disp, MPI_Win win)
                          
                          
                           ;
int MPI_Rput(const void *origin_addr, int origin_count,
              MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp,
              int target_count, MPI_Datatype target_datatype, MPI_Win win,
              MPI_Request *request)
               ;
int MPI_Rget(void *origin_addr, int origin_count,
              MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp,
              int target_count, MPI_Datatype target_datatype, MPI_Win win,
              MPI_Request *request)
               ;
int MPI_Raccumulate(const void *origin_addr, int origin_count,
                     MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp,
                     int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win,
                     MPI_Request *request)
                      ;
int MPI_Rget_accumulate(const void *origin_addr, int origin_count,
                         MPI_Datatype origin_datatype, void *result_addr, int result_count,
                         MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp,
                         int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win,
                         MPI_Request *request)
                         
                          ;
int MPI_Win_lock_all(int assert, MPI_Win win) ;
int MPI_Win_unlock_all(MPI_Win win) ;
int MPI_Win_flush(int rank, MPI_Win win) ;
int MPI_Win_flush_all(MPI_Win win) ;
int MPI_Win_flush_local(int rank, MPI_Win win) ;
int MPI_Win_flush_local_all(MPI_Win win) ;
int MPI_Win_sync(MPI_Win win) ;
 
 
int MPI_Add_error_class(int *errorclass) ;
int MPI_Add_error_code(int errorclass, int *errorcode) ;
int MPI_Add_error_string(int errorcode, const char *string) ;
int MPI_Comm_call_errhandler(MPI_Comm comm, int errorcode) ;
int MPI_Comm_create_keyval(MPI_Comm_copy_attr_function *comm_copy_attr_fn,
                           MPI_Comm_delete_attr_function *comm_delete_attr_fn, int *comm_keyval,
                           void *extra_state) ;
int MPI_Comm_delete_attr(MPI_Comm comm, int comm_keyval) ;
int MPI_Comm_free_keyval(int *comm_keyval) ;
int MPI_Comm_get_attr(MPI_Comm comm, int comm_keyval, void *attribute_val, int *flag) ;
int MPI_Comm_get_name(MPI_Comm comm, char *comm_name, int *resultlen) ;
int MPI_Comm_set_attr(MPI_Comm comm, int comm_keyval, void *attribute_val) ;
int MPI_Comm_set_name(MPI_Comm comm, const char *comm_name) ;
int MPI_File_call_errhandler(MPI_File fh, int errorcode) ;
int MPI_Grequest_complete(MPI_Request request) ;
int MPI_Grequest_start(MPI_Grequest_query_function *query_fn, MPI_Grequest_free_function *free_fn,
                       MPI_Grequest_cancel_function *cancel_fn, void *extra_state,
                       MPI_Request *request) ;
int MPI_Init_thread(int *argc, char ***argv, int required, int *provided) ;
int MPI_Is_thread_main(int *flag) ;
int MPI_Query_thread(int *provided) ;
int MPI_Status_set_cancelled(MPI_Status *status, int flag) ;
int MPI_Status_set_elements(MPI_Status *status, MPI_Datatype datatype, int count) ;
int MPI_Type_create_keyval(MPI_Type_copy_attr_function *type_copy_attr_fn,
                           MPI_Type_delete_attr_function *type_delete_attr_fn,
                           int *type_keyval, void *extra_state) ;
int MPI_Type_delete_attr(MPI_Datatype datatype, int type_keyval) ;
int MPI_Type_dup(MPI_Datatype oldtype, MPI_Datatype *newtype) ;
int MPI_Type_free_keyval(int *type_keyval) ;
int MPI_Type_get_attr(MPI_Datatype datatype, int type_keyval, void *attribute_val, int *flag) ;
int MPI_Type_get_contents(MPI_Datatype datatype, int max_integers, int max_addresses,
                          int max_datatypes, int array_of_integers[],
                          MPI_Aint array_of_addresses[], MPI_Datatype array_of_datatypes[]) ;
int MPI_Type_get_envelope(MPI_Datatype datatype, int *num_integers, int *num_addresses,
                          int *num_datatypes, int *combiner) ;
int MPI_Type_get_name(MPI_Datatype datatype, char *type_name, int *resultlen) ;
int MPI_Type_set_attr(MPI_Datatype datatype, int type_keyval, void *attribute_val) ;
int MPI_Type_set_name(MPI_Datatype datatype, const char *type_name) ;
int MPI_Type_match_size(int typeclass, int size, MPI_Datatype *datatype) ;
int MPI_Win_call_errhandler(MPI_Win win, int errorcode) ;
int MPI_Win_create_keyval(MPI_Win_copy_attr_function *win_copy_attr_fn,
                          MPI_Win_delete_attr_function *win_delete_attr_fn, int *win_keyval,
                          void *extra_state) ;
int MPI_Win_delete_attr(MPI_Win win, int win_keyval) ;
int MPI_Win_free_keyval(int *win_keyval) ;
int MPI_Win_get_attr(MPI_Win win, int win_keyval, void *attribute_val, int *flag) ;
int MPI_Win_get_name(MPI_Win win, char *win_name, int *resultlen) ;
int MPI_Win_set_attr(MPI_Win win, int win_keyval, void *attribute_val) ;
int MPI_Win_set_name(MPI_Win win, const char *win_name) ;

int MPI_Alloc_mem(MPI_Aint size, MPI_Info info, void *baseptr) ;
int MPI_Comm_create_errhandler(MPI_Comm_errhandler_function *comm_errhandler_fn,
                               MPI_Errhandler *errhandler) ;
int MPI_Comm_get_errhandler(MPI_Comm comm, MPI_Errhandler *errhandler) ;
int MPI_Comm_set_errhandler(MPI_Comm comm, MPI_Errhandler errhandler) ;
int MPI_File_create_errhandler(MPI_File_errhandler_function *file_errhandler_fn,
                               MPI_Errhandler *errhandler) ;
int MPI_File_get_errhandler(MPI_File file, MPI_Errhandler *errhandler) ;
int MPI_File_set_errhandler(MPI_File file, MPI_Errhandler errhandler) ;
int MPI_Finalized(int *flag) ;
int MPI_Free_mem(void *base) ;
int MPI_Get_address(const void *location, MPI_Aint *address) ;
int MPI_Info_create(MPI_Info *info) ;
int MPI_Info_delete(MPI_Info info, const char *key) ;
int MPI_Info_dup(MPI_Info info, MPI_Info *newinfo) ;
int MPI_Info_free(MPI_Info *info) ;
int MPI_Info_get(MPI_Info info, const char *key, int valuelen, char *value, int *flag) ;
int MPI_Info_get_nkeys(MPI_Info info, int *nkeys) ;
int MPI_Info_get_nthkey(MPI_Info info, int n, char *key) ;
int MPI_Info_get_valuelen(MPI_Info info, const char *key, int *valuelen, int *flag) ;
int MPI_Info_set(MPI_Info info, const char *key, const char *value) ;
int MPI_Pack_external(const char datarep[], const void *inbuf, int incount,
                      MPI_Datatype datatype, void *outbuf, MPI_Aint outsize, MPI_Aint *position)
                       ;
int MPI_Pack_external_size(const char datarep[], int incount, MPI_Datatype datatype,
                           MPI_Aint *size) ;
int MPI_Request_get_status(MPI_Request request, int *flag, MPI_Status *status) ;
int MPI_Status_c2f(const MPI_Status *c_status, MPI_Fint *f_status) ;
int MPI_Status_f2c(const MPI_Fint *f_status, MPI_Status *c_status) ;
int MPI_Type_create_darray(int size, int rank, int ndims, const int array_of_gsizes[],
                           const int array_of_distribs[], const int array_of_dargs[],
                           const int array_of_psizes[], int order, MPI_Datatype oldtype,
                           MPI_Datatype *newtype) ;
int MPI_Type_create_hindexed(int count, const int array_of_blocklengths[],
                             const MPI_Aint array_of_displacements[], MPI_Datatype oldtype,
                             MPI_Datatype *newtype) ;
int MPI_Type_create_hvector(int count, int blocklength, MPI_Aint stride, MPI_Datatype oldtype,
                            MPI_Datatype *newtype) ;
int MPI_Type_create_indexed_block(int count, int blocklength, const int array_of_displacements[],
                                  MPI_Datatype oldtype, MPI_Datatype *newtype) ;
int MPI_Type_create_hindexed_block(int count, int blocklength,
                                   const MPI_Aint array_of_displacements[],
                                   MPI_Datatype oldtype, MPI_Datatype *newtype) ;
int MPI_Type_create_resized(MPI_Datatype oldtype, MPI_Aint lb, MPI_Aint extent,
                            MPI_Datatype *newtype) ;
int MPI_Type_create_struct(int count, const int array_of_blocklengths[],
                           const MPI_Aint array_of_displacements[],
                           const MPI_Datatype array_of_types[], MPI_Datatype *newtype) ;
int MPI_Type_create_subarray(int ndims, const int array_of_sizes[],
                             const int array_of_subsizes[], const int array_of_starts[],
                             int order, MPI_Datatype oldtype, MPI_Datatype *newtype) ;
int MPI_Type_get_extent(MPI_Datatype datatype, MPI_Aint *lb, MPI_Aint *extent) ;
int MPI_Type_get_true_extent(MPI_Datatype datatype, MPI_Aint *true_lb, MPI_Aint *true_extent) ;
int MPI_Unpack_external(const char datarep[], const void *inbuf, MPI_Aint insize,
                        MPI_Aint *position, void *outbuf, int outcount, MPI_Datatype datatype)
                         ;
int MPI_Win_create_errhandler(MPI_Win_errhandler_function *win_errhandler_fn,
                              MPI_Errhandler *errhandler) ;
int MPI_Win_get_errhandler(MPI_Win win, MPI_Errhandler *errhandler) ;
int MPI_Win_set_errhandler(MPI_Win win, MPI_Errhandler errhandler) ;



 
int MPI_Type_create_f90_integer(int range, MPI_Datatype *newtype) ;
int MPI_Type_create_f90_real(int precision, int range, MPI_Datatype *newtype) ;
int MPI_Type_create_f90_complex(int precision, int range, MPI_Datatype *newtype) ;

int MPI_Reduce_local(const void *inbuf, void *inoutbuf, int count, MPI_Datatype datatype,
                     MPI_Op op)
                       ;
int MPI_Op_commutative(MPI_Op op, int *commute) ;
int MPI_Reduce_scatter_block(const void *sendbuf, void *recvbuf, int recvcount,
                             MPI_Datatype datatype, MPI_Op op, MPI_Comm comm)
                             
                              ;
int MPI_Dist_graph_create_adjacent(MPI_Comm comm_old, int indegree, const int sources[],
                                   const int sourceweights[], int outdegree,
                                   const int destinations[], const int destweights[],
                                   MPI_Info info, int reorder, MPI_Comm *comm_dist_graph) ;
int MPI_Dist_graph_create(MPI_Comm comm_old, int n, const int sources[], const int degrees[],
                          const int destinations[], const int weights[], MPI_Info info,
                          int reorder, MPI_Comm *comm_dist_graph) ;
int MPI_Dist_graph_neighbors_count(MPI_Comm comm, int *indegree, int *outdegree, int *weighted) ;
int MPI_Dist_graph_neighbors(MPI_Comm comm, int maxindegree, int sources[], int sourceweights[],
                             int maxoutdegree, int destinations[], int destweights[]) ;

 
int MPI_Improbe(int source, int tag, MPI_Comm comm, int *flag, MPI_Message *message,
                MPI_Status *status) ;
int MPI_Imrecv(void *buf, int count, MPI_Datatype datatype, MPI_Message *message,
               MPI_Request *request)  ;
int MPI_Mprobe(int source, int tag, MPI_Comm comm, MPI_Message *message, MPI_Status *status) ;
int MPI_Mrecv(void *buf, int count, MPI_Datatype datatype, MPI_Message *message,
              MPI_Status *status)  ;

 
int MPI_Comm_idup(MPI_Comm comm, MPI_Comm *newcomm, MPI_Request *request) ;
int MPI_Ibarrier(MPI_Comm comm, MPI_Request *request) ;
int MPI_Ibcast(void *buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm,
               MPI_Request *request)  ;
int MPI_Igather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf,
                int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm,
                MPI_Request *request)
                  ;
int MPI_Igatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf,
                 const int recvcounts[], const int displs[], MPI_Datatype recvtype, int root,
                 MPI_Comm comm, MPI_Request *request)
                   ;
int MPI_Iscatter(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf,
                 int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm,
                 MPI_Request *request)
                   ;
int MPI_Iscatterv(const void *sendbuf, const int sendcounts[], const int displs[],
                  MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype,
                  int root, MPI_Comm comm, MPI_Request *request)
                    ;
int MPI_Iallgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf,
                   int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request)
                     ;
int MPI_Iallgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf,
                    const int recvcounts[], const int displs[], MPI_Datatype recvtype,
                    MPI_Comm comm, MPI_Request *request)
                      ;
int MPI_Ialltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf,
                  int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request)
                    ;
int MPI_Ialltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[],
                   MPI_Datatype sendtype, void *recvbuf, const int recvcounts[],
                   const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm,
                   MPI_Request *request)
                     ;
int MPI_Ialltoallw(const void *sendbuf, const int sendcounts[], const int sdispls[],
                   const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[],
                   const int rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm,
                   MPI_Request *request) ;
int MPI_Ireduce(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype,
                MPI_Op op, int root, MPI_Comm comm, MPI_Request *request)
                  ;
int MPI_Iallreduce(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype,
                   MPI_Op op, MPI_Comm comm, MPI_Request *request)
                     ;
int MPI_Ireduce_scatter(const void *sendbuf, void *recvbuf, const int recvcounts[],
                        MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request)
                          ;
int MPI_Ireduce_scatter_block(const void *sendbuf, void *recvbuf, int recvcount,
                              MPI_Datatype datatype, MPI_Op op, MPI_Comm comm,
                              MPI_Request *request)
                              
                               ;
int MPI_Iscan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op,
              MPI_Comm comm, MPI_Request *request)
                ;
int MPI_Iexscan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype,
                MPI_Op op, MPI_Comm comm, MPI_Request *request)
                  ;

 
int MPI_Ineighbor_allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
                            void *recvbuf, int recvcount, MPI_Datatype recvtype,
                            MPI_Comm comm, MPI_Request *request)
                            
                             ;
int MPI_Ineighbor_allgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
                             void *recvbuf, const int recvcounts[], const int displs[],
                             MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request)
                             
                              ;
int MPI_Ineighbor_alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
                           void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm,
                           MPI_Request *request)
                           
                            ;
int MPI_Ineighbor_alltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[],
                            MPI_Datatype sendtype, void *recvbuf, const int recvcounts[],
                            const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm,
                            MPI_Request *request)
                            
                             ;
int MPI_Ineighbor_alltoallw(const void *sendbuf, const int sendcounts[],
                            const MPI_Aint sdispls[], const MPI_Datatype sendtypes[],
                            void *recvbuf, const int recvcounts[], const MPI_Aint rdispls[],
                            const MPI_Datatype recvtypes[], MPI_Comm comm, MPI_Request *request) ;
int MPI_Neighbor_allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
                           void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm)
                           
                            ;
int MPI_Neighbor_allgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
                            void *recvbuf, const int recvcounts[], const int displs[],
                            MPI_Datatype recvtype, MPI_Comm comm)
                            
                             ;
int MPI_Neighbor_alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
                          void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm)
                          
                           ;
int MPI_Neighbor_alltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[],
                           MPI_Datatype sendtype, void *recvbuf, const int recvcounts[],
                           const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm)
                           
                            ;
int MPI_Neighbor_alltoallw(const void *sendbuf, const int sendcounts[], const MPI_Aint sdispls[],
                           const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[],
                           const MPI_Aint rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm) ;

 
int MPI_Comm_split_type(MPI_Comm comm, int split_type, int key, MPI_Info info, MPI_Comm *newcomm) ;

 
int MPI_Get_elements_x(const MPI_Status *status, MPI_Datatype datatype, MPI_Count *count) ;
int MPI_Status_set_elements_x(MPI_Status *status, MPI_Datatype datatype, MPI_Count count) ;
int MPI_Type_get_extent_x(MPI_Datatype datatype, MPI_Count *lb, MPI_Count *extent) ;
int MPI_Type_get_true_extent_x(MPI_Datatype datatype, MPI_Count *lb, MPI_Count *extent) ;
int MPI_Type_size_x(MPI_Datatype datatype, MPI_Count *size) ;

 
int MPI_Comm_create_group(MPI_Comm comm, MPI_Group group, int tag, MPI_Comm *newcomm) ;

 
MPI_Aint MPI_Aint_add(MPI_Aint base, MPI_Aint disp) ;
MPI_Aint MPI_Aint_diff(MPI_Aint addr1, MPI_Aint addr2) ;

 

 
 
int MPI_T_init_thread(int required, int *provided) ;
int MPI_T_finalize(void) ;
int MPI_T_enum_get_info(MPI_T_enum enumtype, int *num, char *name, int *name_len) ;
int MPI_T_enum_get_item(MPI_T_enum enumtype, int indx, int *value, char *name, int *name_len) ;
int MPI_T_cvar_get_num(int *num_cvar) ;
int MPI_T_cvar_get_info(int cvar_index, char *name, int *name_len, int *verbosity,
                        MPI_Datatype *datatype, MPI_T_enum *enumtype, char *desc, int *desc_len,
                        int *binding, int *scope) ;
int MPI_T_cvar_handle_alloc(int cvar_index, void *obj_handle, MPI_T_cvar_handle *handle,
                            int *count) ;
int MPI_T_cvar_handle_free(MPI_T_cvar_handle *handle) ;
int MPI_T_cvar_read(MPI_T_cvar_handle handle, void *buf) ;
int MPI_T_cvar_write(MPI_T_cvar_handle handle, const void *buf) ;
int MPI_T_pvar_get_num(int *num_pvar) ;
int MPI_T_pvar_get_info(int pvar_index, char *name, int *name_len, int *verbosity, int *var_class,
                        MPI_Datatype *datatype, MPI_T_enum *enumtype, char *desc, int *desc_len,
                        int *binding, int *readonly, int *continuous, int *atomic) ;
int MPI_T_pvar_session_create(MPI_T_pvar_session *session) ;
int MPI_T_pvar_session_free(MPI_T_pvar_session *session) ;
int MPI_T_pvar_handle_alloc(MPI_T_pvar_session session, int pvar_index, void *obj_handle,
                            MPI_T_pvar_handle *handle, int *count) ;
int MPI_T_pvar_handle_free(MPI_T_pvar_session session, MPI_T_pvar_handle *handle) ;
int MPI_T_pvar_start(MPI_T_pvar_session session, MPI_T_pvar_handle handle) ;
int MPI_T_pvar_stop(MPI_T_pvar_session session, MPI_T_pvar_handle handle) ;
int MPI_T_pvar_read(MPI_T_pvar_session session, MPI_T_pvar_handle handle, void *buf) ;
int MPI_T_pvar_write(MPI_T_pvar_session session, MPI_T_pvar_handle handle, const void *buf) ;
int MPI_T_pvar_reset(MPI_T_pvar_session session, MPI_T_pvar_handle handle) ;
int MPI_T_pvar_readreset(MPI_T_pvar_session session, MPI_T_pvar_handle handle, void *buf) ;
int MPI_T_category_get_num(int *num_cat) ;
int MPI_T_category_get_info(int cat_index, char *name, int *name_len, char *desc, int *desc_len,
                            int *num_cvars, int *num_pvars, int *num_categories) ;
int MPI_T_category_get_cvars(int cat_index, int len, int indices[]) ;
int MPI_T_category_get_pvars(int cat_index, int len, int indices[]) ;
int MPI_T_category_get_categories(int cat_index, int len, int indices[]) ;
int MPI_T_category_changed(int *stamp) ;
int MPI_T_cvar_get_index(const char *name, int *cvar_index) ;
int MPI_T_pvar_get_index(const char *name, int var_class, int *pvar_index) ;
int MPI_T_category_get_index(const char *name, int *cat_index) ;
 


 
 
int MPIX_Comm_failure_ack(MPI_Comm comm) ;
int MPIX_Comm_failure_get_acked(MPI_Comm comm, MPI_Group *failedgrp) ;
int MPIX_Comm_revoke(MPI_Comm comm) ;
int MPIX_Comm_shrink(MPI_Comm comm, MPI_Comm *newcomm) ;
int MPIX_Comm_agree(MPI_Comm comm, int *flag) ;


 



 

int PMPI_Send(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
              MPI_Comm comm)  ;
int PMPI_Recv(void *buf, int count, MPI_Datatype datatype, int source, int tag,
              MPI_Comm comm, MPI_Status *status)  ;
int PMPI_Get_count(const MPI_Status *status, MPI_Datatype datatype, int *count) ;
int PMPI_Bsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
               MPI_Comm comm)  ;
int PMPI_Ssend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
               MPI_Comm comm)  ;
int PMPI_Rsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
               MPI_Comm comm)  ;
int PMPI_Buffer_attach(void *buffer, int size) ;
int PMPI_Buffer_detach(void *buffer_addr, int *size) ;
int PMPI_Isend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
               MPI_Comm comm, MPI_Request *request)  ;
int PMPI_Ibsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
                MPI_Comm comm, MPI_Request *request)  ;
int PMPI_Issend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
                MPI_Comm comm, MPI_Request *request)  ;
int PMPI_Irsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
                MPI_Comm comm, MPI_Request *request)  ;
int PMPI_Irecv(void *buf, int count, MPI_Datatype datatype, int source, int tag,
               MPI_Comm comm, MPI_Request *request)  ;
int PMPI_Wait(MPI_Request *request, MPI_Status *status) ;
int PMPI_Test(MPI_Request *request, int *flag, MPI_Status *status) ;
int PMPI_Request_free(MPI_Request *request) ;
int PMPI_Waitany(int count, MPI_Request array_of_requests[], int *indx, MPI_Status *status) ;
int PMPI_Testany(int count, MPI_Request array_of_requests[], int *indx, int *flag,
                 MPI_Status *status) ;
int PMPI_Waitall(int count, MPI_Request array_of_requests[], MPI_Status array_of_statuses[]) ;
int PMPI_Testall(int count, MPI_Request array_of_requests[], int *flag,
                 MPI_Status array_of_statuses[]) ;
int PMPI_Waitsome(int incount, MPI_Request array_of_requests[], int *outcount,
                  int array_of_indices[], MPI_Status array_of_statuses[]) ;
int PMPI_Testsome(int incount, MPI_Request array_of_requests[], int *outcount,
                  int array_of_indices[], MPI_Status array_of_statuses[]) ;
int PMPI_Iprobe(int source, int tag, MPI_Comm comm, int *flag, MPI_Status *status) ;
int PMPI_Probe(int source, int tag, MPI_Comm comm, MPI_Status *status) ;
int PMPI_Cancel(MPI_Request *request) ;
int PMPI_Test_cancelled(const MPI_Status *status, int *flag) ;
int PMPI_Send_init(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
                   MPI_Comm comm, MPI_Request *request)  ;
int PMPI_Bsend_init(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
                    MPI_Comm comm, MPI_Request *request)  ;
int PMPI_Ssend_init(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
                    MPI_Comm comm, MPI_Request *request)  ;
int PMPI_Rsend_init(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
                    MPI_Comm comm, MPI_Request *request)  ;
int PMPI_Recv_init(void *buf, int count, MPI_Datatype datatype, int source, int tag,
                   MPI_Comm comm, MPI_Request *request)  ;
int PMPI_Start(MPI_Request *request) ;
int PMPI_Startall(int count, MPI_Request array_of_requests[]) ;
int PMPI_Sendrecv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, int dest,
                  int sendtag, void *recvbuf, int recvcount, MPI_Datatype recvtype,
                  int source, int recvtag, MPI_Comm comm, MPI_Status *status)
                  
                   ;
int PMPI_Sendrecv_replace(void *buf, int count, MPI_Datatype datatype, int dest,
                          int sendtag, int source, int recvtag, MPI_Comm comm,
                          MPI_Status *status)  ;
int PMPI_Type_contiguous(int count, MPI_Datatype oldtype, MPI_Datatype *newtype) ;
int PMPI_Type_vector(int count, int blocklength, int stride, MPI_Datatype oldtype,
                     MPI_Datatype *newtype) ;
int PMPI_Type_hvector(int count, int blocklength, MPI_Aint stride, MPI_Datatype oldtype,
                      MPI_Datatype *newtype) ;
int PMPI_Type_indexed(int count, const int *array_of_blocklengths,
                      const int *array_of_displacements, MPI_Datatype oldtype,
                      MPI_Datatype *newtype) ;
int PMPI_Type_hindexed(int count, int *array_of_blocklengths,
                       MPI_Aint *array_of_displacements, MPI_Datatype oldtype,
                       MPI_Datatype *newtype) ;
int PMPI_Type_struct(int count, int *array_of_blocklengths,
                     MPI_Aint *array_of_displacements,
                     MPI_Datatype *array_of_types, MPI_Datatype *newtype) ;
int PMPI_Address(void *location, MPI_Aint *address) ;
int PMPI_Type_extent(MPI_Datatype datatype, MPI_Aint *extent) ;
int PMPI_Type_size(MPI_Datatype datatype, int *size) ;
int PMPI_Type_lb(MPI_Datatype datatype, MPI_Aint *displacement) ;
int PMPI_Type_ub(MPI_Datatype datatype, MPI_Aint *displacement) ;
int PMPI_Type_commit(MPI_Datatype *datatype) ;
int PMPI_Type_free(MPI_Datatype *datatype) ;
int PMPI_Get_elements(const MPI_Status *status, MPI_Datatype datatype, int *count) ;
int PMPI_Pack(const void *inbuf, int incount, MPI_Datatype datatype, void *outbuf,
              int outsize, int *position, MPI_Comm comm)  ;
int PMPI_Unpack(const void *inbuf, int insize, int *position, void *outbuf, int outcount,
                MPI_Datatype datatype, MPI_Comm comm)  ;
int PMPI_Pack_size(int incount, MPI_Datatype datatype, MPI_Comm comm, int *size) ;
int PMPI_Barrier(MPI_Comm comm) ;
int PMPI_Bcast(void *buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm)
                ;
int PMPI_Gather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf,
                int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm)
                  ;
int PMPI_Gatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf,
                 const int *recvcounts, const int *displs, MPI_Datatype recvtype, int root,
                 MPI_Comm comm)
                   ;
int PMPI_Scatter(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf,
                 int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm)
                   ;
int PMPI_Scatterv(const void *sendbuf, const int *sendcounts, const int *displs,
                  MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype,
                  int root, MPI_Comm comm)
                    ;
int PMPI_Allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf,
                   int recvcount, MPI_Datatype recvtype, MPI_Comm comm)
                     ;
int PMPI_Allgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf,
                    const int *recvcounts, const int *displs, MPI_Datatype recvtype, MPI_Comm comm)
                      ;
int PMPI_Alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf,
                  int recvcount, MPI_Datatype recvtype, MPI_Comm comm)
                    ;
int PMPI_Alltoallv(const void *sendbuf, const int *sendcounts, const int *sdispls,
                   MPI_Datatype sendtype, void *recvbuf, const int *recvcounts,
                   const int *rdispls, MPI_Datatype recvtype, MPI_Comm comm)
                     ;
int PMPI_Alltoallw(const void *sendbuf, const int sendcounts[], const int sdispls[],
                   const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[],
                   const int rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm) ;
int PMPI_Exscan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype,
                MPI_Op op, MPI_Comm comm)
                  ;
int PMPI_Reduce(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype,
                MPI_Op op, int root, MPI_Comm comm)
                  ;
int PMPI_Op_create(MPI_User_function *user_fn, int commute, MPI_Op *op) ;
int PMPI_Op_free(MPI_Op *op) ;
int PMPI_Allreduce(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype,
                   MPI_Op op, MPI_Comm comm)
                     ;
int PMPI_Reduce_scatter(const void *sendbuf, void *recvbuf, const int recvcounts[],
                        MPI_Datatype datatype, MPI_Op op, MPI_Comm comm)
                          ;
int PMPI_Scan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op,
              MPI_Comm comm)
                ;
int PMPI_Group_size(MPI_Group group, int *size) ;
int PMPI_Group_rank(MPI_Group group, int *rank) ;
int PMPI_Group_translate_ranks(MPI_Group group1, int n, const int ranks1[], MPI_Group group2,
                               int ranks2[]) ;
int PMPI_Group_compare(MPI_Group group1, MPI_Group group2, int *result) ;
int PMPI_Comm_group(MPI_Comm comm, MPI_Group *group) ;
int PMPI_Group_union(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup) ;
int PMPI_Group_intersection(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup) ;
int PMPI_Group_difference(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup) ;
int PMPI_Group_incl(MPI_Group group, int n, const int ranks[], MPI_Group *newgroup) ;
int PMPI_Group_excl(MPI_Group group, int n, const int ranks[], MPI_Group *newgroup) ;
int PMPI_Group_range_incl(MPI_Group group, int n, int ranges[][3], MPI_Group *newgroup) ;
int PMPI_Group_range_excl(MPI_Group group, int n, int ranges[][3], MPI_Group *newgroup) ;
int PMPI_Group_free(MPI_Group *group) ;
int PMPI_Comm_size(MPI_Comm comm, int *size) ;
int PMPI_Comm_rank(MPI_Comm comm, int *rank) ;
int PMPI_Comm_compare(MPI_Comm comm1, MPI_Comm comm2, int *result) ;
int PMPI_Comm_dup(MPI_Comm comm, MPI_Comm *newcomm) ;
int PMPI_Comm_dup_with_info(MPI_Comm comm, MPI_Info info, MPI_Comm *newcomm) ;
int PMPI_Comm_create(MPI_Comm comm, MPI_Group group, MPI_Comm *newcomm) ;
int PMPI_Comm_split(MPI_Comm comm, int color, int key, MPI_Comm *newcomm) ;
int PMPI_Comm_free(MPI_Comm *comm) ;
int PMPI_Comm_test_inter(MPI_Comm comm, int *flag) ;
int PMPI_Comm_remote_size(MPI_Comm comm, int *size) ;
int PMPI_Comm_remote_group(MPI_Comm comm, MPI_Group *group) ;
int PMPI_Intercomm_create(MPI_Comm local_comm, int local_leader, MPI_Comm peer_comm,
                          int remote_leader, int tag, MPI_Comm *newintercomm) ;
int PMPI_Intercomm_merge(MPI_Comm intercomm, int high, MPI_Comm *newintracomm) ;
int PMPI_Keyval_create(MPI_Copy_function *copy_fn, MPI_Delete_function *delete_fn,
                       int *keyval, void *extra_state) ;
int PMPI_Keyval_free(int *keyval) ;
int PMPI_Attr_put(MPI_Comm comm, int keyval, void *attribute_val) ;
int PMPI_Attr_get(MPI_Comm comm, int keyval, void *attribute_val, int *flag) ;
int PMPI_Attr_delete(MPI_Comm comm, int keyval) ;
int PMPI_Topo_test(MPI_Comm comm, int *status) ;
int PMPI_Cart_create(MPI_Comm comm_old, int ndims, const int dims[], const int periods[],
                     int reorder, MPI_Comm *comm_cart) ;
int PMPI_Dims_create(int nnodes, int ndims, int dims[]) ;
int PMPI_Graph_create(MPI_Comm comm_old, int nnodes, const int indx[], const int edges[],
                      int reorder, MPI_Comm *comm_graph) ;
int PMPI_Graphdims_get(MPI_Comm comm, int *nnodes, int *nedges) ;
int PMPI_Graph_get(MPI_Comm comm, int maxindex, int maxedges, int indx[], int edges[]) ;
int PMPI_Cartdim_get(MPI_Comm comm, int *ndims) ;
int PMPI_Cart_get(MPI_Comm comm, int maxdims, int dims[], int periods[], int coords[]) ;
int PMPI_Cart_rank(MPI_Comm comm, const int coords[], int *rank) ;
int PMPI_Cart_coords(MPI_Comm comm, int rank, int maxdims, int coords[]) ;
int PMPI_Graph_neighbors_count(MPI_Comm comm, int rank, int *nneighbors) ;
int PMPI_Graph_neighbors(MPI_Comm comm, int rank, int maxneighbors, int neighbors[]) ;
int PMPI_Cart_shift(MPI_Comm comm, int direction, int disp, int *rank_source, int *rank_dest) ;
int PMPI_Cart_sub(MPI_Comm comm, const int remain_dims[], MPI_Comm *newcomm) ;
int PMPI_Cart_map(MPI_Comm comm, int ndims, const int dims[], const int periods[], int *newrank) ;
int PMPI_Graph_map(MPI_Comm comm, int nnodes, const int indx[], const int edges[], int *newrank) ;
int PMPI_Get_processor_name(char *name, int *resultlen) ;
int PMPI_Get_version(int *version, int *subversion) ;
int PMPI_Get_library_version(char *version, int *resultlen) ;
int PMPI_Errhandler_create(MPI_Handler_function *function, MPI_Errhandler *errhandler) ;
int PMPI_Errhandler_set(MPI_Comm comm, MPI_Errhandler errhandler) ;
int PMPI_Errhandler_get(MPI_Comm comm, MPI_Errhandler *errhandler) ;
int PMPI_Errhandler_free(MPI_Errhandler *errhandler) ;
int PMPI_Error_string(int errorcode, char *string, int *resultlen) ;
int PMPI_Error_class(int errorcode, int *errorclass) ;
double PMPI_Wtime(void) ;
double PMPI_Wtick(void) ;
int PMPI_Init(int *argc, char ***argv) ;
int PMPI_Finalize(void) ;
int PMPI_Initialized(int *flag) ;
int PMPI_Abort(MPI_Comm comm, int errorcode) ;


 
int PMPI_Pcontrol(const int level, ...) ;

 
int PMPI_Close_port(const char *port_name) ;
int PMPI_Comm_accept(const char *port_name, MPI_Info info, int root, MPI_Comm comm,
                     MPI_Comm *newcomm) ;
int PMPI_Comm_connect(const char *port_name, MPI_Info info, int root, MPI_Comm comm,
                      MPI_Comm *newcomm) ;
int PMPI_Comm_disconnect(MPI_Comm *comm) ;
int PMPI_Comm_get_parent(MPI_Comm *parent) ;
int PMPI_Comm_join(int fd, MPI_Comm *intercomm) ;
int PMPI_Comm_spawn(const char *command, char *argv[], int maxprocs, MPI_Info info, int root,
                    MPI_Comm comm, MPI_Comm *intercomm, int array_of_errcodes[]) ;
int PMPI_Comm_spawn_multiple(int count, char *array_of_commands[], char **array_of_argv[],
                             const int array_of_maxprocs[], const MPI_Info array_of_info[],
                             int root, MPI_Comm comm, MPI_Comm *intercomm, int array_of_errcodes[]) ;
int PMPI_Lookup_name(const char *service_name, MPI_Info info, char *port_name) ;
int PMPI_Open_port(MPI_Info info, char *port_name) ;
int PMPI_Publish_name(const char *service_name, MPI_Info info, const char *port_name) ;
int PMPI_Unpublish_name(const char *service_name, MPI_Info info, const char *port_name) ;
int PMPI_Comm_set_info(MPI_Comm comm, MPI_Info info) ;
int PMPI_Comm_get_info(MPI_Comm comm, MPI_Info *info) ;

 
int PMPI_Accumulate(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype,
                    int target_rank, MPI_Aint target_disp, int target_count,
                    MPI_Datatype target_datatype, MPI_Op op, MPI_Win win)
                     ;
int PMPI_Get(void *origin_addr, int origin_count, MPI_Datatype origin_datatype,
             int target_rank, MPI_Aint target_disp, int target_count,
             MPI_Datatype target_datatype, MPI_Win win)  ;
int PMPI_Put(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype,
             int target_rank, MPI_Aint target_disp, int target_count,
             MPI_Datatype target_datatype, MPI_Win win)  ;
int PMPI_Win_complete(MPI_Win win) ;
int PMPI_Win_create(void *base, MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm,
                    MPI_Win *win) ;
int PMPI_Win_fence(int assert, MPI_Win win) ;
int PMPI_Win_free(MPI_Win *win) ;
int PMPI_Win_get_group(MPI_Win win, MPI_Group *group) ;
int PMPI_Win_lock(int lock_type, int rank, int assert, MPI_Win win) ;
int PMPI_Win_post(MPI_Group group, int assert, MPI_Win win) ;
int PMPI_Win_start(MPI_Group group, int assert, MPI_Win win) ;
int PMPI_Win_test(MPI_Win win, int *flag) ;
int PMPI_Win_unlock(int rank, MPI_Win win) ;
int PMPI_Win_wait(MPI_Win win) ;

 
int PMPI_Win_allocate(MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, void *baseptr,
                      MPI_Win *win) ;
int PMPI_Win_allocate_shared(MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm,
                             void *baseptr, MPI_Win *win) ;
int PMPI_Win_shared_query(MPI_Win win, int rank, MPI_Aint *size, int *disp_unit, void *baseptr) ;
int PMPI_Win_create_dynamic(MPI_Info info, MPI_Comm comm, MPI_Win *win) ;
int PMPI_Win_attach(MPI_Win win, void *base, MPI_Aint size) ;
int PMPI_Win_detach(MPI_Win win, const void *base) ;
int PMPI_Win_get_info(MPI_Win win, MPI_Info *info_used) ;
int PMPI_Win_set_info(MPI_Win win, MPI_Info info) ;
int PMPI_Get_accumulate(const void *origin_addr, int origin_count,
                         MPI_Datatype origin_datatype, void *result_addr, int result_count,
                         MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp,
                         int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win)
                         
                          ;
int PMPI_Fetch_and_op(const void *origin_addr, void *result_addr,
                       MPI_Datatype datatype, int target_rank, MPI_Aint target_disp,
                       MPI_Op op, MPI_Win win)
                        ;
int PMPI_Compare_and_swap(const void *origin_addr, const void *compare_addr,
                           void *result_addr, MPI_Datatype datatype, int target_rank,
                           MPI_Aint target_disp, MPI_Win win)
                           
                           
                            ;
int PMPI_Rput(const void *origin_addr, int origin_count,
               MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp,
               int target_count, MPI_Datatype target_datatype, MPI_Win win,
               MPI_Request *request)
                ;
int PMPI_Rget(void *origin_addr, int origin_count,
               MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp,
               int target_count, MPI_Datatype target_datatype, MPI_Win win,
               MPI_Request *request)
                ;
int PMPI_Raccumulate(const void *origin_addr, int origin_count,
                      MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp,
                      int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win,
                      MPI_Request *request)
                       ;
int PMPI_Rget_accumulate(const void *origin_addr, int origin_count,
                          MPI_Datatype origin_datatype, void *result_addr, int result_count,
                          MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp,
                          int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win,
                          MPI_Request *request)
                          
                           ;
int PMPI_Win_lock_all(int assert, MPI_Win win) ;
int PMPI_Win_unlock_all(MPI_Win win) ;
int PMPI_Win_flush(int rank, MPI_Win win) ;
int PMPI_Win_flush_all(MPI_Win win) ;
int PMPI_Win_flush_local(int rank, MPI_Win win) ;
int PMPI_Win_flush_local_all(MPI_Win win) ;
int PMPI_Win_sync(MPI_Win win) ;
 
 
int PMPI_Add_error_class(int *errorclass) ;
int PMPI_Add_error_code(int errorclass, int *errorcode) ;
int PMPI_Add_error_string(int errorcode, const char *string) ;
int PMPI_Comm_call_errhandler(MPI_Comm comm, int errorcode) ;
int PMPI_Comm_create_keyval(MPI_Comm_copy_attr_function *comm_copy_attr_fn,
                            MPI_Comm_delete_attr_function *comm_delete_attr_fn, int *comm_keyval,
                            void *extra_state) ;
int PMPI_Comm_delete_attr(MPI_Comm comm, int comm_keyval) ;
int PMPI_Comm_free_keyval(int *comm_keyval) ;
int PMPI_Comm_get_attr(MPI_Comm comm, int comm_keyval, void *attribute_val, int *flag) ;
int PMPI_Comm_get_name(MPI_Comm comm, char *comm_name, int *resultlen) ;
int PMPI_Comm_set_attr(MPI_Comm comm, int comm_keyval, void *attribute_val) ;
int PMPI_Comm_set_name(MPI_Comm comm, const char *comm_name) ;
int PMPI_File_call_errhandler(MPI_File fh, int errorcode) ;
int PMPI_Grequest_complete(MPI_Request request) ;
int PMPI_Grequest_start(MPI_Grequest_query_function *query_fn, MPI_Grequest_free_function *free_fn,
                        MPI_Grequest_cancel_function *cancel_fn, void *extra_state,
                        MPI_Request *request) ;
int PMPI_Init_thread(int *argc, char ***argv, int required, int *provided) ;
int PMPI_Is_thread_main(int *flag) ;
int PMPI_Query_thread(int *provided) ;
int PMPI_Status_set_cancelled(MPI_Status *status, int flag) ;
int PMPI_Status_set_elements(MPI_Status *status, MPI_Datatype datatype, int count) ;
int PMPI_Type_create_keyval(MPI_Type_copy_attr_function *type_copy_attr_fn,
                            MPI_Type_delete_attr_function *type_delete_attr_fn,
                            int *type_keyval, void *extra_state) ;
int PMPI_Type_delete_attr(MPI_Datatype datatype, int type_keyval) ;
int PMPI_Type_dup(MPI_Datatype oldtype, MPI_Datatype *newtype) ;
int PMPI_Type_free_keyval(int *type_keyval) ;
int PMPI_Type_get_attr(MPI_Datatype datatype, int type_keyval, void *attribute_val, int *flag) ;
int PMPI_Type_get_contents(MPI_Datatype datatype, int max_integers, int max_addresses,
                           int max_datatypes, int array_of_integers[],
                           MPI_Aint array_of_addresses[], MPI_Datatype array_of_datatypes[]) ;
int PMPI_Type_get_envelope(MPI_Datatype datatype, int *num_integers, int *num_addresses,
                           int *num_datatypes, int *combiner) ;
int PMPI_Type_get_name(MPI_Datatype datatype, char *type_name, int *resultlen) ;
int PMPI_Type_set_attr(MPI_Datatype datatype, int type_keyval, void *attribute_val) ;
int PMPI_Type_set_name(MPI_Datatype datatype, const char *type_name) ;
int PMPI_Type_match_size(int typeclass, int size, MPI_Datatype *datatype) ;
int PMPI_Win_call_errhandler(MPI_Win win, int errorcode) ;
int PMPI_Win_create_keyval(MPI_Win_copy_attr_function *win_copy_attr_fn,
                           MPI_Win_delete_attr_function *win_delete_attr_fn, int *win_keyval,
                           void *extra_state) ;
int PMPI_Win_delete_attr(MPI_Win win, int win_keyval) ;
int PMPI_Win_free_keyval(int *win_keyval) ;
int PMPI_Win_get_attr(MPI_Win win, int win_keyval, void *attribute_val, int *flag) ;
int PMPI_Win_get_name(MPI_Win win, char *win_name, int *resultlen) ;
int PMPI_Win_set_attr(MPI_Win win, int win_keyval, void *attribute_val) ;
int PMPI_Win_set_name(MPI_Win win, const char *win_name) ;

int PMPI_Alloc_mem(MPI_Aint size, MPI_Info info, void *baseptr) ;
int PMPI_Comm_create_errhandler(MPI_Comm_errhandler_function *comm_errhandler_fn,
                                MPI_Errhandler *errhandler) ;
int PMPI_Comm_get_errhandler(MPI_Comm comm, MPI_Errhandler *errhandler) ;
int PMPI_Comm_set_errhandler(MPI_Comm comm, MPI_Errhandler errhandler) ;
int PMPI_File_create_errhandler(MPI_File_errhandler_function *file_errhandler_fn,
                                MPI_Errhandler *errhandler) ;
int PMPI_File_get_errhandler(MPI_File file, MPI_Errhandler *errhandler) ;
int PMPI_File_set_errhandler(MPI_File file, MPI_Errhandler errhandler) ;
int PMPI_Finalized(int *flag) ;
int PMPI_Free_mem(void *base) ;
int PMPI_Get_address(const void *location, MPI_Aint *address) ;
int PMPI_Info_create(MPI_Info *info) ;
int PMPI_Info_delete(MPI_Info info, const char *key) ;
int PMPI_Info_dup(MPI_Info info, MPI_Info *newinfo) ;
int PMPI_Info_free(MPI_Info *info) ;
int PMPI_Info_get(MPI_Info info, const char *key, int valuelen, char *value, int *flag) ;
int PMPI_Info_get_nkeys(MPI_Info info, int *nkeys) ;
int PMPI_Info_get_nthkey(MPI_Info info, int n, char *key) ;
int PMPI_Info_get_valuelen(MPI_Info info, const char *key, int *valuelen, int *flag) ;
int PMPI_Info_set(MPI_Info info, const char *key, const char *value) ;
int PMPI_Pack_external(const char datarep[], const void *inbuf, int incount,
                       MPI_Datatype datatype, void *outbuf, MPI_Aint outsize, MPI_Aint *position)
                        ;
int PMPI_Pack_external_size(const char datarep[], int incount, MPI_Datatype datatype,
                            MPI_Aint *size) ;
int PMPI_Request_get_status(MPI_Request request, int *flag, MPI_Status *status) ;
int PMPI_Status_c2f(const MPI_Status *c_status, MPI_Fint *f_status) ;
int PMPI_Status_f2c(const MPI_Fint *f_status, MPI_Status *c_status) ;
int PMPI_Type_create_darray(int size, int rank, int ndims, const int array_of_gsizes[],
                            const int array_of_distribs[], const int array_of_dargs[],
                            const int array_of_psizes[], int order, MPI_Datatype oldtype,
                            MPI_Datatype *newtype) ;
int PMPI_Type_create_hindexed(int count, const int array_of_blocklengths[],
                              const MPI_Aint array_of_displacements[], MPI_Datatype oldtype,
                              MPI_Datatype *newtype) ;
int PMPI_Type_create_hvector(int count, int blocklength, MPI_Aint stride, MPI_Datatype oldtype,
                             MPI_Datatype *newtype) ;
int PMPI_Type_create_indexed_block(int count, int blocklength, const int array_of_displacements[],
                                   MPI_Datatype oldtype, MPI_Datatype *newtype) ;
int PMPI_Type_create_hindexed_block(int count, int blocklength,
                                    const MPI_Aint array_of_displacements[],
                                    MPI_Datatype oldtype, MPI_Datatype *newtype) ;
int PMPI_Type_create_resized(MPI_Datatype oldtype, MPI_Aint lb, MPI_Aint extent,
                             MPI_Datatype *newtype) ;
int PMPI_Type_create_struct(int count, const int array_of_blocklengths[],
                            const MPI_Aint array_of_displacements[],
                            const MPI_Datatype array_of_types[], MPI_Datatype *newtype) ;
int PMPI_Type_create_subarray(int ndims, const int array_of_sizes[],
                              const int array_of_subsizes[], const int array_of_starts[],
                              int order, MPI_Datatype oldtype, MPI_Datatype *newtype) ;
int PMPI_Type_get_extent(MPI_Datatype datatype, MPI_Aint *lb, MPI_Aint *extent) ;
int PMPI_Type_get_true_extent(MPI_Datatype datatype, MPI_Aint *true_lb, MPI_Aint *true_extent) ;
int PMPI_Unpack_external(const char datarep[], const void *inbuf, MPI_Aint insize,
                         MPI_Aint *position, void *outbuf, int outcount, MPI_Datatype datatype)
                          ;
int PMPI_Win_create_errhandler(MPI_Win_errhandler_function *win_errhandler_fn,
                               MPI_Errhandler *errhandler) ;
int PMPI_Win_get_errhandler(MPI_Win win, MPI_Errhandler *errhandler) ;
int PMPI_Win_set_errhandler(MPI_Win win, MPI_Errhandler errhandler) ;



 
int PMPI_Type_create_f90_integer(int r, MPI_Datatype *newtype) ;
int PMPI_Type_create_f90_real(int p, int r, MPI_Datatype *newtype) ;
int PMPI_Type_create_f90_complex(int p, int r, MPI_Datatype *newtype) ;

int PMPI_Reduce_local(const void *inbuf, void *inoutbuf, int count, MPI_Datatype datatype,
                      MPI_Op op)
                        ;
int PMPI_Op_commutative(MPI_Op op, int *commute) ;
int PMPI_Reduce_scatter_block(const void *sendbuf, void *recvbuf, int recvcount,
                              MPI_Datatype datatype, MPI_Op op, MPI_Comm comm)
                              
                               ;
int PMPI_Dist_graph_create_adjacent(MPI_Comm comm_old, int indegree, const int sources[],
                                    const int sourceweights[], int outdegree,
                                    const int destinations[], const int destweights[],
                                    MPI_Info info, int reorder, MPI_Comm *comm_dist_graph) ;
int PMPI_Dist_graph_create(MPI_Comm comm_old, int n, const int sources[], const int degrees[],
                           const int destinations[], const int weights[], MPI_Info info,
                           int reorder, MPI_Comm *comm_dist_graph) ;
int PMPI_Dist_graph_neighbors_count(MPI_Comm comm, int *indegree, int *outdegree, int *weighted) ;
int PMPI_Dist_graph_neighbors(MPI_Comm comm, int maxindegree, int sources[], int sourceweights[],
                              int maxoutdegree, int destinations[], int destweights[]) ;

 
int PMPI_Improbe(int source, int tag, MPI_Comm comm, int *flag, MPI_Message *message,
                 MPI_Status *status) ;
int PMPI_Imrecv(void *buf, int count, MPI_Datatype datatype, MPI_Message *message,
                MPI_Request *request)  ;
int PMPI_Mprobe(int source, int tag, MPI_Comm comm, MPI_Message *message, MPI_Status *status) ;
int PMPI_Mrecv(void *buf, int count, MPI_Datatype datatype, MPI_Message *message,
               MPI_Status *status)  ;

 
int PMPI_Comm_idup(MPI_Comm comm, MPI_Comm *newcomm, MPI_Request *request) ;
int PMPI_Ibarrier(MPI_Comm comm, MPI_Request *request) ;
int PMPI_Ibcast(void *buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm,
                MPI_Request *request)  ;
int PMPI_Igather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf,
                 int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm,
                 MPI_Request *request)
                   ;
int PMPI_Igatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf,
                  const int recvcounts[], const int displs[], MPI_Datatype recvtype, int root,
                  MPI_Comm comm, MPI_Request *request)
                    ;
int PMPI_Iscatter(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf,
                  int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm,
                  MPI_Request *request)
                    ;
int PMPI_Iscatterv(const void *sendbuf, const int sendcounts[], const int displs[],
                   MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype,
                   int root, MPI_Comm comm, MPI_Request *request)
                     ;
int PMPI_Iallgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf,
                    int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request)
                      ;
int PMPI_Iallgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf,
                     const int recvcounts[], const int displs[], MPI_Datatype recvtype,
                     MPI_Comm comm, MPI_Request *request)
                       ;
int PMPI_Ialltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf,
                   int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request)
                     ;
int PMPI_Ialltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[],
                    MPI_Datatype sendtype, void *recvbuf, const int recvcounts[],
                    const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm,
                    MPI_Request *request)
                      ;
int PMPI_Ialltoallw(const void *sendbuf, const int sendcounts[], const int sdispls[],
                    const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[],
                    const int rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm,
                    MPI_Request *request) ;
int PMPI_Ireduce(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype,
                 MPI_Op op, int root, MPI_Comm comm, MPI_Request *request)
                   ;
int PMPI_Iallreduce(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype,
                    MPI_Op op, MPI_Comm comm, MPI_Request *request)
                      ;
int PMPI_Ireduce_scatter(const void *sendbuf, void *recvbuf, const int recvcounts[],
                         MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request)
                         
                          ;
int PMPI_Ireduce_scatter_block(const void *sendbuf, void *recvbuf, int recvcount,
                               MPI_Datatype datatype, MPI_Op op, MPI_Comm comm,
                               MPI_Request *request)
                               
                                ;
int PMPI_Iscan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op,
               MPI_Comm comm, MPI_Request *request)
                 ;
int PMPI_Iexscan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype,
                 MPI_Op op, MPI_Comm comm, MPI_Request *request)
                   ;

 
int PMPI_Ineighbor_allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
                             void *recvbuf, int recvcount, MPI_Datatype recvtype,
                             MPI_Comm comm, MPI_Request *request)
                             
                              ;
int PMPI_Ineighbor_allgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
                              void *recvbuf, const int recvcounts[], const int displs[],
                              MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request)
                              
                               ;
int PMPI_Ineighbor_alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
                            void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm,
                            MPI_Request *request)
                            
                             ;
int PMPI_Ineighbor_alltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[],
                             MPI_Datatype sendtype, void *recvbuf, const int recvcounts[],
                             const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm,
                             MPI_Request *request)
                             
                              ;
int PMPI_Ineighbor_alltoallw(const void *sendbuf, const int sendcounts[],
                             const MPI_Aint sdispls[], const MPI_Datatype sendtypes[],
                             void *recvbuf, const int recvcounts[], const MPI_Aint rdispls[],
                             const MPI_Datatype recvtypes[], MPI_Comm comm, MPI_Request *request) ;
int PMPI_Neighbor_allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
                            void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm)
                            
                             ;
int PMPI_Neighbor_allgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
                             void *recvbuf, const int recvcounts[], const int displs[],
                             MPI_Datatype recvtype, MPI_Comm comm)
                             
                              ;
int PMPI_Neighbor_alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
                           void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm)
                           
                            ;
int PMPI_Neighbor_alltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[],
                            MPI_Datatype sendtype, void *recvbuf, const int recvcounts[],
                            const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm)
                            
                             ;
int PMPI_Neighbor_alltoallw(const void *sendbuf, const int sendcounts[], const MPI_Aint sdispls[],
                            const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[],
                            const MPI_Aint rdispls[], const MPI_Datatype recvtypes[],
                            MPI_Comm comm) ;

 
int PMPI_Comm_split_type(MPI_Comm comm, int split_type, int key, MPI_Info info, MPI_Comm *newcomm) ;

 
int PMPI_Comm_create_group(MPI_Comm comm, MPI_Group group, int tag, MPI_Comm *newcomm) ;

 
int PMPI_Get_elements_x(const MPI_Status *status, MPI_Datatype datatype, MPI_Count *count) ;
int PMPI_Status_set_elements_x(MPI_Status *status, MPI_Datatype datatype, MPI_Count count) ;
int PMPI_Type_get_extent_x(MPI_Datatype datatype, MPI_Count *lb, MPI_Count *extent) ;
int PMPI_Type_get_true_extent_x(MPI_Datatype datatype, MPI_Count *lb, MPI_Count *extent) ;
int PMPI_Type_size_x(MPI_Datatype datatype, MPI_Count *size) ;

 
MPI_Aint PMPI_Aint_add(MPI_Aint base, MPI_Aint disp) ;
MPI_Aint PMPI_Aint_diff(MPI_Aint addr1, MPI_Aint addr2) ;

 

 
 
int PMPI_T_init_thread(int required, int *provided) ;
int PMPI_T_finalize(void) ;
int PMPI_T_enum_get_info(MPI_T_enum enumtype, int *num, char *name, int *name_len) ;
int PMPI_T_enum_get_item(MPI_T_enum enumtype, int indx, int *value, char *name, int *name_len) ;
int PMPI_T_cvar_get_num(int *num_cvar) ;
int PMPI_T_cvar_get_info(int cvar_index, char *name, int *name_len, int *verbosity,
                         MPI_Datatype *datatype, MPI_T_enum *enumtype, char *desc, int *desc_len,
                         int *binding, int *scope) ;
int PMPI_T_cvar_handle_alloc(int cvar_index, void *obj_handle, MPI_T_cvar_handle *handle,
                             int *count) ;
int PMPI_T_cvar_handle_free(MPI_T_cvar_handle *handle) ;
int PMPI_T_cvar_read(MPI_T_cvar_handle handle, void *buf) ;
int PMPI_T_cvar_write(MPI_T_cvar_handle handle, const void *buf) ;
int PMPI_T_pvar_get_num(int *num_pvar) ;
int PMPI_T_pvar_get_info(int pvar_index, char *name, int *name_len, int *verbosity, int *var_class,
                         MPI_Datatype *datatype, MPI_T_enum *enumtype, char *desc, int *desc_len,
                         int *binding, int *readonly, int *continuous, int *atomic) ;
int PMPI_T_pvar_session_create(MPI_T_pvar_session *session) ;
int PMPI_T_pvar_session_free(MPI_T_pvar_session *session) ;
int PMPI_T_pvar_handle_alloc(MPI_T_pvar_session session, int pvar_index, void *obj_handle,
                             MPI_T_pvar_handle *handle, int *count) ;
int PMPI_T_pvar_handle_free(MPI_T_pvar_session session, MPI_T_pvar_handle *handle) ;
int PMPI_T_pvar_start(MPI_T_pvar_session session, MPI_T_pvar_handle handle) ;
int PMPI_T_pvar_stop(MPI_T_pvar_session session, MPI_T_pvar_handle handle) ;
int PMPI_T_pvar_read(MPI_T_pvar_session session, MPI_T_pvar_handle handle, void *buf) ;
int PMPI_T_pvar_write(MPI_T_pvar_session session, MPI_T_pvar_handle handle, const void *buf) ;
int PMPI_T_pvar_reset(MPI_T_pvar_session session, MPI_T_pvar_handle handle) ;
int PMPI_T_pvar_readreset(MPI_T_pvar_session session, MPI_T_pvar_handle handle, void *buf) ;
int PMPI_T_category_get_num(int *num_cat) ;
int PMPI_T_category_get_info(int cat_index, char *name, int *name_len, char *desc, int *desc_len,
                             int *num_cvars, int *num_pvars, int *num_categories) ;
int PMPI_T_category_get_cvars(int cat_index, int len, int indices[]) ;
int PMPI_T_category_get_pvars(int cat_index, int len, int indices[]) ;
int PMPI_T_category_get_categories(int cat_index, int len, int indices[]) ;
int PMPI_T_category_changed(int *stamp) ;
int PMPI_T_cvar_get_index(const char *name, int *cvar_index) ;
int PMPI_T_pvar_get_index(const char *name, int var_class, int *pvar_index) ;
int PMPI_T_category_get_index(const char *name, int *cat_index) ;
 


 
 
int PMPIX_Comm_failure_ack(MPI_Comm comm) ;
int PMPIX_Comm_failure_get_acked(MPI_Comm comm, MPI_Group *failedgrp) ;
int PMPIX_Comm_revoke(MPI_Comm comm) ;
int PMPIX_Comm_shrink(MPI_Comm comm, MPI_Comm *newcomm) ;
int PMPIX_Comm_agree(MPI_Comm comm, int *flag) ;


 

 
# 2305 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"

# 1 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpio.h" 1












 
 











































 

 




# 1 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h" 1












 
 










































 
 
# 66 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpio.h" 2













 





 

 





 
# 100 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpio.h"

# 115 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpio.h"


 

 






 

 
# 136 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpio.h"

# 146 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpio.h"



# 156 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpio.h"






 





 

 
# 180 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpio.h"


 


 



 
 
int MPI_File_open(MPI_Comm comm, const char *filename, int amode, MPI_Info info, MPI_File *fh) ;
int MPI_File_close(MPI_File *fh) ;
int MPI_File_delete(const char *filename, MPI_Info info) ;
int MPI_File_set_size(MPI_File fh, MPI_Offset size) ;
int MPI_File_preallocate(MPI_File fh, MPI_Offset size) ;
int MPI_File_get_size(MPI_File fh, MPI_Offset *size) ;
int MPI_File_get_group(MPI_File fh, MPI_Group *group) ;
int MPI_File_get_amode(MPI_File fh, int *amode) ;
int MPI_File_set_info(MPI_File fh, MPI_Info info) ;
int MPI_File_get_info(MPI_File fh, MPI_Info *info_used) ;

 
int MPI_File_set_view(MPI_File fh, MPI_Offset disp, MPI_Datatype etype, MPI_Datatype filetype,
                      const char *datarep, MPI_Info info) ;
int MPI_File_get_view(MPI_File fh, MPI_Offset *disp, MPI_Datatype *etype, MPI_Datatype *filetype,
                      char *datarep) ;

 
int MPI_File_read_at(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype,
                     MPI_Status *status)  ;
int MPI_File_read_at_all(MPI_File fh, MPI_Offset offset, void * buf, int count,
                         MPI_Datatype datatype, MPI_Status *status)
     ;
int MPI_File_write_at(MPI_File fh, MPI_Offset offset, const void * buf, int count,
                      MPI_Datatype datatype, MPI_Status *status)
     ;
int MPI_File_write_at_all(MPI_File fh, MPI_Offset offset, const void *buf, int count,
                          MPI_Datatype datatype, MPI_Status *status)
     ;



  
int MPI_File_iread_at(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype,
                      MPI_Request *request)  ;
int MPI_File_iwrite_at(MPI_File fh, MPI_Offset offset, const void *buf, int count,
                       MPI_Datatype datatype, MPI_Request *request)
     ;

 
int MPI_File_read(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status)
     ;
int MPI_File_read_all(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status)
     ;
int MPI_File_write(MPI_File fh, const void *buf, int count, MPI_Datatype datatype,
                   MPI_Status *status)  ;
int MPI_File_write_all(MPI_File fh, const void *buf, int count, MPI_Datatype datatype,
                       MPI_Status *status)  ;



  

int MPI_File_iread(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Request *request)
     ;
int MPI_File_iwrite(MPI_File fh, const void *buf, int count, MPI_Datatype datatype,
                    MPI_Request *request)  ;

int MPI_File_seek(MPI_File fh, MPI_Offset offset, int whence) ;
int MPI_File_get_position(MPI_File fh, MPI_Offset *offset) ;
int MPI_File_get_byte_offset(MPI_File fh, MPI_Offset offset, MPI_Offset *disp) ;

 
int MPI_File_read_shared(MPI_File fh, void *buf, int count, MPI_Datatype datatype,
                         MPI_Status *status)  ;
int MPI_File_write_shared(MPI_File fh, const void *buf, int count, MPI_Datatype datatype,
                          MPI_Status *status)  ;
int MPI_File_iread_shared(MPI_File fh, void *buf, int count, MPI_Datatype datatype,
                          MPI_Request *request)  ;
int MPI_File_iwrite_shared(MPI_File fh, const void *buf, int count, MPI_Datatype datatype,
                           MPI_Request *request)  ;
int MPI_File_read_ordered(MPI_File fh, void *buf, int count, MPI_Datatype datatype,
                          MPI_Status *status)  ;
int MPI_File_write_ordered(MPI_File fh, const void *buf, int count, MPI_Datatype datatype,
                           MPI_Status *status)  ;
int MPI_File_seek_shared(MPI_File fh, MPI_Offset offset, int whence) ;
int MPI_File_get_position_shared(MPI_File fh, MPI_Offset *offset) ;

 
int MPI_File_read_at_all_begin(MPI_File fh, MPI_Offset offset, void *buf, int count,
                               MPI_Datatype datatype)  ;
int MPI_File_read_at_all_end(MPI_File fh, void *buf, MPI_Status *status) ;
int MPI_File_write_at_all_begin(MPI_File fh, MPI_Offset offset, const void *buf, int count,
                                MPI_Datatype datatype)  ;
int MPI_File_write_at_all_end(MPI_File fh, const void *buf, MPI_Status *status) ;
int MPI_File_read_all_begin(MPI_File fh, void *buf, int count, MPI_Datatype datatype)
     ;
int MPI_File_read_all_end(MPI_File fh, void *buf, MPI_Status *status) ;
int MPI_File_write_all_begin(MPI_File fh, const void *buf, int count, MPI_Datatype datatype)
     ;
int MPI_File_write_all_end(MPI_File fh, const void *buf, MPI_Status *status) ;
int MPI_File_read_ordered_begin(MPI_File fh, void *buf, int count, MPI_Datatype datatype)
     ;
int MPI_File_read_ordered_end(MPI_File fh, void *buf, MPI_Status *status) ;
int MPI_File_write_ordered_begin(MPI_File fh, const void *buf, int count, MPI_Datatype datatype)
     ;
int MPI_File_write_ordered_end(MPI_File fh, const void *buf, MPI_Status *status) ;

 
int MPI_File_get_type_extent(MPI_File fh, MPI_Datatype datatype, MPI_Aint *extent) ;

 
int MPI_Register_datarep(const char *datarep, MPI_Datarep_conversion_function *read_conversion_fn,
			 MPI_Datarep_conversion_function *write_conversion_fn,
			 MPI_Datarep_extent_function *dtype_file_extent_fn, void *extra_state) ;

 
int MPI_File_set_atomicity(MPI_File fh, int flag) ;
int MPI_File_get_atomicity(MPI_File fh, int *flag) ;
int MPI_File_sync(MPI_File fh) ;

 






 
int MPI_File_iread_at_all(MPI_File fh, MPI_Offset offset, void *buf, int count,
                           MPI_Datatype datatype, MPI_Request *request)
     ;
int MPI_File_iwrite_at_all(MPI_File fh, MPI_Offset offset, const void *buf, int count,
                            MPI_Datatype datatype, MPI_Request *request)
     ;
int MPI_File_iread_all(MPI_File fh, void *buf, int count, MPI_Datatype datatype,
                        MPI_Request *request)
     ;
int MPI_File_iwrite_all(MPI_File fh, const void *buf, int count, MPI_Datatype datatype,
                         MPI_Request *request)
     ;
 

# 336 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpio.h"



 
 
# 349 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpio.h"
 
MPI_File MPI_File_f2c(MPI_Fint file) ;
MPI_Fint MPI_File_c2f(MPI_File file) ;


# 374 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpio.h"

 
# 403 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpio.h"




 


 
int PMPI_File_open(MPI_Comm, const char *, int, MPI_Info, MPI_File *) ;
int PMPI_File_close(MPI_File *) ;
int PMPI_File_delete(const char *, MPI_Info) ;
int PMPI_File_set_size(MPI_File, MPI_Offset) ;
int PMPI_File_preallocate(MPI_File, MPI_Offset) ;
int PMPI_File_get_size(MPI_File, MPI_Offset *) ;
int PMPI_File_get_group(MPI_File, MPI_Group *) ;
int PMPI_File_get_amode(MPI_File, int *) ;
int PMPI_File_set_info(MPI_File, MPI_Info) ;
int PMPI_File_get_info(MPI_File, MPI_Info *) ;

 
int PMPI_File_set_view(MPI_File, MPI_Offset, 
    MPI_Datatype, MPI_Datatype, const char *, MPI_Info) ;
int PMPI_File_get_view(MPI_File, MPI_Offset *, 
      MPI_Datatype *, MPI_Datatype *, char *) ;

 
int PMPI_File_read_at(MPI_File, MPI_Offset, void *,
	      int, MPI_Datatype, MPI_Status *)
               ;
int PMPI_File_read_at_all(MPI_File, MPI_Offset, void *,
	      int, MPI_Datatype, MPI_Status *)
               ;
int PMPI_File_write_at(MPI_File, MPI_Offset, const void *,
	      int, MPI_Datatype, MPI_Status *)
               ;
int PMPI_File_write_at_all(MPI_File, MPI_Offset, const void *,
	      int, MPI_Datatype, MPI_Status *)
               ;



  

int PMPI_File_iread_at(MPI_File, MPI_Offset, void *,
	      int, MPI_Datatype, MPI_Request *)
               ;
int PMPI_File_iwrite_at(MPI_File, MPI_Offset, const void *,
	      int, MPI_Datatype, MPI_Request *)
               ;

 
int PMPI_File_read(MPI_File, void *, int, MPI_Datatype, MPI_Status *)
                    ;
int PMPI_File_read_all(MPI_File, void *, int, MPI_Datatype, MPI_Status *)
                        ;
int PMPI_File_write(MPI_File, const void *, int, MPI_Datatype, MPI_Status *)
                     ;
int PMPI_File_write_all(MPI_File, const void *, int, MPI_Datatype, MPI_Status *)
                         ;



  

int PMPI_File_iread(MPI_File, void *, int, MPI_Datatype, MPI_Request *)
                     ;
int PMPI_File_iwrite(MPI_File, const void *, int, MPI_Datatype, MPI_Request *)
                      ;

int PMPI_File_seek(MPI_File, MPI_Offset, int) ;
int PMPI_File_get_position(MPI_File, MPI_Offset *) ;
int PMPI_File_get_byte_offset(MPI_File, MPI_Offset, MPI_Offset *) ;

 
int PMPI_File_read_shared(MPI_File, void *, int, MPI_Datatype, MPI_Status *)
                           ;
int PMPI_File_write_shared(MPI_File, const void *, int, MPI_Datatype, MPI_Status *)
                            ;
int PMPI_File_iread_shared(MPI_File, void *, int, 
			   MPI_Datatype, MPI_Request *)
                            ;
int PMPI_File_iwrite_shared(MPI_File, const void *, int,
			    MPI_Datatype, MPI_Request *)
                             ;
int PMPI_File_read_ordered(MPI_File, void *, int, MPI_Datatype, MPI_Status *)
                            ;
int PMPI_File_write_ordered(MPI_File, const void *, int, MPI_Datatype, MPI_Status *)
                             ;
int PMPI_File_seek_shared(MPI_File, MPI_Offset, int) ;
int PMPI_File_get_position_shared(MPI_File, MPI_Offset *) ;

 
int PMPI_File_read_at_all_begin(MPI_File, MPI_Offset, void *,
                               int, MPI_Datatype)
                                ;
int PMPI_File_read_at_all_end(MPI_File, void *, MPI_Status *) ;
int PMPI_File_write_at_all_begin(MPI_File, MPI_Offset, const void *,
                                 int, MPI_Datatype)
                                  ;
int PMPI_File_write_at_all_end(MPI_File, const void *, MPI_Status *) ;
int PMPI_File_read_all_begin(MPI_File, void *, int, MPI_Datatype)
                              ;
int PMPI_File_read_all_end(MPI_File, void *, MPI_Status *) ;
int PMPI_File_write_all_begin(MPI_File, const void *, int, MPI_Datatype)
                               ;
int PMPI_File_write_all_end(MPI_File, const void *, MPI_Status *) ;
int PMPI_File_read_ordered_begin(MPI_File, void *, int, MPI_Datatype)
                                  ;
int PMPI_File_read_ordered_end(MPI_File, void *, MPI_Status *) ;
int PMPI_File_write_ordered_begin(MPI_File, const void *, int, MPI_Datatype)
                                   ;
int PMPI_File_write_ordered_end(MPI_File, const void *, MPI_Status *) ;

 
int PMPI_File_get_type_extent(MPI_File, MPI_Datatype, MPI_Aint *) ;

 
int PMPI_Register_datarep(const char *,
			 MPI_Datarep_conversion_function *,
			 MPI_Datarep_conversion_function *,
			 MPI_Datarep_extent_function *,
			 void *) ;

 
int PMPI_File_set_atomicity(MPI_File, int) ;
int PMPI_File_get_atomicity(MPI_File, int *) ;
int PMPI_File_sync(MPI_File) ;

 






 
int PMPI_File_iread_at_all(MPI_File fh, MPI_Offset offset, void *buf, int count,
                            MPI_Datatype datatype, MPI_Request *request)
     ;
int PMPI_File_iwrite_at_all(MPI_File fh, MPI_Offset offset, const void *buf, int count,
                             MPI_Datatype datatype, MPI_Request *request)
     ;
int PMPI_File_iread_all(MPI_File fh, void *buf, int count, MPI_Datatype datatype,
                         MPI_Request *request)
     ;
int PMPI_File_iwrite_all(MPI_File fh, const void *buf, int count, MPI_Datatype datatype,
                          MPI_Request *request)
     ;

# 561 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpio.h"

 
MPI_File PMPI_File_f2c(MPI_Fint) ;
MPI_Fint PMPI_File_c2f(MPI_File) ;

# 581 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpio.h"

 
# 598 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpio.h"





# 2307 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h" 2

# 2325 "/sw/eb/sw/impi/2021.4.0-intel-compilers-2021.4.0/mpi/2021.4.0/include/mpi.h"


 
typedef int MPIX_Grequest_class;
int MPIX_Grequest_class_create(MPI_Grequest_query_function *query_fn,
                               MPI_Grequest_free_function *free_fn,
                               MPI_Grequest_cancel_function *cancel_fn,
                               MPIX_Grequest_poll_function *poll_fn,
                               MPIX_Grequest_wait_function *wait_fn,
                               MPIX_Grequest_class *greq_class) ;
int MPIX_Grequest_class_allocate(MPIX_Grequest_class greq_class, void *extra_state,
                                 MPI_Request *request) ;
int MPIX_Grequest_start(MPI_Grequest_query_function *query_fn,
                        MPI_Grequest_free_function *free_fn,
                        MPI_Grequest_cancel_function *cancel_fn,
                        MPIX_Grequest_poll_function *poll_fn,
                        MPIX_Grequest_wait_function *wait_fn, void *extra_state,
                        MPI_Request *request) ;


 
int PMPIX_Grequest_class_create(MPI_Grequest_query_function *query_fn,
                                MPI_Grequest_free_function *free_fn,
                                MPI_Grequest_cancel_function *cancel_fn,
                                MPIX_Grequest_poll_function *poll_fn,
                                MPIX_Grequest_wait_function *wait_fn,
                                MPIX_Grequest_class *greq_class) ;
int PMPIX_Grequest_class_allocate(MPIX_Grequest_class greq_class, void *extra_state,
                                  MPI_Request *request) ;
int PMPIX_Grequest_start(MPI_Grequest_query_function *query_fn,
                         MPI_Grequest_free_function *free_fn,
                         MPI_Grequest_cancel_function *cancel_fn,
                         MPIX_Grequest_poll_function *poll_fn,
                         MPIX_Grequest_wait_function *wait_fn, void *extra_state,
                         MPI_Request *request) ;


# 67 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h" 2







 
# 114 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h"

 











 
# 1 "/usr/include/stdio.h" 1 3
















 



 




# 1 "/usr/include/bits/libc-header-start.h" 1 3
















 







 










 
# 44 "/usr/include/bits/libc-header-start.h" 3


 
# 53 "/usr/include/bits/libc-header-start.h" 3


 
# 62 "/usr/include/bits/libc-header-start.h" 3


 
# 28 "/usr/include/stdio.h" 2 3



# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 1 3































 





# 50 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3


 







 
# 69 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 80 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 87 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 103 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3





 
# 34 "/usr/include/stdio.h" 2 3

# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stdarg.h" 1 3








 























 



# 132 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stdarg.h" 3


typedef __builtin_va_list va_list;








 






 

typedef __builtin_va_list __gnuc_va_list;

# 37 "/usr/include/stdio.h" 2 3

# 1 "/usr/include/bits/types/__fpos_t.h" 1 3



# 1 "/usr/include/bits/types/__mbstate_t.h" 1 3






 




 
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;		 
} __mbstate_t;

# 6 "/usr/include/bits/types/__fpos_t.h" 2 3



 
typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;

# 40 "/usr/include/stdio.h" 2 3
# 1 "/usr/include/bits/types/__fpos64_t.h" 1 3








 
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;

# 41 "/usr/include/stdio.h" 2 3
# 1 "/usr/include/bits/types/__FILE.h" 1 3



struct _IO_FILE;
typedef struct _IO_FILE __FILE;

# 42 "/usr/include/stdio.h" 2 3
# 1 "/usr/include/bits/types/FILE.h" 1 3



struct _IO_FILE;

 
typedef struct _IO_FILE FILE;

# 43 "/usr/include/stdio.h" 2 3
# 1 "/usr/include/bits/types/struct_FILE.h" 1 3















 






 











struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;


 

typedef void _IO_lock_t;




 
struct _IO_FILE
{
  int _flags;		 

   
  char *_IO_read_ptr;	 
  char *_IO_read_end;	 
  char *_IO_read_base;	 
  char *_IO_write_base;	 
  char *_IO_write_ptr;	 
  char *_IO_write_end;	 
  char *_IO_buf_base;	 
  char *_IO_buf_end;	 

   
  char *_IO_save_base;  
  char *_IO_backup_base;   
  char *_IO_save_end;  

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;  

   
  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;
# 89 "/usr/include/bits/types/struct_FILE.h" 3
  __off64_t _offset;
   
  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;
   
  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};

 
















 

# 44 "/usr/include/stdio.h" 2 3








typedef __gnuc_va_list va_list;
# 59 "/usr/include/stdio.h" 3




typedef __off_t off_t;
# 74 "/usr/include/stdio.h" 3



typedef __ssize_t ssize_t;




 

typedef __fpos_t fpos_t;
# 91 "/usr/include/stdio.h" 3

 





 




 




 
# 116 "/usr/include/stdio.h" 3



 












 
# 1 "/usr/include/bits/stdio_lim.h" 1 3















 












# 35 "/usr/include/bits/stdio_lim.h" 3




# 134 "/usr/include/stdio.h" 2 3


 
extern FILE *stdin;		 
extern FILE *stdout;		 
extern FILE *stderr;		 
 




 
extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));
 
extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));


 
extern int renameat (int __oldfd, const char *__old, int __newfd,
		     const char *__new) __attribute__ ((__nothrow__ , __leaf__));


# 167 "/usr/include/stdio.h" 3




 

extern FILE *tmpfile (void) ;
# 181 "/usr/include/stdio.h" 3





 
extern char *tmpnam (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;



 
extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;










 
extern char *tempnam (const char *__dir, const char *__pfx)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;






 
extern int fclose (FILE *__stream);



 
extern int fflush (FILE *__stream);







 
extern int fflush_unlocked (FILE *__stream);


# 239 "/usr/include/stdio.h" 3






 
extern FILE *fopen (const char *__restrict __filename,
		    const char *__restrict __modes) ;



 
extern FILE *freopen (const char *__restrict __filename,
		      const char *__restrict __modes,
		      FILE *__restrict __stream) ;
# 276 "/usr/include/stdio.h" 3


 
extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__)) ;


# 289 "/usr/include/stdio.h" 3


 
extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) ;



 
extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__)) ;




 
extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));


 
extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
		    int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));



 
extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
		       size_t __size) __attribute__ ((__nothrow__ , __leaf__));

 
extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));






 
extern int fprintf (FILE *__restrict __stream,
		    const char *__restrict __format, ...);



 
extern int printf (const char *__restrict __format, ...);
 
extern int sprintf (char *__restrict __s,
		    const char *__restrict __format, ...) __attribute__ ((__nothrow__));




 
extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
		     __gnuc_va_list __arg);



 
extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);
 
extern int vsprintf (char *__restrict __s, const char *__restrict __format,
		     __gnuc_va_list __arg) __attribute__ ((__nothrow__));


 
extern int snprintf (char *__restrict __s, size_t __maxlen,
		     const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
		      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));


# 376 "/usr/include/stdio.h" 3


 
extern int vdprintf (int __fd, const char *__restrict __fmt,
		     __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));






 
extern int fscanf (FILE *__restrict __stream,
		   const char *__restrict __format, ...) ;



 
extern int scanf (const char *__restrict __format, ...) ;
 
extern int sscanf (const char *__restrict __s,
		   const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));







 
extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf") ;


extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf") ;

extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__ , __leaf__));
# 428 "/usr/include/stdio.h" 3





 
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
		    __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;




 
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;

 
extern int vsscanf (const char *__restrict __s,
		    const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));







 
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 485 "/usr/include/stdio.h" 3





 
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);




 
extern int getchar (void);





 
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);








 
extern int fgetc_unlocked (FILE *__stream);









 
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);




 
extern int putchar (int __c);







 
extern int fputc_unlocked (int __c, FILE *__stream);






 
extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);





 
extern int getw (FILE *__stream);

 
extern int putw (int __w, FILE *__stream);






 
extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;

# 585 "/usr/include/stdio.h" 3

# 596 "/usr/include/stdio.h" 3












 
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) ;






 
extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) ;






 
extern int fputs (const char *__restrict __s, FILE *__restrict __stream);




 
extern int puts (const char *__s);





 
extern int ungetc (int __c, FILE *__stream);





 
extern size_t fread (void *__restrict __ptr, size_t __size,
		     size_t __n, FILE *__restrict __stream) ;



 
extern size_t fwrite (const void *__restrict __ptr, size_t __size,
		      size_t __n, FILE *__restrict __s);

# 671 "/usr/include/stdio.h" 3







 
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
			      size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
			       size_t __n, FILE *__restrict __stream);






 
extern int fseek (FILE *__stream, long int __off, int __whence);



 
extern long int ftell (FILE *__stream) ;



 
extern void rewind (FILE *__stream);




 






 
extern int fseeko (FILE *__stream, __off_t __off, int __whence);



 
extern __off_t ftello (FILE *__stream) ;
# 731 "/usr/include/stdio.h" 3





 
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);



 
extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 754 "/usr/include/stdio.h" 3

# 761 "/usr/include/stdio.h" 3

 
extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
 
extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
 
extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;


 
extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;






 
extern void perror (const char *__s);




 
# 1 "/usr/include/bits/sys_errlist.h" 1 3
















 





 


extern int sys_nerr;
extern const char *const sys_errlist[];
# 788 "/usr/include/stdio.h" 2 3



 
extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;



 
extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;







 
extern FILE *popen (const char *__command, const char *__modes) ;




 
extern int pclose (FILE *__stream);




 
extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));









# 840 "/usr/include/stdio.h" 3



 

 
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));


 
extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;

 
extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));









 
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);


 
# 878 "/usr/include/stdio.h" 3



# 129 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h" 2

 




extern __attribute__((visibility("default"))) MPI_Datatype MPIU_ENUM ;
extern __attribute__((visibility("default"))) MPI_Datatype MPIU_BOOL ;










 

extern __attribute__((visibility("default"))) MPI_Datatype MPIU_FORTRANADDR;

# 158 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h"



 
extern __attribute__((visibility("default"))) MPI_Datatype MPIU_SIZE_T ;




 
extern __attribute__((visibility("default"))) FILE *PETSC_STDOUT;




 
extern __attribute__((visibility("default"))) FILE *PETSC_STDERR;

 

# 195 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h"



 

extern __attribute__((visibility("default"))) const char *const PetscBools[];

extern __attribute__((visibility("default"))) PetscBool PETSC_RUNNING_ON_VALGRIND;


 
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmath.h" 1








 



# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 1 3












 










# 69 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

     


         
# 1 "/usr/include/math.h" 1 3
















 



 




# 1 "/usr/include/bits/libc-header-start.h" 1 3
















 







 










 
# 44 "/usr/include/bits/libc-header-start.h" 3


 
# 53 "/usr/include/bits/libc-header-start.h" 3


 
# 62 "/usr/include/bits/libc-header-start.h" 3


 
# 28 "/usr/include/math.h" 2 3








 


 
# 1 "/usr/include/bits/math-vector.h" 1 3
















 






 
# 1 "/usr/include/bits/libm-simd-decl-stubs.h" 1 3
















 













 




# 46 "/usr/include/bits/libm-simd-decl-stubs.h" 3

# 57 "/usr/include/bits/libm-simd-decl-stubs.h" 3

# 68 "/usr/include/bits/libm-simd-decl-stubs.h" 3

# 79 "/usr/include/bits/libm-simd-decl-stubs.h" 3

# 90 "/usr/include/bits/libm-simd-decl-stubs.h" 3

# 26 "/usr/include/bits/math-vector.h" 2 3

# 41 "/usr/include/math.h" 2 3

 



 
# 87 "/usr/include/math.h" 3


 






 
# 106 "/usr/include/math.h" 3

# 136 "/usr/include/math.h" 3

 
# 1 "/usr/include/bits/flt-eval-method.h" 1 3
















 





# 139 "/usr/include/math.h" 2 3








 
# 155 "/usr/include/math.h" 3
typedef long double float_t;
typedef long double double_t;
# 179 "/usr/include/math.h" 3









 

# 1 "/usr/include/bits/fp-logb.h" 1 3
















 





# 191 "/usr/include/math.h" 2 3
# 220 "/usr/include/math.h" 3











 

# 1 "/usr/include/bits/fp-fast.h" 1 3
















 








 












# 234 "/usr/include/math.h" 2 3

# 256 "/usr/include/math.h" 3




 











# 284 "/usr/include/math.h" 3

# 1 "/usr/include/bits/mathcalls-helper-functions.h" 1 3
















 


 
extern int __fpclassify (double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));

 
extern int __signbit (double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


 
extern int __isinf (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern int __finite (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern int __isnan (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern int __iseqsig (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));

 
extern int __issignaling (double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));
# 290 "/usr/include/math.h" 2 3
# 1 "/usr/include/bits/mathcalls.h" 1 3
















 

























 






 

 
extern double acos (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __acos (double __x) __attribute__ ((__nothrow__ , __leaf__));
 
extern double asin (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __asin (double __x) __attribute__ ((__nothrow__ , __leaf__));
 
extern double atan (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atan (double __x) __attribute__ ((__nothrow__ , __leaf__));
 
extern double atan2 (double __y, double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atan2 (double __y, double __x) __attribute__ ((__nothrow__ , __leaf__));

 
 extern double cos (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cos (double __x) __attribute__ ((__nothrow__ , __leaf__));
 
 extern double sin (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sin (double __x) __attribute__ ((__nothrow__ , __leaf__));
 
extern double tan (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __tan (double __x) __attribute__ ((__nothrow__ , __leaf__));

 

 
extern double cosh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cosh (double __x) __attribute__ ((__nothrow__ , __leaf__));
 
extern double sinh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sinh (double __x) __attribute__ ((__nothrow__ , __leaf__));
 
extern double tanh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __tanh (double __x) __attribute__ ((__nothrow__ , __leaf__));








 
extern double acosh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __acosh (double __x) __attribute__ ((__nothrow__ , __leaf__));
 
extern double asinh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __asinh (double __x) __attribute__ ((__nothrow__ , __leaf__));
 
extern double atanh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atanh (double __x) __attribute__ ((__nothrow__ , __leaf__));


 

 
 extern double exp (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __exp (double __x) __attribute__ ((__nothrow__ , __leaf__));

 
extern double frexp (double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern double __frexp (double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));

 
extern double ldexp (double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern double __ldexp (double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));

 
 extern double log (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log (double __x) __attribute__ ((__nothrow__ , __leaf__));

 
extern double log10 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log10 (double __x) __attribute__ ((__nothrow__ , __leaf__));

 
extern double modf (double __x, double *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern double __modf (double __x, double *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));







 
extern double expm1 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __expm1 (double __x) __attribute__ ((__nothrow__ , __leaf__));

 
extern double log1p (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log1p (double __x) __attribute__ ((__nothrow__ , __leaf__));

 
extern double logb (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __logb (double __x) __attribute__ ((__nothrow__ , __leaf__));



 
extern double exp2 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __exp2 (double __x) __attribute__ ((__nothrow__ , __leaf__));

 
extern double log2 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log2 (double __x) __attribute__ ((__nothrow__ , __leaf__));



 

 
 extern double pow (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __pow (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));

 
extern double sqrt (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sqrt (double __x) __attribute__ ((__nothrow__ , __leaf__));


 
extern double hypot (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __hypot (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));



 
extern double cbrt (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cbrt (double __x) __attribute__ ((__nothrow__ , __leaf__));



 

 
extern double ceil (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __ceil (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern double fabs (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fabs (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern double floor (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __floor (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern double fmod (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __fmod (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));







 
extern int isinf (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



 
extern int finite (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern double drem (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __drem (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));


 
extern double significand (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __significand (double __x) __attribute__ ((__nothrow__ , __leaf__));





 
extern double copysign (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __copysign (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



 
extern double nan (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)); extern double __nan (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__));








 
extern int isnan (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




 
extern double j0 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __j0 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double j1 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __j1 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double jn (int, double) __attribute__ ((__nothrow__ , __leaf__)); extern double __jn (int, double) __attribute__ ((__nothrow__ , __leaf__));
extern double y0 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __y0 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double y1 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __y1 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double yn (int, double) __attribute__ ((__nothrow__ , __leaf__)); extern double __yn (int, double) __attribute__ ((__nothrow__ , __leaf__));




 
extern double erf (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __erf (double) __attribute__ ((__nothrow__ , __leaf__));
extern double erfc (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __erfc (double) __attribute__ ((__nothrow__ , __leaf__));
extern double lgamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __lgamma (double) __attribute__ ((__nothrow__ , __leaf__));



 
extern double tgamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __tgamma (double) __attribute__ ((__nothrow__ , __leaf__));




 
extern double gamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __gamma (double) __attribute__ ((__nothrow__ , __leaf__));






 
extern double lgamma_r (double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern double __lgamma_r (double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));





 
extern double rint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __rint (double __x) __attribute__ ((__nothrow__ , __leaf__));

 
extern double nextafter (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __nextafter (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));

extern double nexttoward (double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __nexttoward (double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


# 270 "/usr/include/bits/mathcalls.h" 3

 
extern double remainder (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __remainder (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));


 
extern double scalbn (double __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalbn (double __x, int __n) __attribute__ ((__nothrow__ , __leaf__));


 
extern int ilogb (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogb (double __x) __attribute__ ((__nothrow__ , __leaf__));








 
extern double scalbln (double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalbln (double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));


 
extern double nearbyint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __nearbyint (double __x) __attribute__ ((__nothrow__ , __leaf__));


 
extern double round (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __round (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


 
extern double trunc (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __trunc (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



 
extern double remquo (double __x, double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern double __remquo (double __x, double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));


 


 
extern long int lrint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrint (double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrint (double __x) __attribute__ ((__nothrow__ , __leaf__));


 
extern long int lround (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lround (double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llround (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llround (double __x) __attribute__ ((__nothrow__ , __leaf__));


 
extern double fdim (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __fdim (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));

 
extern double fmax (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fmax (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern double fmin (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fmin (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern double fma (double __x, double __y, double __z) __attribute__ ((__nothrow__ , __leaf__)); extern double __fma (double __x, double __y, double __z) __attribute__ ((__nothrow__ , __leaf__));


# 390 "/usr/include/bits/mathcalls.h" 3





 
extern double scalb (double __x, double __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalb (double __x, double __n) __attribute__ ((__nothrow__ , __leaf__));
# 291 "/usr/include/math.h" 2 3









 

# 1 "/usr/include/bits/mathcalls-helper-functions.h" 1 3
















 


 
extern int __fpclassifyf (float __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));

 
extern int __signbitf (float __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


 
extern int __isinff (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern int __finitef (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern int __isnanf (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern int __iseqsigf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));

 
extern int __issignalingf (float __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));
# 307 "/usr/include/math.h" 2 3
# 1 "/usr/include/bits/mathcalls.h" 1 3
















 

























 






 

 
extern float acosf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __acosf (float __x) __attribute__ ((__nothrow__ , __leaf__));
 
extern float asinf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __asinf (float __x) __attribute__ ((__nothrow__ , __leaf__));
 
extern float atanf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atanf (float __x) __attribute__ ((__nothrow__ , __leaf__));
 
extern float atan2f (float __y, float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atan2f (float __y, float __x) __attribute__ ((__nothrow__ , __leaf__));

 
 extern float cosf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __cosf (float __x) __attribute__ ((__nothrow__ , __leaf__));
 
 extern float sinf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sinf (float __x) __attribute__ ((__nothrow__ , __leaf__));
 
extern float tanf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __tanf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 

 
extern float coshf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __coshf (float __x) __attribute__ ((__nothrow__ , __leaf__));
 
extern float sinhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sinhf (float __x) __attribute__ ((__nothrow__ , __leaf__));
 
extern float tanhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __tanhf (float __x) __attribute__ ((__nothrow__ , __leaf__));








 
extern float acoshf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __acoshf (float __x) __attribute__ ((__nothrow__ , __leaf__));
 
extern float asinhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __asinhf (float __x) __attribute__ ((__nothrow__ , __leaf__));
 
extern float atanhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atanhf (float __x) __attribute__ ((__nothrow__ , __leaf__));


 

 
 extern float expf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __expf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 
extern float frexpf (float __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern float __frexpf (float __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));

 
extern float ldexpf (float __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern float __ldexpf (float __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));

 
 extern float logf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __logf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 
extern float log10f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log10f (float __x) __attribute__ ((__nothrow__ , __leaf__));

 
extern float modff (float __x, float *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern float __modff (float __x, float *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));







 
extern float expm1f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __expm1f (float __x) __attribute__ ((__nothrow__ , __leaf__));

 
extern float log1pf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log1pf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 
extern float logbf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __logbf (float __x) __attribute__ ((__nothrow__ , __leaf__));



 
extern float exp2f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __exp2f (float __x) __attribute__ ((__nothrow__ , __leaf__));

 
extern float log2f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log2f (float __x) __attribute__ ((__nothrow__ , __leaf__));



 

 
 extern float powf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __powf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));

 
extern float sqrtf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sqrtf (float __x) __attribute__ ((__nothrow__ , __leaf__));


 
extern float hypotf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __hypotf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));



 
extern float cbrtf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __cbrtf (float __x) __attribute__ ((__nothrow__ , __leaf__));



 

 
extern float ceilf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __ceilf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern float fabsf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fabsf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern float floorf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __floorf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern float fmodf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __fmodf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));







 
extern int isinff (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



 
extern int finitef (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern float dremf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __dremf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));


 
extern float significandf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __significandf (float __x) __attribute__ ((__nothrow__ , __leaf__));





 
extern float copysignf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



 
extern float nanf (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)); extern float __nanf (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__));








 
extern int isnanf (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




 
extern float j0f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __j0f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float j1f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __j1f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float jnf (int, float) __attribute__ ((__nothrow__ , __leaf__)); extern float __jnf (int, float) __attribute__ ((__nothrow__ , __leaf__));
extern float y0f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __y0f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float y1f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __y1f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float ynf (int, float) __attribute__ ((__nothrow__ , __leaf__)); extern float __ynf (int, float) __attribute__ ((__nothrow__ , __leaf__));




 
extern float erff (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __erff (float) __attribute__ ((__nothrow__ , __leaf__));
extern float erfcf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __erfcf (float) __attribute__ ((__nothrow__ , __leaf__));
extern float lgammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __lgammaf (float) __attribute__ ((__nothrow__ , __leaf__));



 
extern float tgammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __tgammaf (float) __attribute__ ((__nothrow__ , __leaf__));




 
extern float gammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __gammaf (float) __attribute__ ((__nothrow__ , __leaf__));






 
extern float lgammaf_r (float, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern float __lgammaf_r (float, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));





 
extern float rintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __rintf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 
extern float nextafterf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __nextafterf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));

extern float nexttowardf (float __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __nexttowardf (float __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


# 270 "/usr/include/bits/mathcalls.h" 3

 
extern float remainderf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __remainderf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));


 
extern float scalbnf (float __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalbnf (float __x, int __n) __attribute__ ((__nothrow__ , __leaf__));


 
extern int ilogbf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbf (float __x) __attribute__ ((__nothrow__ , __leaf__));








 
extern float scalblnf (float __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalblnf (float __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));


 
extern float nearbyintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __nearbyintf (float __x) __attribute__ ((__nothrow__ , __leaf__));


 
extern float roundf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __roundf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


 
extern float truncf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __truncf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



 
extern float remquof (float __x, float __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern float __remquof (float __x, float __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));


 


 
extern long int lrintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintf (float __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintf (float __x) __attribute__ ((__nothrow__ , __leaf__));


 
extern long int lroundf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundf (float __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundf (float __x) __attribute__ ((__nothrow__ , __leaf__));


 
extern float fdimf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __fdimf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));

 
extern float fmaxf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern float fminf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fminf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern float fmaf (float __x, float __y, float __z) __attribute__ ((__nothrow__ , __leaf__)); extern float __fmaf (float __x, float __y, float __z) __attribute__ ((__nothrow__ , __leaf__));


# 390 "/usr/include/bits/mathcalls.h" 3





 
extern float scalbf (float __x, float __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalbf (float __x, float __n) __attribute__ ((__nothrow__ , __leaf__));
# 308 "/usr/include/math.h" 2 3





# 340 "/usr/include/math.h" 3


 

# 1 "/usr/include/bits/mathcalls-helper-functions.h" 1 3
















 


 
extern int __fpclassifyl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));

 
extern int __signbitl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


 
extern int __isinfl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern int __finitel (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern int __isnanl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern int __iseqsigl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));

 
extern int __issignalingl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));
# 350 "/usr/include/math.h" 2 3
# 1 "/usr/include/bits/mathcalls.h" 1 3
















 

























 






 

 
extern long double acosl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __acosl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
 
extern long double asinl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __asinl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
 
extern long double atanl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atanl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
 
extern long double atan2l (long double __y, long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atan2l (long double __y, long double __x) __attribute__ ((__nothrow__ , __leaf__));

 
 extern long double cosl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cosl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
 
 extern long double sinl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sinl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
 
extern long double tanl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tanl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 

 
extern long double coshl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __coshl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
 
extern long double sinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
 
extern long double tanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));








 
extern long double acoshl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __acoshl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
 
extern long double asinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __asinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
 
extern long double atanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


 

 
 extern long double expl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __expl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 
extern long double frexpl (long double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern long double __frexpl (long double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));

 
extern long double ldexpl (long double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern long double __ldexpl (long double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));

 
 extern long double logl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __logl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 
extern long double log10l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log10l (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 
extern long double modfl (long double __x, long double *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern long double __modfl (long double __x, long double *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));







 
extern long double expm1l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __expm1l (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 
extern long double log1pl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log1pl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 
extern long double logbl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __logbl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



 
extern long double exp2l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __exp2l (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 
extern long double log2l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log2l (long double __x) __attribute__ ((__nothrow__ , __leaf__));



 

 
 extern long double powl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __powl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));

 
extern long double sqrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sqrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


 
extern long double hypotl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __hypotl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));



 
extern long double cbrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cbrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



 

 
extern long double ceill (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __ceill (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern long double fabsl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fabsl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern long double floorl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __floorl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern long double fmodl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fmodl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));







 
extern int isinfl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



 
extern int finitel (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern long double dreml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __dreml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


 
extern long double significandl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __significandl (long double __x) __attribute__ ((__nothrow__ , __leaf__));





 
extern long double copysignl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



 
extern long double nanl (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nanl (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__));








 
extern int isnanl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




 
extern long double j0l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __j0l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double j1l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __j1l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double jnl (int, long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __jnl (int, long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double y0l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __y0l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double y1l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __y1l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double ynl (int, long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __ynl (int, long double) __attribute__ ((__nothrow__ , __leaf__));




 
extern long double erfl (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __erfl (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double erfcl (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __erfcl (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double lgammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __lgammal (long double) __attribute__ ((__nothrow__ , __leaf__));



 
extern long double tgammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tgammal (long double) __attribute__ ((__nothrow__ , __leaf__));




 
extern long double gammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __gammal (long double) __attribute__ ((__nothrow__ , __leaf__));






 
extern long double lgammal_r (long double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern long double __lgammal_r (long double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));





 
extern long double rintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __rintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 
extern long double nextafterl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nextafterl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));

extern long double nexttowardl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nexttowardl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


# 270 "/usr/include/bits/mathcalls.h" 3

 
extern long double remainderl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __remainderl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


 
extern long double scalbnl (long double __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalbnl (long double __x, int __n) __attribute__ ((__nothrow__ , __leaf__));


 
extern int ilogbl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbl (long double __x) __attribute__ ((__nothrow__ , __leaf__));








 
extern long double scalblnl (long double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalblnl (long double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));


 
extern long double nearbyintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nearbyintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


 
extern long double roundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __roundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


 
extern long double truncl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __truncl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



 
extern long double remquol (long double __x, long double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern long double __remquol (long double __x, long double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));


 


 
extern long int lrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


 
extern long int lroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


 
extern long double fdiml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fdiml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));

 
extern long double fmaxl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern long double fminl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern long double fmal (long double __x, long double __y, long double __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fmal (long double __x, long double __y, long double __z) __attribute__ ((__nothrow__ , __leaf__));


# 390 "/usr/include/bits/mathcalls.h" 3





 
extern long double scalbl (long double __x, long double __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalbl (long double __x, long double __n) __attribute__ ((__nothrow__ , __leaf__));
# 351 "/usr/include/math.h" 2 3










 

# 379 "/usr/include/math.h" 3

# 396 "/usr/include/math.h" 3

# 413 "/usr/include/math.h" 3

# 1 "/usr/include/bits/mathcalls-helper-functions.h" 1 3
















 


 
extern int __fpclassifyf128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));

 
extern int __signbitf128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


 
extern int __isinff128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern int __finitef128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern int __isnanf128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern int __iseqsigf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));

 
extern int __issignalingf128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));
# 421 "/usr/include/math.h" 2 3
# 430 "/usr/include/math.h" 3

# 447 "/usr/include/math.h" 3

# 464 "/usr/include/math.h" 3

# 481 "/usr/include/math.h" 3





 
# 497 "/usr/include/math.h" 3

# 549 "/usr/include/math.h" 3

# 763 "/usr/include/math.h" 3

# 770 "/usr/include/math.h" 3


 
extern int signgam;


# 784 "/usr/include/math.h" 3









 
# 848 "/usr/include/math.h" 3

 


 
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };



 

 



     




 






 
# 909 "/usr/include/math.h" 3

 
# 917 "/usr/include/math.h" 3

 
# 925 "/usr/include/math.h" 3


 
# 934 "/usr/include/math.h" 3

 
# 952 "/usr/include/math.h" 3

 







 
# 969 "/usr/include/math.h" 3



# 1056 "/usr/include/math.h" 3







 
# 1079 "/usr/include/math.h" 3



 
# 1098 "/usr/include/math.h" 3

# 1114 "/usr/include/math.h" 3

# 1130 "/usr/include/math.h" 3

# 1146 "/usr/include/math.h" 3

# 1162 "/usr/include/math.h" 3

# 1178 "/usr/include/math.h" 3

# 1194 "/usr/include/math.h" 3







 











 
# 1242 "/usr/include/math.h" 3

 





 
# 1468 "/usr/include/math.h" 3

# 1557 "/usr/include/math.h" 3




# 192 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 2 3



     
# 244 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3




# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math_common_define.h" 1 3












 







# 34 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math_common_define.h" 3

# 42 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math_common_define.h" 3







# 62 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math_common_define.h" 3

# 249 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 2 3

# 267 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3









         
# 292 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

# 307 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

# 342 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

         

# 379 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3






















            extern int fpclassifyf    ( float              __x ) ;

            extern int fpclassify     ( double   __x ) ;

            extern int fpclassifyd    ( double             __x ) ;
            extern int fpclassifyl    ( long double        __x ) ;

            extern int isinff         ( float              __x ) ;

            extern int isinf          ( double   __x ) ;

            extern int isinfd         ( double             __x ) ;
            extern int isinfl         ( long double        __x ) ;

            extern int isnanf         ( float              __x ) ;

            extern int isnan          ( double   __x ) ;

            extern int isnand         ( double             __x ) ;
            extern int isnanl         ( long double        __x ) ;

            extern int isnormalf      ( float              __x ) ;

            extern int isnormal       ( double   __x ) ;

            extern int isnormald      ( double             __x ) ;
            extern int isnormall      ( long double        __x ) ;

            extern int isfinitef      ( float              __x ) ;

            extern int isfinite       ( double   __x ) ;

            extern int isfinited      ( double             __x ) ;
            extern int isfinitel      ( long double        __x ) ;

            extern int finitef        ( float              __x ) ;

            extern int finite         ( double             __x ) ;

            extern int finited        ( double             __x ) ;
            extern int finitel        ( long double        __x ) ;

            extern int signbitf       ( float              __x ) ;

            extern int signbit        ( double             __x ) ;

            extern int signbitd       ( double             __x ) ;
            extern int signbitl       ( long double        __x ) ;



            extern int __fpclassifyf  ( float              __x ) ;
            extern int __fpclassify   ( double   __x ) ;
            extern int __fpclassifyd  ( double             __x ) ;
            extern int __fpclassifyl  ( long double        __x ) ;


        extern int __isinff       ( float              __x ) ;
        extern int __isinf        ( double   __x ) ;
        extern int __isinfd       ( double             __x ) ;
        extern int __isinfl       ( long double        __x ) ;

        extern int __isnanf       ( float              __x ) ;
        extern int __isnan        ( double   __x ) ;
        extern int __isnand       ( double             __x ) ;
        extern int __isnanl       ( long double        __x ) ;

        extern int __isnormalf    ( float              __x ) ;
        extern int __isnormal     ( double   __x ) ;
        extern int __isnormald    ( double             __x ) ;
        extern int __isnormall    ( long double        __x ) ;

        extern int __isfinitef    ( float              __x ) ;
        extern int __isfinite     ( double   __x ) ;
        extern int __isfinited    ( double             __x ) ;
        extern int __isfinitel    ( long double        __x ) ;

        extern int __finitef      ( float              __x ) ;
        extern int __finite       ( double             __x ) ;
        extern int __finited      ( double             __x ) ;
        extern int __finitel      ( long double        __x ) ;

        extern int __signbitf     ( float              __x ) ;
        extern int __signbit      ( double             __x ) ;
        extern int __signbitd     ( double             __x ) ;
        extern int __signbitl     ( long double        __x ) ;

# 498 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3




# 523 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

# 548 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

         

        extern int isgreaterf( float __xf, float __yf );

        extern int isgreater( double __xd, double __yd );

        extern int isgreaterl( long double __xl, long double __yl );
        extern int __isgreaterf( float __xf, float __yf );
        extern int __isgreater( double __xd, double __yd );
        extern int __isgreaterl( long double __xl, long double __yl );

        extern int isgreaterequalf( float __xf, float __yf );

        extern int isgreaterequal( double __xd, double __yd );

        extern int isgreaterequall( long double __xl, long double __yl );
        extern int __isgreaterequalf( float __xf, float __yf );
        extern int __isgreaterequal( double __xd, double __yd );
        extern int __isgreaterequall( long double __xl, long double __yl );

        extern int islessf( float __xf, float __yf );

        extern int isless( double __xd, double __yd );

        extern int islessl( long double __xl, long double __yl );
        extern int __islessf( float __xf, float __yf );
        extern int __isless( double __xd, double __yd );
        extern int __islessl( long double __xl, long double __yl );

        int islessequalf( float __xf, float __yf );

        extern int islessequal( double __xd, double __yd );

        extern int islessequall( long double __xl, long double __yl );
        extern int __islessequalf( float __xf, float __yf );
        extern int __islessequal( double __xd, double __yd );
        extern int __islessequall( long double __xl, long double __yl );

        extern int islessgreaterf( float __xf, float __yf );

        extern int islessgreater( double __xd, double __yd );

        extern int islessgreaterl( long double __xl, long double __yl );
        extern int __islessgreaterf( float __xf, float __yf );
        extern int __islessgreater( double __xd, double __yd );
        extern int __islessgreaterl( long double __xl, long double __yl );

        extern int isunorderedf( float __xf, float __yf );

        extern int isunordered( double __xd, double __yd );

        extern int isunorderedl( long double __xl, long double __yl );
        extern int __isunorderedf( float __xf, float __yf );
        extern int __isunordered( double __xd, double __yd );
        extern int __isunorderedl( long double __xl, long double __yl );

# 611 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3


# 621 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3



         

         

# 637 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

# 647 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

         

# 658 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3













         









# 687 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

        





 



































         
















# 755 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3









         












# 784 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

         

# 795 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3


         
        extern double    gamma( double __x );
        extern float     gammaf( float __x );
         
        extern double    lgamma_r(double __x, int *__signgam);
        extern float     lgammaf_r( float __x, int *__signgam );


        extern double    gamma_r( double __x, int *__signgam );
        extern float     gammaf_r( float __x, int *__signgam );






         





















# 849 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

         



















         

# 878 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

# 888 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

         

# 902 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

# 969 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

# 1013 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3






# 1039 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3



         

         










        typedef struct ____exception {
            int        type;
            const char *name;
            double     arg1;
            double     arg2;
            double     retval;
        } ___exception;

# 1075 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

        typedef struct ____exceptionf {
            int        type;
            const char *name;
            float      arg1;
            float      arg2;
            float      retval;
        } ___exceptionf;

        typedef struct ____exceptionl {
            int         type;
            const char  *name;
            long double arg1;
            long double arg2;
            long double retval;
        } ___exceptionl;




        extern int  matherrf( struct ____exceptionf *__e );
        extern int  matherrl( struct ____exceptionl *__e );

        















 

        typedef int (  *___pmatherr )( struct ____exception  *__e );
        typedef int (  *___pmatherrf )( struct ____exceptionf *__e );
        typedef int (  *___pmatherrl )( struct ____exceptionl *__e );

        extern ___pmatherr   __libm_setusermatherr( ___pmatherr  __user_matherr );
        extern ___pmatherrf  __libm_setusermatherrf( ___pmatherrf __user_matherrf );
        extern ___pmatherrl  __libm_setusermatherrl( ___pmatherrl __user_matherrl );

         







# 1139 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3


            typedef enum ___LIB_VERSIONIMF_TYPE {
                 _IEEE_ = -1     
                ,_SVID_          
                ,_XOPEN_         
                ,_POSIX_LIBIMF_  
                ,_ISOC_          
            } _LIB_VERSIONIMF_TYPE;




        extern _LIB_VERSIONIMF_TYPE  _LIB_VERSIONIMF;
# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math_common_undefine.h" 1 3












 










# 1154 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 2 3

# 14 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmath.h" 2



 







 



 
# 97 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmath.h"

# 167 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmath.h"

static inline PetscReal PetscSignReal(PetscReal a)
{
  return (PetscReal)((a < (PetscReal)0) ? -1 : ((a > (PetscReal)0) ? 1 : 0));
}

# 180 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmath.h"


extern __attribute__((visibility("default"))) MPI_Datatype MPIU___FLOAT128 ;














 
# 207 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmath.h"



 
# 309 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmath.h"

# 355 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmath.h"

# 381 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmath.h"



 
extern __attribute__((visibility("default"))) PetscComplex PETSC_i;





 
static inline PetscComplex PetscCMPLX(PetscReal x, PetscReal y)
{





  { 





 
    union
    {
      PetscComplex z;
      PetscReal    f[2];
    } uz;

    uz.f[0] = x;
    uz.f[1] = y;
    return uz.z;
  }

}





    






extern __attribute__((visibility("default"))) MPI_Datatype MPIU___COMPLEX128 ;




  








 
# 454 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmath.h"





 
# 557 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmath.h"






 
typedef enum {
  PETSC_SCALAR_DOUBLE,
  PETSC_SCALAR_SINGLE,
  PETSC_SCALAR_LONG_DOUBLE,
  PETSC_SCALAR_HALF
} PetscScalarPrecision;

 




















 



















 






















 






















 























 
















 
















 
# 726 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmath.h"




















 


 

# 760 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmath.h"



 




# 776 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmath.h"

# 802 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmath.h"




extern __attribute__((visibility("default"))) PetscBool  PetscIsInfReal(PetscReal);
extern __attribute__((visibility("default"))) PetscBool  PetscIsNanReal(PetscReal);
extern __attribute__((visibility("default"))) PetscBool  PetscIsNormalReal(PetscReal);
static inline PetscBool PetscIsInfOrNanReal(PetscReal v)
{
  return PetscIsInfReal(v) || PetscIsNanReal(v) ? PETSC_TRUE : PETSC_FALSE;
}
static inline PetscBool PetscIsInfScalar(PetscScalar v)
{
  return PetscIsInfReal(fabs(v));
}
static inline PetscBool PetscIsNanScalar(PetscScalar v)
{
  return PetscIsNanReal(fabs(v));
}
static inline PetscBool PetscIsInfOrNanScalar(PetscScalar v)
{
  return PetscIsInfOrNanReal(fabs(v));
}
static inline PetscBool PetscIsNormalScalar(PetscScalar v)
{
  return PetscIsNormalReal(fabs(v));
}

extern __attribute__((visibility("default"))) PetscBool PetscIsCloseAtTol(PetscReal, PetscReal, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscBool PetscEqualReal(PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscBool PetscEqualScalar(PetscScalar, PetscScalar);




 

typedef PetscScalar MatScalar;
typedef PetscReal   MatReal;

struct petsc_mpiu_2scalar {
  PetscScalar a, b;
};
extern __attribute__((visibility("default"))) MPI_Datatype MPIU_2SCALAR ;

 
struct petsc_mpiu_real_int {
  PetscReal v;
  PetscInt  i;
};

struct petsc_mpiu_scalar_int {
  PetscScalar v;
  PetscInt    i;
};

extern __attribute__((visibility("default"))) MPI_Datatype MPIU_REAL_INT ;
extern __attribute__((visibility("default"))) MPI_Datatype MPIU_SCALAR_INT ;

# 879 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmath.h"
extern __attribute__((visibility("default"))) MPI_Datatype MPI_4INT;
extern __attribute__((visibility("default"))) MPI_Datatype MPIU_4INT;

static inline PetscInt PetscPowInt(PetscInt base, PetscInt power)
{
  PetscInt result = 1;
  while (power) {
    if (power & 1) result *= base;
    power >>= 1;
    base *= base;
  }
  return result;
}

static inline PetscInt64 PetscPowInt64(PetscInt base, PetscInt power)
{
  PetscInt64 result = 1;
  while (power) {
    if (power & 1) result *= base;
    power >>= 1;
    base *= base;
  }
  return result;
}

static inline PetscReal PetscPowRealInt(PetscReal base, PetscInt power)
{
  PetscReal result = 1;
  if (power < 0) {
    power = -power;
    base  = ((PetscReal)1) / base;
  }
  while (power) {
    if (power & 1) result *= base;
    power >>= 1;
    base *= base;
  }
  return result;
}

static inline PetscScalar PetscPowScalarInt(PetscScalar base, PetscInt power)
{
  PetscScalar result = (PetscReal)1;
  if (power < 0) {
    power = -power;
    base  = ((PetscReal)1) / base;
  }
  while (power) {
    if (power & 1) result *= base;
    power >>= 1;
    base *= base;
  }
  return result;
}

static inline PetscScalar PetscPowScalarReal(PetscScalar base, PetscReal power)
{
  PetscScalar cpower = power;
  return pow(base, cpower);
}


























 



























 



















 




extern __attribute__((visibility("default"))) PetscErrorCode PetscLinearRegression(PetscInt, const PetscReal[], const PetscReal[], PetscReal *, PetscReal *);
# 207 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h" 2

extern __attribute__((visibility("default"))) const char *const PetscCopyModes[];














 


 










 














 













 



















 
extern __attribute__((visibility("default"))) MPI_Comm PETSC_COMM_WORLD;











 













 
extern __attribute__((visibility("default"))) PetscMPIInt PETSC_MPI_THREAD_REQUIRED;

extern __attribute__((visibility("default"))) PetscBool PetscBeganMPI;
extern __attribute__((visibility("default"))) PetscBool PetscErrorHandlingInitialized;
extern __attribute__((visibility("default"))) PetscBool PetscInitializeCalled;
extern __attribute__((visibility("default"))) PetscBool PetscFinalizeCalled;
extern __attribute__((visibility("default"))) PetscBool PetscViennaCLSynchronize;

extern __attribute__((visibility("default"))) PetscErrorCode PetscSetHelpVersionFunctions(PetscErrorCode (*)(MPI_Comm), PetscErrorCode (*)(MPI_Comm));
extern __attribute__((visibility("default"))) PetscErrorCode PetscCommDuplicate(MPI_Comm, MPI_Comm *, int *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCommDestroy(MPI_Comm *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCommGetComm(MPI_Comm, MPI_Comm *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCommRestoreComm(MPI_Comm, MPI_Comm *);









































 

























 


















 


























 
































 
























 























 























 

























 

























 



























 




























 






























 






























 
































 
































 


































 


































 



















 

























 






















 























 
























 

























 


























 




























 


extern __attribute__((visibility("default"))) PetscErrorCode PetscMallocA(int, PetscBool, int, const char *, const char *, size_t, void *, ...);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFreeA(int, int, const char *, const char *, void *, ...);
extern __attribute__((visibility("default")))                PetscErrorCode (*PetscTrMalloc)(size_t, PetscBool, int, const char[], const char[], void **);
extern __attribute__((visibility("default")))                PetscErrorCode (*PetscTrFree)(void *, int, const char[], const char[]);
extern __attribute__((visibility("default")))                PetscErrorCode (*PetscTrRealloc)(size_t, int, const char[], const char[], void **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMallocSetCoalesce(PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMallocSet(PetscErrorCode (*)(size_t, PetscBool, int, const char[], const char[], void **), PetscErrorCode (*)(void *, int, const char[], const char[]), PetscErrorCode (*)(size_t, int, const char[], const char[], void **));
extern __attribute__((visibility("default"))) PetscErrorCode PetscMallocClear(void);



 
extern __attribute__((visibility("default"))) PetscErrorCode PetscMallocSetDRAM(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMallocResetDRAM(void);
# 1078 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h"






 
extern __attribute__((visibility("default"))) PetscErrorCode PetscMallocDump(FILE *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMallocView(FILE *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMallocGetCurrentUsage(PetscLogDouble *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMallocGetMaximumUsage(PetscLogDouble *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMallocPushMaximumUsage(int);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMallocPopMaximumUsage(int, PetscLogDouble *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMallocSetDebug(PetscBool, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMallocGetDebug(PetscBool *, PetscBool *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMallocValidate(int, const char[], const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMallocViewSet(PetscLogDouble);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMallocViewGet(PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMallocLogRequestedSizeSet(PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMallocLogRequestedSizeGet(PetscBool *);

extern __attribute__((visibility("default"))) const char *const PetscDataTypes[];
extern __attribute__((visibility("default"))) PetscErrorCode    PetscDataTypeToMPIDataType(PetscDataType, MPI_Datatype *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscMPIDataTypeToPetscDataType(MPI_Datatype, PetscDataType *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscDataTypeGetSize(PetscDataType, size_t *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscDataTypeFromString(const char *, PetscDataType *, PetscBool *);





 
extern __attribute__((visibility("default"))) PetscErrorCode PetscMemcmp(const void *, const void *, size_t, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStrlen(const char[], size_t *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStrToArray(const char[], char, int *, char ***);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStrToArrayDestroy(int, char **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStrcmp(const char[], const char[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStrgrt(const char[], const char[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStrcasecmp(const char[], const char[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStrncmp(const char[], const char[], size_t, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStrcpy(char[], const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStrcat(char[], const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStrlcat(char[], const char[], size_t);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStrncpy(char[], const char[], size_t);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStrchr(const char[], char, char *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStrtolower(char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStrtoupper(char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStrrchr(const char[], char, char *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStrstr(const char[], const char[], char *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStrrstr(const char[], const char[], char *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStrendswith(const char[], const char[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStrbeginswith(const char[], const char[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStrendswithwhich(const char[], const char *const *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStrallocpy(const char[], char *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStrArrayallocpy(const char *const *, char ***);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStrArrayDestroy(char ***);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStrNArrayallocpy(PetscInt, const char *const *, char ***);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStrNArrayDestroy(PetscInt, char ***);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStrreplace(MPI_Comm, const char[], char[], size_t);

extern __attribute__((visibility("default"))) void PetscStrcmpNoError(const char[], const char[], PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscTokenCreate(const char[], const char, PetscToken *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscTokenFind(PetscToken, char *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscTokenDestroy(PetscToken *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscStrInList(const char[], const char[], char, PetscBool *);
extern __attribute__((visibility("default"))) const char    *PetscBasename(const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscEListFind(PetscInt, const char *const *, const char *, PetscInt *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscEnumFind(const char *const *, const char *, PetscEnum *, PetscBool *);



 
extern __attribute__((visibility("default"))) MPI_Op MPIU_MAXSUM_OP;
# 1162 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h"
extern __attribute__((visibility("default"))) MPI_Op         Petsc_Garbage_SetIntersectOp;
extern __attribute__((visibility("default"))) PetscErrorCode PetscMaxSum(MPI_Comm, const PetscInt[], PetscInt *, PetscInt *);












 
extern __attribute__((visibility("default"))) MPI_Op MPIU_SUM___FP16___FLOAT128;

extern __attribute__((visibility("default"))) PetscErrorCode PetscMaxSum(MPI_Comm, const PetscInt[], PetscInt *, PetscInt *);

extern __attribute__((visibility("default"))) PetscErrorCode MPIULong_Send(void *, PetscInt, MPI_Datatype, PetscMPIInt, PetscMPIInt, MPI_Comm) ;
extern __attribute__((visibility("default"))) PetscErrorCode MPIULong_Recv(void *, PetscInt, MPI_Datatype, PetscMPIInt, PetscMPIInt, MPI_Comm) ;

extern __attribute__((visibility("default"))) const char *const PetscFileModes[];



 
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscerror.h" 1


 










 








 


# 41 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscerror.h"

# 55 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscerror.h"











# 77 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscerror.h"

# 87 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscerror.h"





























 










 
extern __attribute__((visibility("default"))) PetscMPIInt PETSC_MPI_ERROR_CLASS;
extern __attribute__((visibility("default"))) PetscMPIInt PETSC_MPI_ERROR_CODE;






















 


























 























 






























 





























 






























 



























 









































































 






























 

# 462 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscerror.h"



















 



extern __attribute__((visibility("default"))) void PetscMPIErrorString(PetscMPIInt, char *);

















































 
# 555 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscerror.h"




















 



























































 
# 654 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscerror.h"




















 





















 

extern __attribute__((visibility("default"))) PetscBool petscwaitonerrorflg;
extern __attribute__((visibility("default"))) PetscBool petscindebugger;





















 
# 740 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscerror.h"

# 794 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscerror.h"

































































 
# 869 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscerror.h"




















 



























 
# 929 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscerror.h"












 
typedef enum {
  PETSC_ERROR_INITIAL = 0,
  PETSC_ERROR_REPEAT  = 1,
  PETSC_ERROR_IN_CXX  = 2
} PetscErrorType;




extern __attribute__((visibility("default"))) PetscErrorCode
PetscError(MPI_Comm, int, const char *, const char *, PetscErrorCode, PetscErrorType, const char *, ...) __attribute__((__cold__)) __attribute__((format(printf, 7, 8)));

extern __attribute__((visibility("default"))) PetscErrorCode PetscErrorPrintfInitialize(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscErrorMessage(int, const char *[], char **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscTraceBackErrorHandler(MPI_Comm, int, const char *, const char *, PetscErrorCode, PetscErrorType, const char *, void *) __attribute__((__cold__));
extern __attribute__((visibility("default"))) PetscErrorCode PetscIgnoreErrorHandler(MPI_Comm, int, const char *, const char *, PetscErrorCode, PetscErrorType, const char *, void *) __attribute__((__cold__));
extern __attribute__((visibility("default"))) PetscErrorCode PetscEmacsClientErrorHandler(MPI_Comm, int, const char *, const char *, PetscErrorCode, PetscErrorType, const char *, void *) __attribute__((__cold__));
extern __attribute__((visibility("default"))) PetscErrorCode PetscMPIAbortErrorHandler(MPI_Comm, int, const char *, const char *, PetscErrorCode, PetscErrorType, const char *, void *) __attribute__((__cold__));
extern __attribute__((visibility("default"))) PetscErrorCode PetscAbortErrorHandler(MPI_Comm, int, const char *, const char *, PetscErrorCode, PetscErrorType, const char *, void *) __attribute__((__cold__));
extern __attribute__((visibility("default"))) PetscErrorCode PetscAttachDebuggerErrorHandler(MPI_Comm, int, const char *, const char *, PetscErrorCode, PetscErrorType, const char *, void *) __attribute__((__cold__));
extern __attribute__((visibility("default"))) PetscErrorCode PetscReturnErrorHandler(MPI_Comm, int, const char *, const char *, PetscErrorCode, PetscErrorType, const char *, void *) __attribute__((__cold__));
extern __attribute__((visibility("default"))) PetscErrorCode PetscPushErrorHandler(PetscErrorCode (*handler)(MPI_Comm, int, const char *, const char *, PetscErrorCode, PetscErrorType, const char *, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPopErrorHandler(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSignalHandlerDefault(int, void *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPushSignalHandler(PetscErrorCode (*)(int, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPopSignalHandler(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCheckPointerSetIntensity(PetscInt);
extern __attribute__((visibility("default"))) void           PetscSignalSegvCheckPointerOrMpi(void);
__attribute__((deprecated)) static inline void PetscSignalSegvCheckPointer(void)
{
  PetscSignalSegvCheckPointerOrMpi();
}

































 
extern __attribute__((visibility("default"))) PetscErrorCode (*PetscErrorPrintf)(const char[], ...) __attribute__((format(printf, 1, 2)));









 
typedef enum {
  PETSC_FP_TRAP_OFF      = 0,
  PETSC_FP_TRAP_INDIV    = 1,
  PETSC_FP_TRAP_FLTOPERR = 2,
  PETSC_FP_TRAP_FLTOVF   = 4,
  PETSC_FP_TRAP_FLTUND   = 8,
  PETSC_FP_TRAP_FLTDIV   = 16,
  PETSC_FP_TRAP_FLTINEX  = 32
} PetscFPTrap;

extern __attribute__((visibility("default"))) PetscErrorCode PetscSetFPTrap(PetscFPTrap);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFPTrapPush(PetscFPTrap);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFPTrapPop(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDetermineInitialFPTrap(void);



 

# 1051 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscerror.h"
typedef struct {
  char Silence_empty_struct_has_size_0_in_C_size_1_in_Cpp;
} PetscStack;


# 1075 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscerror.h"

# 1486 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscerror.h"





  



















 
# 1518 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscerror.h"

  



















 
# 1548 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscerror.h"

# 1190 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h" 2

extern __attribute__((visibility("default"))) PetscBool   PetscCIEnabled;                     
extern __attribute__((visibility("default"))) PetscBool   PetscCIEnabledPortableErrorOutput;  
extern __attribute__((visibility("default"))) const char *PetscCIFilename(const char *);
extern __attribute__((visibility("default"))) int         PetscCILinenumber(int);


extern __attribute__((visibility("default"))) PetscClassId   PETSC_LARGEST_CLASSID;
extern __attribute__((visibility("default"))) PetscClassId   PETSC_OBJECT_CLASSID;
extern __attribute__((visibility("default"))) PetscErrorCode PetscClassIdRegister(const char[], PetscClassId *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectGetId(PetscObject, PetscObjectId *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectCompareId(PetscObject, PetscObjectId, PetscBool *);



 
extern __attribute__((visibility("default"))) PetscErrorCode PetscMemoryGetCurrentUsage(PetscLogDouble *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMemoryGetMaximumUsage(PetscLogDouble *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMemorySetGetMaximumUsage(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMemoryTrace(const char[]);

extern __attribute__((visibility("default"))) PetscErrorCode PetscSleep(PetscReal);



 
extern __attribute__((visibility("default"))) PetscErrorCode PetscInitialize(int *, char ***, const char[], const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscInitializeNoPointers(int, char **, const char[], const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscInitializeNoArguments(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscInitialized(PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFinalized(PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFinalize(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscInitializeFortran(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGetArgs(int *, char ***);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGetArguments(char ***);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFreeArguments(char **);

extern __attribute__((visibility("default"))) PetscErrorCode PetscEnd(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSysInitializePackage(void);

extern __attribute__((visibility("default"))) PetscErrorCode PetscPythonInitialize(const char[], const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPythonFinalize(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPythonPrintError(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPythonMonitorSet(PetscObject, const char[]);

extern __attribute__((visibility("default"))) PetscErrorCode PetscMonitorCompare(PetscErrorCode (*)(void), void *, PetscErrorCode (*)(void **), PetscErrorCode (*)(void), void *, PetscErrorCode (*)(void **), PetscBool *);




 
 typedef void (**PetscVoidStarFunction)(void);
 typedef void (*PetscVoidFunction)(void);
 typedef PetscErrorCode (*PetscErrorCodeFunction)(void);



 
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectDestroy(PetscObject *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectGetComm(PetscObject, MPI_Comm *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectGetClassId(PetscObject, PetscClassId *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectGetClassName(PetscObject, const char *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectGetType(PetscObject, const char *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectSetName(PetscObject, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectGetName(PetscObject, const char *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectSetTabLevel(PetscObject, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectGetTabLevel(PetscObject, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectIncrementTabLevel(PetscObject, PetscObject, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectReference(PetscObject);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectGetReference(PetscObject, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectDereference(PetscObject);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectGetNewTag(PetscObject, PetscMPIInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectCompose(PetscObject, const char[], PetscObject);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectRemoveReference(PetscObject, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectQuery(PetscObject, const char[], PetscObject *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectComposeFunction_Private(PetscObject, const char[], void (*)(void));

extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectSetFromOptions(PetscObject);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectSetUp(PetscObject);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectSetPrintedOptions(PetscObject);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectInheritPrintedOptions(PetscObject, PetscObject);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCommGetNewTag(MPI_Comm, PetscMPIInt *);

# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscviewertypes.h" 1


 




 








 
typedef struct _p_PetscViewer *PetscViewer;

# 1274 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscoptions.h" 1


 



# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h" 1





 
# 8 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscoptions.h" 2


 


typedef struct _n_PetscOptions *PetscOptions;
extern __attribute__((visibility("default"))) PetscErrorCode     PetscOptionsCreate(PetscOptions *);
extern __attribute__((visibility("default"))) PetscErrorCode     PetscOptionsPush(PetscOptions);
extern __attribute__((visibility("default"))) PetscErrorCode     PetscOptionsPop(void);
extern __attribute__((visibility("default"))) PetscErrorCode     PetscOptionsDestroy(PetscOptions *);
extern __attribute__((visibility("default"))) PetscErrorCode     PetscOptionsCreateDefault(void);
extern __attribute__((visibility("default"))) PetscErrorCode     PetscOptionsDestroyDefault(void);

extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsHasHelp(PetscOptions, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsHasName(PetscOptions, const char[], const char[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsGetBool(PetscOptions, const char[], const char[], PetscBool *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsGetInt(PetscOptions, const char[], const char[], PetscInt *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsGetEnum(PetscOptions, const char[], const char[], const char *const *, PetscEnum *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsGetEList(PetscOptions, const char[], const char[], const char *const *, PetscInt, PetscInt *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsGetReal(PetscOptions, const char[], const char[], PetscReal *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsGetScalar(PetscOptions, const char[], const char[], PetscScalar *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsGetString(PetscOptions, const char[], const char[], char[], size_t, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsGetBoolArray(PetscOptions, const char[], const char[], PetscBool[], PetscInt *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsGetEnumArray(PetscOptions, const char[], const char[], const char *const *, PetscEnum *, PetscInt *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsGetIntArray(PetscOptions, const char[], const char[], PetscInt[], PetscInt *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsGetRealArray(PetscOptions, const char[], const char[], PetscReal[], PetscInt *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsGetScalarArray(PetscOptions, const char[], const char[], PetscScalar[], PetscInt *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsGetStringArray(PetscOptions, const char[], const char[], char *[], PetscInt *, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsValidKey(const char[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsSetAlias(PetscOptions, const char[], const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsSetValue(PetscOptions, const char[], const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsClearValue(PetscOptions, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsFindPair(PetscOptions, const char[], const char[], const char *[], PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsGetAll(PetscOptions, char *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsAllUsed(PetscOptions, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsUsed(PetscOptions, const char[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsLeft(PetscOptions);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsLeftGet(PetscOptions, PetscInt *, char ***, char ***);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsLeftRestore(PetscOptions, PetscInt *, char ***, char ***);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsView(PetscOptions, PetscViewer);

extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsReject(PetscOptions, const char[], const char[], const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsInsert(PetscOptions, int *, char ***, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsInsertFile(MPI_Comm, PetscOptions, const char[], PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsInsertFileYAML(MPI_Comm, PetscOptions, const char[], PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsInsertString(PetscOptions, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsInsertStringYAML(PetscOptions, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsInsertArgs(PetscOptions, int, char **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsClear(PetscOptions);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsPrefixPush(PetscOptions, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsPrefixPop(PetscOptions);

extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsGetenv(MPI_Comm, const char[], char[], size_t, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsStringToBool(const char[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsStringToInt(const char[], PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsStringToReal(const char[], PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsStringToScalar(const char[], PetscScalar *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsMonitorSet(PetscErrorCode (*)(const char[], const char[], void *), void *, PetscErrorCode (*)(void **));
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsMonitorDefault(const char[], const char[], void *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectSetOptions(PetscObject, PetscOptions);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectGetOptions(PetscObject, PetscOptions *);

extern __attribute__((visibility("default"))) PetscBool PetscOptionsPublish;







 
typedef enum {
  OPTION_INT,
  OPTION_BOOL,
  OPTION_REAL,
  OPTION_FLIST,
  OPTION_STRING,
  OPTION_REAL_ARRAY,
  OPTION_SCALAR_ARRAY,
  OPTION_HEAD,
  OPTION_INT_ARRAY,
  OPTION_ELIST,
  OPTION_BOOL_ARRAY,
  OPTION_STRING_ARRAY
} PetscOptionType;
typedef struct _n_PetscOptionItem *PetscOptionItem;
struct _n_PetscOptionItem {
  char              *option;
  char              *text;
  void              *data;   
  PetscFunctionList  flist;  
  const char *const *list;   
  char               nlist;  
  char              *man;
  size_t             arraylength;  
  PetscBool          set;          
  PetscOptionType    type;
  PetscOptionItem    next;
  char              *pman;
  void              *edata;
};

typedef struct _p_PetscOptionItems {
  PetscInt        count;
  PetscOptionItem next;
  char           *prefix, *pprefix;
  char           *title;
  MPI_Comm        comm;
  PetscBool       printhelp, changedmethod, alreadyprinted;
  PetscObject     object;
  PetscOptions    options;
} PetscOptionItems;

# 132 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscoptions.h"
  















































 
# 188 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscoptions.h"

  





























 
# 227 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscoptions.h"

  
























 
# 260 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscoptions.h"

extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsBegin_Private(PetscOptionItems *, MPI_Comm, const char[], const char[], const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectOptionsBegin_Private(PetscObject, PetscOptionItems *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsEnd_Private(PetscOptionItems *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsHeadBegin(PetscOptionItems *, const char[]);

# 315 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscoptions.h"
  























 







  




























 







# 407 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscoptions.h"

extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsEnum_Private(PetscOptionItems *, const char[], const char[], const char[], const char *const *, PetscEnum, PetscEnum *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsInt_Private(PetscOptionItems *, const char[], const char[], const char[], PetscInt, PetscInt *, PetscBool *, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsReal_Private(PetscOptionItems *, const char[], const char[], const char[], PetscReal, PetscReal *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsScalar_Private(PetscOptionItems *, const char[], const char[], const char[], PetscScalar, PetscScalar *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsName_Private(PetscOptionItems *, const char[], const char[], const char[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsString_Private(PetscOptionItems *, const char[], const char[], const char[], const char[], char *, size_t, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsBool_Private(PetscOptionItems *, const char[], const char[], const char[], PetscBool, PetscBool *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsBoolGroupBegin_Private(PetscOptionItems *, const char[], const char[], const char[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsBoolGroup_Private(PetscOptionItems *, const char[], const char[], const char[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsBoolGroupEnd_Private(PetscOptionItems *, const char[], const char[], const char[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsFList_Private(PetscOptionItems *, const char[], const char[], const char[], PetscFunctionList, const char[], char[], size_t, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsEList_Private(PetscOptionItems *, const char[], const char[], const char[], const char *const *, PetscInt, const char[], PetscInt *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsRealArray_Private(PetscOptionItems *, const char[], const char[], const char[], PetscReal[], PetscInt *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsScalarArray_Private(PetscOptionItems *, const char[], const char[], const char[], PetscScalar[], PetscInt *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsIntArray_Private(PetscOptionItems *, const char[], const char[], const char[], PetscInt[], PetscInt *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsStringArray_Private(PetscOptionItems *, const char[], const char[], const char[], char *[], PetscInt *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsBoolArray_Private(PetscOptionItems *, const char[], const char[], const char[], PetscBool[], PetscInt *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsEnumArray_Private(PetscOptionItems *, const char[], const char[], const char[], const char *const *, PetscEnum[], PetscInt *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsDeprecated_Private(PetscOptionItems *, const char[], const char[], const char[], const char[]);

extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsSAWsDestroy(void);

extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectAddOptionsHandler(PetscObject, PetscErrorCode (*)(PetscObject, PetscOptionItems *, void *), PetscErrorCode (*)(PetscObject, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectProcessOptionsHandlers(PetscObject, PetscOptionItems *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectDestroyOptionsHandlers(PetscObject);

extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsLeftError(void);
# 1275 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h" 2

extern __attribute__((visibility("default"))) PetscErrorCode PetscMallocTraceSet(PetscViewer, PetscBool, PetscLogDouble);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMallocTraceGet(PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectsListGetGlobalNumbering(MPI_Comm, PetscInt, PetscObject *, PetscInt *, PetscInt *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscMemoryView(PetscViewer, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectPrintClassNamePrefixType(PetscObject, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectView(PetscObject, PetscViewer);

extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectQueryFunction_Private(PetscObject, const char[], void (**)(void));
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectSetOptionsPrefix(PetscObject, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectAppendOptionsPrefix(PetscObject, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectPrependOptionsPrefix(PetscObject, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectGetOptionsPrefix(PetscObject, const char *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectChangeTypeName(PetscObject, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectRegisterDestroy(PetscObject);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectRegisterDestroyAll(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectViewFromOptions(PetscObject, PetscObject, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectName(PetscObject);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectTypeCompare(PetscObject, const char[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectObjectTypeCompare(PetscObject, PetscObject, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectBaseTypeCompare(PetscObject, const char[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectTypeCompareAny(PetscObject, PetscBool *, const char[], ...);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectBaseTypeCompareAny(PetscObject, PetscBool *, const char[], ...);
extern __attribute__((visibility("default"))) PetscErrorCode PetscRegisterFinalize(PetscErrorCode (*)(void));
extern __attribute__((visibility("default"))) PetscErrorCode PetscRegisterFinalizeAll(void);

# 1326 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h"



extern __attribute__((visibility("default"))) PetscErrorCode PetscDLOpen(const char[], PetscDLMode, PetscDLHandle *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDLClose(PetscDLHandle *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDLSym(PetscDLHandle, const char[], void **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDLAddr(void (*)(void), char **);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDemangleSymbol(const char *, char **);





extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectsDump(FILE *, PetscBool);

extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectListDestroy(PetscObjectList *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectListFind(PetscObjectList, const char[], PetscObject *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectListReverseFind(PetscObjectList, PetscObject, char **, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectListAdd(PetscObjectList *, const char[], PetscObject);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectListRemoveReference(PetscObjectList *, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscObjectListDuplicate(PetscObjectList, PetscObjectList *);




 


extern __attribute__((visibility("default"))) PetscErrorCode PetscFunctionListAdd_Private(PetscFunctionList *, const char[], void (*)(void));
extern __attribute__((visibility("default"))) PetscErrorCode PetscFunctionListDestroy(PetscFunctionList *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFunctionListClear(PetscFunctionList);

extern __attribute__((visibility("default"))) PetscErrorCode PetscFunctionListFind_Private(PetscFunctionList, const char[], void (**)(void));
extern __attribute__((visibility("default"))) PetscErrorCode PetscFunctionListPrintTypes(MPI_Comm, FILE *, const char[], const char[], const char[], const char[], PetscFunctionList, const char[], const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFunctionListDuplicate(PetscFunctionList, PetscFunctionList *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFunctionListView(PetscFunctionList, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFunctionListGet(PetscFunctionList, const char ***, int *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFunctionListPrintNonEmpty(PetscFunctionList);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFunctionListPrintAll(void);

extern __attribute__((visibility("default"))) PetscDLLibrary PetscDLLibrariesLoaded;
extern __attribute__((visibility("default"))) PetscErrorCode PetscDLLibraryAppend(MPI_Comm, PetscDLLibrary *, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDLLibraryPrepend(MPI_Comm, PetscDLLibrary *, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDLLibrarySym(MPI_Comm, PetscDLLibrary *, const char[], const char[], void **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDLLibraryPrintPath(PetscDLLibrary);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDLLibraryRetrieve(MPI_Comm, const char[], char *, size_t, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDLLibraryOpen(MPI_Comm, const char[], PetscDLLibrary *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDLLibraryClose(PetscDLLibrary);



 
extern __attribute__((visibility("default"))) PetscErrorCode PetscSplitOwnership(MPI_Comm, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSplitOwnershipBlock(MPI_Comm, PetscInt, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSplitOwnershipEqual(MPI_Comm, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSequentialPhaseBegin(MPI_Comm, PetscMPIInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSequentialPhaseEnd(MPI_Comm, PetscMPIInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscBarrier(PetscObject);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMPIDump(FILE *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGlobalMinMaxInt(MPI_Comm, const PetscInt[2], PetscInt[2]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGlobalMinMaxReal(MPI_Comm, const PetscReal[2], PetscReal[2]);















 

































 
extern __attribute__((visibility("default"))) PetscErrorCode (*PetscHelpPrintf)(MPI_Comm, const char[], ...) __attribute__((format(printf, 2, 3)));



 
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsclog.h" 1


 



# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsctime.h" 1



 





 

extern __attribute__((visibility("default"))) PetscErrorCode PetscGetCPUTime(PetscLogDouble *);

 
extern __attribute__((visibility("default"))) PetscLogDouble petsc_BaseTime;





























 





























 


























 

static inline PetscErrorCode PetscTime(PetscLogDouble *v)
{
  *v = MPI_Wtime();
  return 0;
}

static inline PetscErrorCode PetscTimeSubtract(PetscLogDouble *v)
{
  *v -= MPI_Wtime();
  return 0;
}

static inline PetscErrorCode PetscTimeAdd(PetscLogDouble *v)
{
  *v += MPI_Wtime();
  return 0;
}

# 9 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsclog.h" 2

 

 
extern __attribute__((visibility("default"))) PetscErrorCode PetscInfo_Private(const char[], PetscObject, const char[], ...) __attribute__((format(printf, 3, 4)));






# 29 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsclog.h"














 
typedef enum {
  PETSC_INFO_COMM_ALL       = -1,
  PETSC_INFO_COMM_NO_SELF   = 0,
  PETSC_INFO_COMM_ONLY_SELF = 1
} PetscInfoCommFlag;

extern __attribute__((visibility("default"))) const char *const PetscInfoCommFlags[];
extern __attribute__((visibility("default"))) PetscErrorCode    PetscInfoDeactivateClass(PetscClassId);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscInfoActivateClass(PetscClassId);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscInfoEnabled(PetscClassId, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscInfoAllow(PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscInfoSetFile(const char[], const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscInfoGetFile(char **, FILE **);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscInfoSetClasses(PetscBool, PetscInt, const char *const *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscInfoGetClass(const char *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscInfoGetInfo(PetscBool *, PetscBool *, PetscBool *, PetscBool *, PetscInfoCommFlag *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscInfoProcessClass(const char[], PetscInt, const PetscClassId[]);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscInfoSetFilterCommSelf(PetscInfoCommFlag);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscInfoSetFromOptions(PetscOptions);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscInfoDestroy(void);
extern __attribute__((visibility("default"))) PetscBool         PetscLogPrintInfo;  








 
typedef int PetscLogEvent;







 
typedef int PetscLogStage;


extern __attribute__((visibility("default"))) PetscLogEvent PETSC_LARGEST_EVENT;

 
extern __attribute__((visibility("default"))) PetscLogDouble petsc_TotalFlops;
extern __attribute__((visibility("default"))) PetscLogDouble petsc_tmp_flops;






 
typedef struct _n_PetscIntStack *PetscIntStack;

 






 
typedef struct {
  char        *name;     
  PetscClassId classid;  
} PetscClassRegInfo;

typedef struct {
  PetscClassId   id;            
  int            creations;     
  int            destructions;  
  PetscLogDouble mem;           
  PetscLogDouble descMem;       
} PetscClassPerfInfo;

typedef struct _n_PetscClassRegLog *PetscClassRegLog;
struct _n_PetscClassRegLog {
  int                numClasses;  
  int                maxClasses;  
  PetscClassRegInfo *classInfo;   
};

typedef struct _n_PetscClassPerfLog *PetscClassPerfLog;
struct _n_PetscClassPerfLog {
  int                 numClasses;  
  int                 maxClasses;  
  PetscClassPerfInfo *classInfo;   
};
 








 
typedef struct {
  char        *name;        
  PetscClassId classid;     
  PetscBool    collective;  




} PetscEventRegInfo;

typedef struct {
  int            id;                       
  PetscBool      active;                   
  PetscBool      visible;                  
  int            depth;                    
  int            count;                    
  PetscLogDouble flops, flops2, flopsTmp;  
  PetscLogDouble time, time2, timeTmp;     
  PetscLogDouble syncTime;                 
  PetscLogDouble dof[8];                   
  PetscLogDouble errors[8];                
  PetscLogDouble numMessages;              
  PetscLogDouble messageLength;            
  PetscLogDouble numReductions;            
  PetscLogDouble memIncrease;              
  PetscLogDouble mallocIncrease;           
  PetscLogDouble mallocSpace;              
  PetscLogDouble mallocIncreaseEvent;      
# 180 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsclog.h"
} PetscEventPerfInfo;

typedef struct _n_PetscEventRegLog *PetscEventRegLog;
struct _n_PetscEventRegLog {
  int                numEvents;  
  int                maxEvents;  
  PetscEventRegInfo *eventInfo;  
};

typedef struct _n_PetscEventPerfLog *PetscEventPerfLog;
struct _n_PetscEventPerfLog {
  int                 numEvents;  
  int                 maxEvents;  
  PetscEventPerfInfo *eventInfo;  
};
 




 
typedef struct _PetscStageInfo {
  char              *name;      
  PetscBool          used;      
  PetscEventPerfInfo perfInfo;  
  PetscEventPerfLog  eventLog;  
  PetscClassPerfLog  classLog;  
} PetscStageInfo;

typedef struct _n_PetscStageLog *PetscStageLog;
struct _n_PetscStageLog {
  int              numStages;  
  int              maxStages;  
  PetscIntStack    stack;      
  int              curStage;   
  PetscStageInfo  *stageInfo;  
  PetscEventRegLog eventLog;   
  PetscClassRegLog classLog;   
};
 

__attribute__((deprecated)) static inline PetscErrorCode PetscLogObjectParent(PetscObject o, PetscObject p)
{
  (void)o;
  (void)p;
  return 0;
}

__attribute__((deprecated)) static inline PetscErrorCode PetscLogObjectMemory(PetscObject o, PetscLogDouble m)
{
  (void)o;
  (void)m;
  return 0;
}


extern __attribute__((visibility("default"))) PetscStageLog  petsc_stageLog;
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogGetStageLog(PetscStageLog *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStageLogGetCurrent(PetscStageLog, int *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStageLogGetEventPerfLog(PetscStageLog, int, PetscEventPerfLog *);

  










 




















 

static inline PetscErrorCode PetscLogFlops(PetscLogDouble n)
{
  ;



  petsc_TotalFlops += 1.0 * n;
  return 0;
}

extern __attribute__((visibility("default"))) PetscErrorCode PetscGetFlops(PetscLogDouble *);






extern __attribute__((visibility("default"))) PetscErrorCode (*PetscLogPLB)(PetscLogEvent, int, PetscObject, PetscObject, PetscObject, PetscObject);
extern __attribute__((visibility("default"))) PetscErrorCode (*PetscLogPLE)(PetscLogEvent, int, PetscObject, PetscObject, PetscObject, PetscObject);
extern __attribute__((visibility("default"))) PetscErrorCode (*PetscLogPHC)(PetscObject);
extern __attribute__((visibility("default"))) PetscErrorCode (*PetscLogPHD)(PetscObject);




extern __attribute__((visibility("default"))) PetscErrorCode PetscLogObjectState(PetscObject, const char[], ...) __attribute__((format(printf, 2, 3)));

 
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogDefaultBegin(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogAllBegin(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogNestedBegin(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogTraceBegin(FILE *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogActions(PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogObjects(PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogSetThreshold(PetscLogDouble, PetscLogDouble *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogSet(PetscErrorCode (*)(int, int, PetscObject, PetscObject, PetscObject, PetscObject), PetscErrorCode (*)(int, int, PetscObject, PetscObject, PetscObject, PetscObject));

 
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogView(PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogViewFromOptions(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogDump(const char[]);

 
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogIsActive(PetscBool *);

 
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogStageRegister(const char[], PetscLogStage *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogStagePush(PetscLogStage);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogStagePop(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogStageSetActive(PetscLogStage, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogStageGetActive(PetscLogStage, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogStageSetVisible(PetscLogStage, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogStageGetVisible(PetscLogStage, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogStageGetId(const char[], PetscLogStage *);

 
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogEventRegister(const char[], PetscClassId, PetscLogEvent *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogEventSetCollective(PetscLogEvent, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogEventIncludeClass(PetscClassId);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogEventExcludeClass(PetscClassId);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogEventActivate(PetscLogEvent);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogEventDeactivate(PetscLogEvent);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogEventDeactivatePush(PetscLogEvent);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogEventDeactivatePop(PetscLogEvent);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogEventSetActiveAll(PetscLogEvent, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogEventActivateClass(PetscClassId);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogEventDeactivateClass(PetscClassId);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogEventGetId(const char[], PetscLogEvent *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogEventGetPerfInfo(int, PetscLogEvent, PetscEventPerfInfo *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogEventSetDof(PetscLogEvent, PetscInt, PetscLogDouble);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogEventSetError(PetscLogEvent, PetscInt, PetscLogDouble);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogPushCurrentEvent_Internal(PetscLogEvent);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogPopCurrentEvent_Internal(void);

 
extern __attribute__((visibility("default"))) PetscLogDouble petsc_irecv_ct;
extern __attribute__((visibility("default"))) PetscLogDouble petsc_isend_ct;
extern __attribute__((visibility("default"))) PetscLogDouble petsc_recv_ct;
extern __attribute__((visibility("default"))) PetscLogDouble petsc_send_ct;
extern __attribute__((visibility("default"))) PetscLogDouble petsc_irecv_len;
extern __attribute__((visibility("default"))) PetscLogDouble petsc_isend_len;
extern __attribute__((visibility("default"))) PetscLogDouble petsc_recv_len;
extern __attribute__((visibility("default"))) PetscLogDouble petsc_send_len;
extern __attribute__((visibility("default"))) PetscLogDouble petsc_allreduce_ct;
extern __attribute__((visibility("default"))) PetscLogDouble petsc_gather_ct;
extern __attribute__((visibility("default"))) PetscLogDouble petsc_scatter_ct;
extern __attribute__((visibility("default"))) PetscLogDouble petsc_wait_ct;
extern __attribute__((visibility("default"))) PetscLogDouble petsc_wait_any_ct;
extern __attribute__((visibility("default"))) PetscLogDouble petsc_wait_all_ct;
extern __attribute__((visibility("default"))) PetscLogDouble petsc_sum_of_waits_ct;

extern __attribute__((visibility("default"))) PetscBool PetscLogMemory;

extern __attribute__((visibility("default"))) PetscBool      PetscLogSyncOn;  
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogEventSynchronize(PetscLogEvent, MPI_Comm);










extern __attribute__((visibility("default"))) PetscErrorCode PetscLogEventGetFlops(PetscLogEvent, PetscLogDouble *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLogEventZeroFlops(PetscLogEvent);

  











 



 
static inline PetscErrorCode PetscMPITypeSize(PetscInt count, MPI_Datatype type, PetscLogDouble *length)
{
  PetscMPIInt typesize;

  if (type == ((MPI_Datatype)0x0c000000)) return 0;
  do { PetscMPIInt _7_errorcode; char _7_errorstring[2 * 512]; ; ; { _7_errorcode = MPI_Type_size(type, &typesize); } do { PetscErrorCode ierr_memq_ = PetscMallocValidate(405, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsclog.h"); if (__builtin_expect(! !(ierr_memq_), 0)) return PetscError(((MPI_Comm)0x44000001), 405, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsclog.h", ierr_memq_, PETSC_ERROR_REPEAT, " "); } while (0); if (__builtin_expect(! !(_7_errorcode), 0)) { PetscMPIErrorString(_7_errorcode, (char *)_7_errorstring); do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 405, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsclog.h", 98, PETSC_ERROR_INITIAL, "MPI error %d %s", (int)_7_errorcode, _7_errorstring); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } } while (0);
  *length += (PetscLogDouble)(count * typesize);
  return 0;
}

static inline PetscErrorCode PetscMPITypeSizeComm(MPI_Comm comm, const PetscMPIInt *counts, MPI_Datatype type, PetscLogDouble *length)
{
  PetscMPIInt typesize, size, p;

  if (type == ((MPI_Datatype)0x0c000000)) return 0;
  do { PetscMPIInt _7_errorcode; char _7_errorstring[2 * 512]; ; ; { _7_errorcode = MPI_Comm_size(comm, &size); } do { PetscErrorCode ierr_memq_ = PetscMallocValidate(415, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsclog.h"); if (__builtin_expect(! !(ierr_memq_), 0)) return PetscError(((MPI_Comm)0x44000001), 415, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsclog.h", ierr_memq_, PETSC_ERROR_REPEAT, " "); } while (0); if (__builtin_expect(! !(_7_errorcode), 0)) { PetscMPIErrorString(_7_errorcode, (char *)_7_errorstring); do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 415, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsclog.h", 98, PETSC_ERROR_INITIAL, "MPI error %d %s", (int)_7_errorcode, _7_errorstring); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } } while (0);
  do { PetscMPIInt _7_errorcode; char _7_errorstring[2 * 512]; ; ; { _7_errorcode = MPI_Type_size(type, &typesize); } do { PetscErrorCode ierr_memq_ = PetscMallocValidate(416, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsclog.h"); if (__builtin_expect(! !(ierr_memq_), 0)) return PetscError(((MPI_Comm)0x44000001), 416, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsclog.h", ierr_memq_, PETSC_ERROR_REPEAT, " "); } while (0); if (__builtin_expect(! !(_7_errorcode), 0)) { PetscMPIErrorString(_7_errorcode, (char *)_7_errorstring); do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 416, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsclog.h", 98, PETSC_ERROR_INITIAL, "MPI error %d %s", (int)_7_errorcode, _7_errorstring); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } } while (0);
  for (p = 0; p < size; ++p) *length += (PetscLogDouble)(counts[p] * typesize);
  return 0;
}

static inline PetscErrorCode PetscMPITypeSizeCount(PetscInt n, const PetscMPIInt *counts, MPI_Datatype type, PetscLogDouble *length)
{
  PetscMPIInt typesize, p;

  if (type == ((MPI_Datatype)0x0c000000)) return 0;
  do { PetscMPIInt _7_errorcode; char _7_errorstring[2 * 512]; ; ; { _7_errorcode = MPI_Type_size(type, &typesize); } do { PetscErrorCode ierr_memq_ = PetscMallocValidate(426, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsclog.h"); if (__builtin_expect(! !(ierr_memq_), 0)) return PetscError(((MPI_Comm)0x44000001), 426, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsclog.h", ierr_memq_, PETSC_ERROR_REPEAT, " "); } while (0); if (__builtin_expect(! !(_7_errorcode), 0)) { PetscMPIErrorString(_7_errorcode, (char *)_7_errorstring); do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 426, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsclog.h", 98, PETSC_ERROR_INITIAL, "MPI error %d %s", (int)_7_errorcode, _7_errorstring); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } } while (0);
  for (p = 0; p < n; ++p) *length += (PetscLogDouble)(counts[p] * typesize);
  return 0;
}



 
static inline int PetscMPIParallelComm(MPI_Comm comm)
{
  PetscMPIInt size;
  MPI_Comm_size(comm, &size);
  return size > 1;
}


















































































# 531 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsclog.h"

# 598 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsclog.h"

# 683 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsclog.h"

# 693 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsclog.h"



# 711 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsclog.h"

# 718 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsclog.h"

# 727 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsclog.h"

 
extern __attribute__((visibility("default"))) PetscBool PetscPreLoadingUsed;  
extern __attribute__((visibility("default"))) PetscBool PetscPreLoadingOn;    

# 1444 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h" 2



 
extern __attribute__((visibility("default"))) PetscErrorCode PetscFixFilename(const char[], char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFOpen(MPI_Comm, const char[], const char[], FILE **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFClose(MPI_Comm, FILE *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFPrintf(MPI_Comm, FILE *, const char[], ...) __attribute__((format(printf, 3, 4)));
extern __attribute__((visibility("default"))) PetscErrorCode PetscPrintf(MPI_Comm, const char[], ...) __attribute__((format(printf, 2, 3)));
extern __attribute__((visibility("default"))) PetscErrorCode PetscSNPrintf(char *, size_t, const char[], ...) __attribute__((format(printf, 3, 4)));
extern __attribute__((visibility("default"))) PetscErrorCode PetscSNPrintfCount(char *, size_t, const char[], size_t *, ...) __attribute__((format(printf, 3, 5)));
extern __attribute__((visibility("default"))) PetscErrorCode PetscFormatRealArray(char[], size_t, const char *, PetscInt, const PetscReal[]);

extern __attribute__((visibility("default"))) PetscErrorCode PetscErrorPrintfDefault(const char[], ...) __attribute__((format(printf, 1, 2)));
extern __attribute__((visibility("default"))) PetscErrorCode PetscErrorPrintfNone(const char[], ...) __attribute__((format(printf, 1, 2)));
extern __attribute__((visibility("default"))) PetscErrorCode PetscHelpPrintfDefault(MPI_Comm, const char[], ...) __attribute__((format(printf, 2, 3)));

extern __attribute__((visibility("default"))) PetscErrorCode PetscFormatConvertGetSize(const char *, size_t *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFormatConvert(const char *, char *);


extern __attribute__((visibility("default"))) PetscErrorCode PetscPOpen(MPI_Comm, const char[], const char[], const char[], FILE **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPClose(MPI_Comm, FILE *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPOpenSetMachine(const char[]);


extern __attribute__((visibility("default"))) PetscErrorCode PetscSynchronizedPrintf(MPI_Comm, const char[], ...) __attribute__((format(printf, 2, 3)));
extern __attribute__((visibility("default"))) PetscErrorCode PetscSynchronizedFPrintf(MPI_Comm, FILE *, const char[], ...) __attribute__((format(printf, 3, 4)));
extern __attribute__((visibility("default"))) PetscErrorCode PetscSynchronizedFlush(MPI_Comm, FILE *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSynchronizedFGets(MPI_Comm, FILE *, size_t, char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStartMatlab(MPI_Comm, const char[], const char[], FILE **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStartJava(MPI_Comm, const char[], const char[], FILE **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGetPetscDir(const char *[]);

extern __attribute__((visibility("default"))) PetscClassId   PETSC_CONTAINER_CLASSID;
extern __attribute__((visibility("default"))) PetscErrorCode PetscContainerGetPointer(PetscContainer, void **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscContainerSetPointer(PetscContainer, void *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscContainerDestroy(PetscContainer *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscContainerCreate(MPI_Comm, PetscContainer *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscContainerSetUserDestroy(PetscContainer, PetscErrorCode (*)(void *));
extern __attribute__((visibility("default"))) PetscErrorCode PetscContainerUserDestroyDefault(void *);



 
extern __attribute__((visibility("default"))) PetscMPIInt    PetscGlobalRank;
extern __attribute__((visibility("default"))) PetscMPIInt    PetscGlobalSize;
extern __attribute__((visibility("default"))) PetscErrorCode PetscIntView(PetscInt, const PetscInt[], PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscRealView(PetscInt, const PetscReal[], PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscScalarView(PetscInt, const PetscScalar[], PetscViewer);

# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 1 3































 





# 50 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3


 







 
# 69 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 80 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 87 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 103 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3





 
# 1496 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h" 2
# 1 "/usr/include/string.h" 1 3















 



 




# 1 "/usr/include/bits/libc-header-start.h" 1 3
















 







 










 
# 44 "/usr/include/bits/libc-header-start.h" 3


 
# 53 "/usr/include/bits/libc-header-start.h" 3


 
# 62 "/usr/include/bits/libc-header-start.h" 3


 
# 27 "/usr/include/string.h" 2 3



 
# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 1 3































 





# 50 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3


 







 
# 69 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 80 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 87 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 103 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3





 
# 34 "/usr/include/string.h" 2 3

 






 
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
		     size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

 
extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



 

extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
		      int __c, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



 
extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

 
extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

 
# 91 "/usr/include/string.h" 3
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 119 "/usr/include/string.h" 3


 
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
 
extern char *strncpy (char *__restrict __dest,
		      const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

 
extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
 
extern char *strncat (char *__restrict __dest, const char *__restrict __src,
		      size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

 
extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
 
extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

 
extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
 
extern size_t strxfrm (char *__restrict __dest,
		       const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


 
# 1 "/usr/include/bits/types/locale_t.h" 1 3
















 




# 1 "/usr/include/bits/types/__locale_t.h" 1 3

















 







 

struct __locale_struct
{
   
  struct __locale_data *__locales[13];  

   
  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;

   
  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;

# 23 "/usr/include/bits/types/locale_t.h" 2 3

typedef __locale_t locale_t;

# 154 "/usr/include/string.h" 2 3

 
extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

 
extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
			 locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));




 
extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));




 

extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));


# 201 "/usr/include/string.h" 3

 
# 226 "/usr/include/string.h" 3
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));

 
# 253 "/usr/include/string.h" 3
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 270 "/usr/include/string.h" 3


 
extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

 
extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
 
# 303 "/usr/include/string.h" 3
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

 
# 330 "/usr/include/string.h" 3
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



 
extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


 
extern char *__strtok_r (char *__restrict __s,
			 const char *__restrict __delim,
			 char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
		       char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));


# 364 "/usr/include/string.h" 3

# 382 "/usr/include/string.h" 3


 
extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));



 
extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));



 
extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));







 


 

extern int strerror_r (int __errnum, char *__buf, size_t __buflen) __asm__ ("" "__xpg_strerror_r") __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 425 "/usr/include/string.h" 3


 
extern char *strerror_l (int __errnum, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));


# 1 "/usr/include/strings.h" 1 3















 




# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 1 3































 





# 50 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3


 







 
# 69 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 80 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 87 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 103 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3





 
# 24 "/usr/include/strings.h" 2 3

 







 
extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

 
extern void bcopy (const void *__src, void *__dest, size_t __n)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

 
extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

 
# 68 "/usr/include/strings.h" 3
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


 
# 96 "/usr/include/strings.h" 3
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





 
extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



 

extern int ffsl (long int __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


 
extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

 
extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


 


 
extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


 
extern int strncasecmp_l (const char *__s1, const char *__s2,
			  size_t __n, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));




# 147 "/usr/include/strings.h" 3

# 433 "/usr/include/string.h" 2 3


 
extern void explicit_bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


 
extern char *strsep (char **__restrict __stringp,
		     const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



 
extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));

 
extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


 
extern char *__stpncpy (char *__restrict __dest,
			const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
		      const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


# 491 "/usr/include/string.h" 3

# 498 "/usr/include/string.h" 3



# 1497 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h" 2
# 1 "/usr/include/stdlib.h" 1 3















 



 



# 1 "/usr/include/bits/libc-header-start.h" 1 3
















 







 










 
# 44 "/usr/include/bits/libc-header-start.h" 3


 
# 53 "/usr/include/bits/libc-header-start.h" 3


 
# 62 "/usr/include/bits/libc-header-start.h" 3


 
# 26 "/usr/include/stdlib.h" 2 3

 
# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 1 3































 





# 50 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3


 







 
# 69 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 80 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 87 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 103 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3





 
# 32 "/usr/include/stdlib.h" 2 3






 
# 1 "/usr/include/bits/waitflags.h" 1 3
















 






 



 
# 35 "/usr/include/bits/waitflags.h" 3

# 40 "/usr/include/stdlib.h" 2 3
# 1 "/usr/include/bits/waitstatus.h" 1 3
















 






 


 


 


 


 


 



 



 




 


 
# 41 "/usr/include/stdlib.h" 2 3

 
# 53 "/usr/include/stdlib.h" 3

 


 
typedef struct
  {
    int quot;			 
    int rem;			 
  } div_t;

 

typedef struct
  {
    long int quot;		 
    long int rem;		 
  } ldiv_t;




 
__extension__ typedef struct
  {
    long long int quot;		 
    long long int rem;		 
  } lldiv_t;




 




 




 

extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;


 
extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
 
extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
 
extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;


 
__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;


 
extern double strtod (const char *__restrict __nptr,
		      char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


 
extern float strtof (const char *__restrict __nptr,
		     char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
			    char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


 











































 
extern long int strtol (const char *__restrict __nptr,
			char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
 
extern unsigned long int strtoul (const char *__restrict __nptr,
				  char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


 
__extension__
extern long long int strtoq (const char *__restrict __nptr,
			     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
 
__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
				       char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



 
__extension__
extern long long int strtoll (const char *__restrict __nptr,
			      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
 
__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
					char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


 
# 224 "/usr/include/stdlib.h" 3












































# 357 "/usr/include/stdlib.h" 3


# 379 "/usr/include/stdlib.h" 3





 
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) ;

 
extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



# 1 "/usr/include/sys/types.h" 1 3















 



 












typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;
# 57 "/usr/include/sys/types.h" 3


typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;



# 95 "/usr/include/sys/types.h" 3


typedef __pid_t pid_t;





typedef __id_t id_t;










typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;



# 1 "/usr/include/bits/types/clock_t.h" 1 3





 
typedef __clock_t clock_t;

# 127 "/usr/include/sys/types.h" 2 3
# 1 "/usr/include/bits/types/clockid_t.h" 1 3





 
typedef __clockid_t clockid_t;

# 129 "/usr/include/sys/types.h" 2 3
# 1 "/usr/include/bits/types/time_t.h" 1 3





 
typedef __time_t time_t;

# 130 "/usr/include/sys/types.h" 2 3
# 1 "/usr/include/bits/types/timer_t.h" 1 3





 
typedef __timer_t timer_t;

# 131 "/usr/include/sys/types.h" 2 3

# 142 "/usr/include/sys/types.h" 3

# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 1 3































 





# 50 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3


 







 
# 69 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 80 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 87 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 103 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3





 
# 145 "/usr/include/sys/types.h" 2 3


 
typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;


 



 
typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));





 




 
# 1 "/usr/include/endian.h" 1 3















 












 





 
# 1 "/usr/include/bits/endian.h" 1 3
 





# 37 "/usr/include/endian.h" 2 3


 




# 50 "/usr/include/endian.h" 3









 
# 1 "/usr/include/bits/byteswap.h" 1 3
















 











 



static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}

 




static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}

 
# 68 "/usr/include/bits/byteswap.h" 3

__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}

# 61 "/usr/include/endian.h" 2 3
# 1 "/usr/include/bits/uintn-identity.h" 1 3
















 












 

static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}

# 62 "/usr/include/endian.h" 2 3

















# 96 "/usr/include/endian.h" 3

# 177 "/usr/include/sys/types.h" 2 3

 
# 1 "/usr/include/sys/select.h" 1 3
















 

 






 


 
# 1 "/usr/include/bits/select.h" 1 3















 





# 1 "/usr/include/bits/wordsize.h" 1 3
 

# 10 "/usr/include/bits/wordsize.h" 3



 
# 23 "/usr/include/bits/select.h" 2 3










# 43 "/usr/include/bits/select.h" 3

# 57 "/usr/include/bits/select.h" 3

# 31 "/usr/include/sys/select.h" 2 3

 
# 1 "/usr/include/bits/types/sigset_t.h" 1 3



# 1 "/usr/include/bits/types/__sigset_t.h" 1 3




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;

# 5 "/usr/include/bits/types/sigset_t.h" 2 3

 
typedef __sigset_t sigset_t;

# 34 "/usr/include/sys/select.h" 2 3

 
# 1 "/usr/include/bits/types/struct_timeval.h" 1 3






 
struct timeval
{
  __time_t tv_sec;		 
  __suseconds_t tv_usec;	 
};
# 38 "/usr/include/sys/select.h" 2 3
# 1 "/usr/include/bits/types/struct_timespec.h" 1 3
 






 
struct timespec
{
  __time_t tv_sec;		 
  __syscall_slong_t tv_nsec;	 
};

# 40 "/usr/include/sys/select.h" 2 3



typedef __suseconds_t suseconds_t;




 
typedef long int __fd_mask;

 

 




 
typedef struct
  {
    
 




    __fd_mask __fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];


  } fd_set;

 



 
typedef __fd_mask fd_mask;

 




 















 
extern int select (int __nfds, fd_set *__restrict __readfds,
		   fd_set *__restrict __writefds,
		   fd_set *__restrict __exceptfds,
		   struct timeval *__restrict __timeout);







 
extern int pselect (int __nfds, fd_set *__restrict __readfds,
		    fd_set *__restrict __writefds,
		    fd_set *__restrict __exceptfds,
		    const struct timespec *__restrict __timeout,
		    const __sigset_t *__restrict __sigmask);



 






# 180 "/usr/include/sys/types.h" 2 3





typedef __blksize_t blksize_t;



 


typedef __blkcnt_t blkcnt_t;	  



typedef __fsblkcnt_t fsblkcnt_t;  



typedef __fsfilcnt_t fsfilcnt_t;  
# 217 "/usr/include/sys/types.h" 3








 
# 1 "/usr/include/bits/pthreadtypes.h" 1 3
















 




 
# 1 "/usr/include/bits/thread-shared-types.h" 1 3
















 


























































 
# 1 "/usr/include/bits/pthreadtypes-arch.h" 1 3















 




# 1 "/usr/include/bits/wordsize.h" 1 3
 

# 10 "/usr/include/bits/wordsize.h" 3



 
# 22 "/usr/include/bits/pthreadtypes-arch.h" 2 3

# 49 "/usr/include/bits/pthreadtypes-arch.h" 3

 
# 61 "/usr/include/bits/pthreadtypes-arch.h" 3




struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;
  
 
  unsigned int __flags;
# 99 "/usr/include/bits/pthreadtypes-arch.h" 3
};






# 78 "/usr/include/bits/thread-shared-types.h" 2 3

 


typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 93 "/usr/include/bits/thread-shared-types.h" 3

 
# 117 "/usr/include/bits/thread-shared-types.h" 3

struct __pthread_mutex_s
{
  int __lock ;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;

  




















 
  int __kind;
  




  short __spins; short __elision;
  __pthread_list_t __list;
# 165 "/usr/include/bits/thread-shared-types.h" 3
  
};


 

struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __glibc_unused___g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};

# 24 "/usr/include/bits/pthreadtypes.h" 2 3


 
typedef unsigned long int pthread_t;



 
typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;



 
typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;


 
typedef unsigned int pthread_key_t;


 
typedef int  pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;




 
typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;




 
typedef volatile int pthread_spinlock_t;



 
typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;


# 228 "/usr/include/sys/types.h" 2 3




# 395 "/usr/include/stdlib.h" 2 3




 
 
extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));

 
extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));




 
extern char *initstate (unsigned int __seed, char *__statebuf,
			size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


 
extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





 

struct random_data
  {
    int32_t *fptr;		 
    int32_t *rptr;		 
    int32_t *state;		 
    int rand_type;		 
    int rand_deg;		 
    int rand_sep;		 
    int32_t *end_ptr;		 
  };

extern int random_r (struct random_data *__restrict __buf,
		     int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
			size_t __statelen,
			struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
		       struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




 
extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));
 
extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));


 
extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));




 

 
extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

 
extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

 
extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

 
extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




 
struct drand48_data
  {
    unsigned short int __x[3];	 
    unsigned short int __old_x[3];  
    unsigned short int __c;	 
    unsigned short int __init;	 
    __extension__ unsigned long long int __a;	
 
  };

 
extern int drand48_r (struct drand48_data *__restrict __buffer,
		      double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
		      struct drand48_data *__restrict __buffer,
		      double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

 
extern int lrand48_r (struct drand48_data *__restrict __buffer,
		      long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
		      struct drand48_data *__restrict __buffer,
		      long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

 
extern int mrand48_r (struct drand48_data *__restrict __buffer,
		      long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
		      struct drand48_data *__restrict __buffer,
		      long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

 
extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
		     struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
		      struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



 
extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;
 
extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;


 


 
extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));

# 561 "/usr/include/stdlib.h" 3

 
extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));

# 1 "/usr/include/alloca.h" 1 3















 






# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 1 3































 





# 50 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3


 







 
# 69 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 80 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 87 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 103 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3





 
# 25 "/usr/include/alloca.h" 2 3



 


 
extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));







# 567 "/usr/include/stdlib.h" 2 3




 
extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;



 
extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



 
extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;


 
extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));


 
extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


 




extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





 
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




 
extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));




 
extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));




 
extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



 
extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;

# 639 "/usr/include/stdlib.h" 3


 

 
extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




 
extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

 
extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





 
extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));









 
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));










 

extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 698 "/usr/include/stdlib.h" 3







 

extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 721 "/usr/include/stdlib.h" 3






 
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;


# 775 "/usr/include/stdlib.h" 3





 
extern int system (const char *__command) ;


# 790 "/usr/include/stdlib.h" 3






 
extern char *realpath (const char *__restrict __name,
		       char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) ;



 


typedef int (*__compar_fn_t) (const void *, const void *);

# 814 "/usr/include/stdlib.h" 3


 
extern void *bsearch (const void *__key, const void *__base,
		      size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;






 
extern void qsort (void *__base, size_t __nmemb, size_t __size,
		   __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));







 
extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;




 
 
extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
				    long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;






 



 
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
		   int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;



 
extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
		   int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;



 
extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;



 
extern char *qecvt (long double __value, int __ndigit,
		    int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
		    int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;



 
extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
		   int *__restrict __sign, char *__restrict __buf,
		   size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
		   int *__restrict __sign, char *__restrict __buf,
		   size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
		    int *__restrict __decpt, int *__restrict __sign,
		    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
		    int *__restrict __decpt, int *__restrict __sign,
		    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));




 
extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));

 
extern int mbtowc (wchar_t *__restrict __pwc,
		   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));

 
extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));


 
extern size_t mbstowcs (wchar_t *__restrict  __pwcs,
			const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));
 
extern size_t wcstombs (char *__restrict __s,
			const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__));






 
extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;









 
extern int getsubopt (char **__restrict __optionp,
		      char *const *__restrict __tokens,
		      char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;



 






# 984 "/usr/include/stdlib.h" 3

# 995 "/usr/include/stdlib.h" 3




 
extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));








# 1 "/usr/include/bits/stdlib-float.h" 1 3
















 





# 1011 "/usr/include/stdlib.h" 2 3

 
# 1019 "/usr/include/stdlib.h" 3



# 1498 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h" 2

# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/xmmintrin.h" 1 3



 



 







 
# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/mmintrin.h" 1 3



 



 












 











 
# 41 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/mmintrin.h" 3

# 49 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/mmintrin.h" 3





# 77 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/mmintrin.h" 3




typedef union __declspec(align(8)) __declspec(intrin_type) __m64 {
    


 
    unsigned __int64    m64_u64;
    float               m64_f32[2];
    __int8              m64_i8[8];
    __int16             m64_i16[4];
    __int32             m64_i32[2];
    __int64             m64_i64;
    unsigned __int8     m64_u8[8];
    unsigned __int16    m64_u16[4];
    unsigned __int32    m64_u32[2];

    


 
    __int64 __m;
} __m64;








# 192 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/mmintrin.h" 3

 
# 251 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/mmintrin.h" 3






# 18 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/xmmintrin.h" 2 3

# 25 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/xmmintrin.h" 3



# 55 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/xmmintrin.h" 3
   typedef struct __declspec(align(16)) __declspec(intrin_type) __m128 {
    float               m128_f32[4];
   } __m128;





 









# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 1 3































 





# 50 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3


 







 
# 69 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 80 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 87 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 103 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3





 
# 75 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/xmmintrin.h" 2 3
extern void*  _mm_malloc(size_t, size_t);
extern void   _mm_free(void *);


 
 
 
 
 
 
 
 
 
 




 
 
 
 
 
 
 
 
 
 
# 116 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/xmmintrin.h" 3


 
# 127 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/xmmintrin.h" 3

 
# 136 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/xmmintrin.h" 3

# 144 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/xmmintrin.h" 3































 
 
 

# 336 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/xmmintrin.h" 3

 
# 360 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/xmmintrin.h" 3


 
 
 

 
 
 
 
 
 
 
 
# 383 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/xmmintrin.h" 3


 
 
 
 
 
 
 
 
# 400 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/xmmintrin.h" 3

 
 
 
 
 
 
 
 





 
 
 
 
 
 
 
 





 
 
 
 
 
 
 
 
 




 
 
 
 
 
 
 
 




 
 
 
 
 
 
 
 
 











 
# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/emmintrin.h" 1 3



 



 




 
 
 



 












 


# 42 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/emmintrin.h" 3





 
# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/xmmintrin.h" 1 3



 



 

# 49 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/emmintrin.h" 2 3





typedef struct __declspec(align(16)) __declspec(intrin_type) __m128d {
    double              m128d_f64[2];
} __m128d;
typedef union  __declspec(align(16)) __declspec(intrin_type) __m128i {

     


 
     __int64             m128i_gcc_compatibility[2];

    


 
    __int8              m128i_i8[16];
    __int16             m128i_i16[8];
    __int32             m128i_i32[4];
    __int64             m128i_i64[2];
    unsigned __int8     m128i_u8[16];
    unsigned __int16    m128i_u16[8];
    unsigned __int32    m128i_u32[4];
    unsigned __int64    m128i_u64[2];

    


 
    char c[16];
} __m128i;



 
 
 






# 443 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/emmintrin.h" 3

 
















# 477 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/xmmintrin.h" 2 3


# 1501 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h" 2


























 
static inline PetscErrorCode PetscMemmove(void *a, const void *b, size_t n)
{
  ;
  if (n > 0) {
    do { if (__builtin_expect(! !(!(a)), 0)) do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 1532, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h", 85, PETSC_ERROR_INITIAL, "Trying to copy to null pointer"); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } while (0);
    do { if (__builtin_expect(! !(!(b)), 0)) do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 1533, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h", 85, PETSC_ERROR_INITIAL, "Trying to copy from a null pointer"); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } while (0);
  }
# 1550 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h"
  memmove((char *)(a), (char *)(b), n);

  return 0;
}





































 
static inline PetscErrorCode PetscMemcpy(void *a, const void *b, size_t n)
{
# 1603 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h"
  ;

  if (a != b && n > 0) {
# 1629 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h"
    memcpy((char *)(a), (char *)(b), n);

  }
  return 0;
}

























 
static inline PetscErrorCode PetscMemzero(void *a, size_t n)
{
  if (n > 0) {
# 1681 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h"
      memset((char *)a, 0, n);




  }
  return 0;
}



























 

























 
























 





















 
































 












 
# 1895 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h"







 
# 1910 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h"

 










 


extern __attribute__((visibility("default"))) PetscErrorCode MPIU_File_write_all(MPI_File, void *, PetscMPIInt, MPI_Datatype, MPI_Status *) ;
extern __attribute__((visibility("default"))) PetscErrorCode MPIU_File_read_all(MPI_File, void *, PetscMPIInt, MPI_Datatype, MPI_Status *) ;
extern __attribute__((visibility("default"))) PetscErrorCode MPIU_File_write_at(MPI_File, MPI_Offset, void *, PetscMPIInt, MPI_Datatype, MPI_Status *) ;
extern __attribute__((visibility("default"))) PetscErrorCode MPIU_File_read_at(MPI_File, MPI_Offset, void *, PetscMPIInt, MPI_Datatype, MPI_Status *) ;
extern __attribute__((visibility("default"))) PetscErrorCode MPIU_File_write_at_all(MPI_File, MPI_Offset, void *, PetscMPIInt, MPI_Datatype, MPI_Status *) ;
extern __attribute__((visibility("default"))) PetscErrorCode MPIU_File_read_at_all(MPI_File, MPI_Offset, void *, PetscMPIInt, MPI_Datatype, MPI_Status *) ;


 

 


 

























 
static inline PetscErrorCode PetscIntCast(PetscInt64 a, PetscInt *b)
{
  ;

  if (a > 2147483647) {
    *b = 0;
    do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 1971, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h", 63, PETSC_ERROR_INITIAL, "%" "l" "d" " is too big for PetscInt, you may need to ./configure using --with-64-bit-indices", a); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0);
  }

  *b = (PetscInt)(a);
  return 0;
}





















 
static inline PetscErrorCode PetscCountCast(PetscCount a, PetscInt *b)
{
  ;
  if (sizeof(PetscCount) > sizeof(PetscInt) && a > 2147483647) {
    *b = 0;
    do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 2004, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h", 63, PETSC_ERROR_INITIAL, "%" "td" " is too big for PetscInt, you may need to ./configure using --with-64-bit-indices", a); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0);
  }
  *b = (PetscInt)(a);
  return 0;
}





















 
static inline PetscErrorCode PetscBLASIntCast(PetscInt a, PetscBLASInt *b)
{
  ;
  *b = 0;
  if (0 && !0) {
    do { if (__builtin_expect(! !(!(a <= 2147483647)), 0)) do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 2036, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h", 63, PETSC_ERROR_INITIAL, "%" "d" " is too big for BLAS/LAPACK, which is restricted to 32 bit integers. Either you have an invalidly large integer error in your code or you must ./configure PETSc with --with-64-bit-blas-indices for the case you are running", a); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } while (0);
  }
  do { if (__builtin_expect(! !(!(a >= 0)), 0)) do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 2038, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h", 63, PETSC_ERROR_INITIAL, "Passing negative integer to BLAS/LAPACK routine"); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } while (0);
  *b = (PetscBLASInt)(a);
  return 0;
}


















 
static inline PetscErrorCode PetscCuBLASIntCast(PetscInt a, PetscCuBLASInt *b)
{
  ;
  *b = 0;
  if (0) do { if (__builtin_expect(! !(!(a <= 2147483647)), 0)) do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 2065, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h", 63, PETSC_ERROR_INITIAL, "%" "d" " is too big for cuBLAS, which is restricted to 32 bit integers.", a); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } while (0);
  do { if (__builtin_expect(! !(!(a >= 0)), 0)) do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 2066, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h", 63, PETSC_ERROR_INITIAL, "Passing negative integer to cuBLAS routine"); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } while (0);
  *b = (PetscCuBLASInt)(a);
  return 0;
}


















 
static inline PetscErrorCode PetscHipBLASIntCast(PetscInt a, PetscHipBLASInt *b)
{
  ;
  *b = 0;
  if (0) do { if (__builtin_expect(! !(!(a <= 2147483647)), 0)) do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 2093, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h", 63, PETSC_ERROR_INITIAL, "%" "d" " is too big for hipBLAS, which is restricted to 32 bit integers.", a); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } while (0);
  do { if (__builtin_expect(! !(!(a >= 0)), 0)) do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 2094, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h", 63, PETSC_ERROR_INITIAL, "Passing negative integer to hipBLAS routine"); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } while (0);
  *b = (PetscHipBLASInt)(a);
  return 0;
}


















 
static inline PetscErrorCode PetscMPIIntCast(PetscInt a, PetscMPIInt *b)
{
  ;
  *b = 0;
  if (0) do { if (__builtin_expect(! !(!(a <= 2147483647)), 0)) do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 2121, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h", 63, PETSC_ERROR_INITIAL, "%" "d" " is too big for MPI buffer length. We currently only support 32 bit integers", a); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } while (0);
  *b = (PetscMPIInt)(a);
  return 0;
}






























 
static inline PetscInt PetscRealIntMultTruncate(PetscReal a, PetscInt b)
{
  PetscInt64 r = (PetscInt64)(a * (PetscReal)b);
  if (r > 2147483647 - 100) r = 2147483647 - 100;
  return (PetscInt)r;
}




























 
static inline PetscInt PetscIntMultTruncate(PetscInt a, PetscInt b)
{
  PetscInt64 r = ((PetscInt64)(a)) * ((PetscInt64)(b));
  if (r > 2147483647 - 100) r = 2147483647 - 100;
  return (PetscInt)r;
}

























 
static inline PetscInt PetscIntSumTruncate(PetscInt a, PetscInt b)
{
  PetscInt64 r = ((PetscInt64)a) + ((PetscInt64)b);
  if (r > 2147483647 - 100) r = 2147483647 - 100;
  return (PetscInt)r;
}

























 
static inline PetscErrorCode PetscIntMultError(PetscInt a, PetscInt b, PetscInt *result)
{
  PetscInt64 r;

  ;
  r = ((PetscInt64)(a)) * ((PetscInt64)(b));

  do { if (__builtin_expect(! !(!(r <= 2147483647)), 0)) do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 2262, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h", 56, PETSC_ERROR_INITIAL, "Product of two integers %d %d overflow, either you have an invalidly large integer error in your code or you must ./configure PETSc with --with-64-bit-indices for the case you are running", a, b); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } while (0);

  if (result) *result = (PetscInt)r;
  return 0;
}






















 
static inline PetscErrorCode PetscIntSumError(PetscInt a, PetscInt b, PetscInt *result)
{
  PetscInt64 r;

  ;
  r = ((PetscInt64)a) + ((PetscInt64)b);

  do { if (__builtin_expect(! !(!(r <= 2147483647)), 0)) do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 2297, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h", 56, PETSC_ERROR_INITIAL, "Sum of two integers %d %d overflow, either you have an invalidly large integer error in your code or you must ./configure PETSc with --with-64-bit-indices for the case you are running", a, b); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } while (0);

  if (result) *result = (PetscInt)r;
  return 0;
}



 




# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/limits.h" 1 3












 

 





















 









# 1 "/sw/eb/sw/GCCcore/11.2.0/lib/gcc/x86_64-pc-linux-gnu/11.2.0/include/limits.h" 1 3





















 


 


 
# 201 "/sw/eb/sw/GCCcore/11.2.0/lib/gcc/x86_64-pc-linux-gnu/11.2.0/include/limits.h" 3

# 1 "/usr/include/limits.h" 1 3















 



 




# 1 "/usr/include/bits/libc-header-start.h" 1 3
















 







 










 
# 44 "/usr/include/bits/libc-header-start.h" 3


 
# 53 "/usr/include/bits/libc-header-start.h" 3


 
# 62 "/usr/include/bits/libc-header-start.h" 3


 
# 27 "/usr/include/limits.h" 2 3




 




 
# 114 "/usr/include/limits.h" 3



 



 







 
# 141 "/usr/include/limits.h" 3



 
# 180 "/usr/include/limits.h" 3


 
# 1 "/usr/include/bits/posix1_lim.h" 1 3















 





 




# 1 "/usr/include/bits/wordsize.h" 1 3
 

# 10 "/usr/include/bits/wordsize.h" 3



 
# 28 "/usr/include/bits/posix1_lim.h" 2 3

 

 


 


 


 






 



 


 


 


 



 


 


 


 


 






 












 


 



 


 


 


 


 


 


 


 



 


 


 


 






# 155 "/usr/include/bits/posix1_lim.h" 3

 



 
# 1 "/usr/include/bits/local_lim.h" 1 3
















 





 
# 36 "/usr/include/bits/local_lim.h" 3

 
# 1 "/usr/include/linux/limits.h" 1 3
 





# 18 "/usr/include/linux/limits.h" 3



# 39 "/usr/include/bits/local_lim.h" 2 3

 




 




 




 





 

 


 

 


 

 



 


 


 


 


 


 


 


 
# 162 "/usr/include/bits/posix1_lim.h" 2 3





 
# 174 "/usr/include/bits/posix1_lim.h" 3



 





# 184 "/usr/include/limits.h" 2 3


# 1 "/usr/include/bits/posix2_lim.h" 1 3















 



 





 


 


 


 



 



 


 



 



 





 

# 86 "/usr/include/bits/posix2_lim.h" 3

 


# 188 "/usr/include/limits.h" 2 3


# 204 "/sw/eb/sw/GCCcore/11.2.0/lib/gcc/x86_64-pc-linux-gnu/11.2.0/include/limits.h" 2 3


# 53 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/limits.h" 2 3



















# 84 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/limits.h" 3























# 114 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/limits.h" 3










# 134 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/limits.h" 3

# 2311 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h" 2

 





































 

extern __attribute__((visibility("default"))) PetscErrorCode PetscGetArchType(char[], size_t);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGetHostName(char[], size_t);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGetUserName(char[], size_t);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGetProgramName(char[], size_t);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSetProgramName(const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGetDate(char[], size_t);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGetVersion(char[], size_t);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGetVersionNumber(PetscInt *, PetscInt *, PetscInt *, PetscInt *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscSortedInt(PetscInt, const PetscInt[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortedInt64(PetscInt, const PetscInt64[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortedMPIInt(PetscInt, const PetscMPIInt[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortedReal(PetscInt, const PetscReal[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortInt(PetscInt, PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortInt64(PetscInt, PetscInt64[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortCount(PetscInt, PetscCount[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortReverseInt(PetscInt, PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortedRemoveDupsInt(PetscInt *, PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortedCheckDupsInt(PetscInt, const PetscInt[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortRemoveDupsInt(PetscInt *, PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCheckDupsInt(PetscInt, const PetscInt[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFindInt(PetscInt, PetscInt, const PetscInt[], PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFindMPIInt(PetscMPIInt, PetscInt, const PetscMPIInt[], PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortIntWithPermutation(PetscInt, const PetscInt[], PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortStrWithPermutation(PetscInt, const char *[], PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortIntWithArray(PetscInt, PetscInt[], PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortIntWithCountArray(PetscCount, PetscInt[], PetscCount[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortIntWithArrayPair(PetscInt, PetscInt[], PetscInt[], PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortIntWithIntCountArrayPair(PetscCount, PetscInt[], PetscInt[], PetscCount[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortMPIInt(PetscInt, PetscMPIInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortRemoveDupsMPIInt(PetscInt *, PetscMPIInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortMPIIntWithArray(PetscMPIInt, PetscMPIInt[], PetscMPIInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortMPIIntWithIntArray(PetscMPIInt, PetscMPIInt[], PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortIntWithScalarArray(PetscInt, PetscInt[], PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortIntWithDataArray(PetscInt, PetscInt[], void *, size_t, void *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortReal(PetscInt, PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortRealWithArrayInt(PetscInt, PetscReal[], PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortRealWithPermutation(PetscInt, const PetscReal[], PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortRemoveDupsReal(PetscInt *, PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFindReal(PetscReal, PetscInt, const PetscReal[], PetscReal, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortSplit(PetscInt, PetscInt, PetscScalar[], PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSortSplitReal(PetscInt, PetscInt, PetscReal[], PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscProcessTree(PetscInt, const PetscBool[], const PetscInt[], PetscInt *, PetscInt **, PetscInt **, PetscInt **, PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMergeIntArrayPair(PetscInt, const PetscInt[], const PetscInt[], PetscInt, const PetscInt[], const PetscInt[], PetscInt *, PetscInt **, PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMergeIntArray(PetscInt, const PetscInt[], PetscInt, const PetscInt[], PetscInt *, PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMergeMPIIntArray(PetscInt, const PetscMPIInt[], PetscInt, const PetscMPIInt[], PetscInt *, PetscMPIInt **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscParallelSortedInt(MPI_Comm, PetscInt, const PetscInt[], PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscTimSort(PetscInt, void *, size_t, int (*)(const void *, const void *, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscIntSortSemiOrdered(PetscInt, PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMPIIntSortSemiOrdered(PetscInt, PetscMPIInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscRealSortSemiOrdered(PetscInt, PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscTimSortWithArray(PetscInt, void *, size_t, void *, size_t, int (*)(const void *, const void *, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscIntSortSemiOrderedWithArray(PetscInt, PetscInt[], PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMPIIntSortSemiOrderedWithArray(PetscInt, PetscMPIInt[], PetscMPIInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscRealSortSemiOrderedWithArrayInt(PetscInt, PetscReal[], PetscInt[]);

extern __attribute__((visibility("default"))) PetscErrorCode PetscSetDisplay(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGetDisplay(char[], size_t);











 
typedef const char *PetscRandomType;
# 2430 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h"

 
extern __attribute__((visibility("default"))) PetscClassId PETSC_RANDOM_CLASSID;

extern __attribute__((visibility("default"))) PetscErrorCode PetscRandomInitializePackage(void);

 
extern __attribute__((visibility("default"))) PetscFunctionList PetscRandomList;

extern __attribute__((visibility("default"))) PetscErrorCode PetscRandomRegister(const char[], PetscErrorCode (*)(PetscRandom));
extern __attribute__((visibility("default"))) PetscErrorCode PetscRandomSetType(PetscRandom, PetscRandomType);
extern __attribute__((visibility("default"))) PetscErrorCode PetscRandomSetFromOptions(PetscRandom);
extern __attribute__((visibility("default"))) PetscErrorCode PetscRandomGetType(PetscRandom, PetscRandomType *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscRandomViewFromOptions(PetscRandom, PetscObject, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscRandomView(PetscRandom, PetscViewer);

extern __attribute__((visibility("default"))) PetscErrorCode PetscRandomCreate(MPI_Comm, PetscRandom *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscRandomGetValue(PetscRandom, PetscScalar *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscRandomGetValueReal(PetscRandom, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscRandomGetValues(PetscRandom, PetscInt, PetscScalar *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscRandomGetValuesReal(PetscRandom, PetscInt, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscRandomGetInterval(PetscRandom, PetscScalar *, PetscScalar *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscRandomSetInterval(PetscRandom, PetscScalar, PetscScalar);
extern __attribute__((visibility("default"))) PetscErrorCode PetscRandomSetSeed(PetscRandom, unsigned long);
extern __attribute__((visibility("default"))) PetscErrorCode PetscRandomGetSeed(PetscRandom, unsigned long *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscRandomSeed(PetscRandom);
extern __attribute__((visibility("default"))) PetscErrorCode PetscRandomDestroy(PetscRandom *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscGetFullPath(const char[], char[], size_t);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGetRelativePath(const char[], char[], size_t);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGetWorkingDirectory(char[], size_t);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGetRealPath(const char[], char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGetHomeDirectory(char[], size_t);
extern __attribute__((visibility("default"))) PetscErrorCode PetscTestFile(const char[], char, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscTestDirectory(const char[], char, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMkdir(const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMkdtemp(char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscRMTree(const char[]);

static inline PetscBool PetscBinaryBigEndian(void)
{
  long _petsc_v = 1;
  return ((char *)&_petsc_v)[0] ? PETSC_FALSE : PETSC_TRUE;
}

extern __attribute__((visibility("default"))) PetscErrorCode PetscBinaryRead(int, void *, PetscInt, PetscInt *, PetscDataType);
extern __attribute__((visibility("default"))) PetscErrorCode PetscBinarySynchronizedRead(MPI_Comm, int, void *, PetscInt, PetscInt *, PetscDataType);
extern __attribute__((visibility("default"))) PetscErrorCode PetscBinaryWrite(int, const void *, PetscInt, PetscDataType);
extern __attribute__((visibility("default"))) PetscErrorCode PetscBinarySynchronizedWrite(MPI_Comm, int, const void *, PetscInt, PetscDataType);
extern __attribute__((visibility("default"))) PetscErrorCode PetscBinaryOpen(const char[], PetscFileMode, int *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscBinaryClose(int);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSharedTmp(MPI_Comm, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSharedWorkingDirectory(MPI_Comm, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGetTmp(MPI_Comm, char[], size_t);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFileRetrieve(MPI_Comm, const char[], char[], size_t, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLs(MPI_Comm, const char[], char[], size_t, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscOpenSocket(const char[], int, int *);


extern __attribute__((visibility("default"))) PetscErrorCode PetscBinarySeek(int, off_t, PetscBinarySeekType, off_t *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscBinarySynchronizedSeek(MPI_Comm, int, off_t, PetscBinarySeekType, off_t *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscByteSwap(void *, PetscDataType, PetscInt);

extern __attribute__((visibility("default"))) PetscErrorCode PetscSetDebugTerminal(const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSetDebugger(const char[], PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSetDefaultDebugger(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSetDebuggerFromString(const char *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscAttachDebugger(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscStopForDebugger(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscWaitOnError(void);

extern __attribute__((visibility("default"))) PetscErrorCode PetscGatherNumberOfMessages(MPI_Comm, const PetscMPIInt[], const PetscMPIInt[], PetscMPIInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGatherMessageLengths(MPI_Comm, PetscMPIInt, PetscMPIInt, const PetscMPIInt[], PetscMPIInt **, PetscMPIInt **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGatherMessageLengths2(MPI_Comm, PetscMPIInt, PetscMPIInt, const PetscMPIInt[], const PetscMPIInt[], PetscMPIInt **, PetscMPIInt **, PetscMPIInt **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPostIrecvInt(MPI_Comm, PetscMPIInt, PetscMPIInt, const PetscMPIInt[], const PetscMPIInt[], PetscInt ***, MPI_Request **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPostIrecvScalar(MPI_Comm, PetscMPIInt, PetscMPIInt, const PetscMPIInt[], const PetscMPIInt[], PetscScalar ***, MPI_Request **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCommBuildTwoSided(MPI_Comm, PetscMPIInt, MPI_Datatype, PetscMPIInt, const PetscMPIInt *, const void *, PetscMPIInt *, PetscMPIInt **, void *) ;
extern __attribute__((visibility("default"))) PetscErrorCode PetscCommBuildTwoSidedF(MPI_Comm, PetscMPIInt, MPI_Datatype, PetscMPIInt, const PetscMPIInt[], const void *, PetscMPIInt *, PetscMPIInt **, void *, PetscMPIInt, PetscErrorCode (*send)(MPI_Comm, const PetscMPIInt[], PetscMPIInt, PetscMPIInt, void *, MPI_Request[], void *), PetscErrorCode (*recv)(MPI_Comm, const PetscMPIInt[], PetscMPIInt, void *, MPI_Request[], void *), void *ctx) ;
extern __attribute__((visibility("default"))) PetscErrorCode PetscCommBuildTwoSidedFReq(MPI_Comm, PetscMPIInt, MPI_Datatype, PetscMPIInt, const PetscMPIInt[], const void *, PetscMPIInt *, PetscMPIInt **, void *, PetscMPIInt, MPI_Request **, MPI_Request **, PetscErrorCode (*send)(MPI_Comm, const PetscMPIInt[], PetscMPIInt, PetscMPIInt, void *, MPI_Request[], void *), PetscErrorCode (*recv)(MPI_Comm, const PetscMPIInt[], PetscMPIInt, void *, MPI_Request[], void *), void *ctx) ;

extern __attribute__((visibility("default"))) const char *const PetscBuildTwoSidedTypes[];
extern __attribute__((visibility("default"))) PetscErrorCode    PetscCommBuildTwoSidedSetType(MPI_Comm, PetscBuildTwoSidedType);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscCommBuildTwoSidedGetType(MPI_Comm, PetscBuildTwoSidedType *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscSSEIsEnabled(MPI_Comm, PetscBool *, PetscBool *);

extern __attribute__((visibility("default"))) MPI_Comm PetscObjectComm(PetscObject);

extern __attribute__((visibility("default"))) const char *const PetscSubcommTypes[];

struct _n_PetscSubcomm {
  MPI_Comm         parent;     
  MPI_Comm         dupparent;  
  MPI_Comm         child;      
  PetscMPIInt      n;          
  PetscMPIInt      color;      
  PetscMPIInt     *subsize;    
  PetscSubcommType type;
  char            *subcommprefix;
};

static inline MPI_Comm PetscSubcommParent(PetscSubcomm scomm)
{
  return scomm->parent;
}
static inline MPI_Comm PetscSubcommChild(PetscSubcomm scomm)
{
  return scomm->child;
}
static inline MPI_Comm PetscSubcommContiguousParent(PetscSubcomm scomm)
{
  return scomm->dupparent;
}
extern __attribute__((visibility("default"))) PetscErrorCode PetscSubcommCreate(MPI_Comm, PetscSubcomm *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSubcommDestroy(PetscSubcomm *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSubcommSetNumber(PetscSubcomm, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSubcommSetType(PetscSubcomm, PetscSubcommType);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSubcommSetTypeGeneral(PetscSubcomm, PetscMPIInt, PetscMPIInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSubcommView(PetscSubcomm, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSubcommSetFromOptions(PetscSubcomm);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSubcommSetOptionsPrefix(PetscSubcomm, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSubcommGetParent(PetscSubcomm, MPI_Comm *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSubcommGetContiguousParent(PetscSubcomm, MPI_Comm *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSubcommGetChild(PetscSubcomm, MPI_Comm *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscHeapCreate(PetscInt, PetscHeap *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscHeapAdd(PetscHeap, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscHeapPop(PetscHeap, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscHeapPeek(PetscHeap, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscHeapStash(PetscHeap, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscHeapUnstash(PetscHeap);
extern __attribute__((visibility("default"))) PetscErrorCode PetscHeapDestroy(PetscHeap *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscHeapView(PetscHeap, PetscViewer);

extern __attribute__((visibility("default"))) PetscErrorCode PetscProcessPlacementView(PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscShmCommGet(MPI_Comm, PetscShmComm *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscShmCommGlobalToLocal(PetscShmComm, PetscMPIInt, PetscMPIInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscShmCommLocalToGlobal(PetscShmComm, PetscMPIInt, PetscMPIInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscShmCommGetMpiShmComm(PetscShmComm, MPI_Comm *);

 
extern __attribute__((visibility("default"))) PetscErrorCode PetscOmpCtrlCreate(MPI_Comm, PetscInt, PetscOmpCtrl *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOmpCtrlGetOmpComms(PetscOmpCtrl, MPI_Comm *, MPI_Comm *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOmpCtrlDestroy(PetscOmpCtrl *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOmpCtrlBarrier(PetscOmpCtrl);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOmpCtrlOmpRegionOnMasterBegin(PetscOmpCtrl);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOmpCtrlOmpRegionOnMasterEnd(PetscOmpCtrl);

extern __attribute__((visibility("default"))) PetscErrorCode PetscSegBufferCreate(size_t, size_t, PetscSegBuffer *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSegBufferDestroy(PetscSegBuffer *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSegBufferGet(PetscSegBuffer, size_t, void *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSegBufferExtractAlloc(PetscSegBuffer, void *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSegBufferExtractTo(PetscSegBuffer, void *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSegBufferExtractInPlace(PetscSegBuffer, void *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSegBufferGetSize(PetscSegBuffer, size_t *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSegBufferUnuse(PetscSegBuffer, size_t);



 
static inline PetscErrorCode PetscSegBufferGetInts(PetscSegBuffer seg, size_t count, PetscInt *restrict *slot)
{
  return PetscSegBufferGet(seg, count, (void **)slot);
}

extern PetscOptionsHelpPrinted PetscOptionsHelpPrintedSingleton;
extern __attribute__((visibility("default"))) PetscErrorCode    PetscOptionsHelpPrintedDestroy(PetscOptionsHelpPrinted *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscOptionsHelpPrintedCreate(PetscOptionsHelpPrinted *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscOptionsHelpPrintedCheck(PetscOptionsHelpPrinted, const char *, const char *, PetscBool *);


extern __attribute__((visibility("default"))) PetscErrorCode PetscVSNPrintf(char *, size_t, const char[], size_t *, va_list);
extern __attribute__((visibility("default")))                PetscErrorCode (*PetscVFPrintf)(FILE *, const char[], va_list);

extern __attribute__((visibility("default"))) PetscSegBuffer PetscCitationsList;


















 
static inline PetscErrorCode PetscCitationsRegister(const char cit[], PetscBool *set)
{
  size_t len;
  char  *vstring;

  ;
  if (set && *set) return 0;
  do { PetscErrorCode ierr_q_; ; ierr_q_ = PetscStrlen(cit, &len); if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 2632, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
  do { PetscErrorCode ierr_q_; ; ierr_q_ = PetscSegBufferGet(PetscCitationsList, len, &vstring); if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 2633, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
  do { PetscErrorCode ierr_q_; ; ierr_q_ = ((sizeof(*(vstring)) != sizeof(*(cit))) || PetscMemcpy(vstring, cit, (size_t)(len) * sizeof(*(vstring)))); if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 2634, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
  if (set) *set = PETSC_TRUE;
  return 0;
}

extern __attribute__((visibility("default")))                __attribute__((deprecated)) PetscErrorCode PetscURLShorten(const char[], char[], size_t c);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGoogleDriveAuthorize(MPI_Comm, char[], char[], size_t);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGoogleDriveRefresh(MPI_Comm, const char[], char[], size_t);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGoogleDriveUpload(MPI_Comm, const char[], const char[]);

extern __attribute__((visibility("default"))) PetscErrorCode PetscBoxAuthorize(MPI_Comm, char[], char[], size_t);
extern __attribute__((visibility("default"))) PetscErrorCode PetscBoxRefresh(MPI_Comm, const char[], char[], char[], size_t);

extern __attribute__((visibility("default"))) PetscErrorCode PetscGlobusGetTransfers(MPI_Comm, const char[], char[], size_t);

extern __attribute__((visibility("default"))) PetscErrorCode PetscTextBelt(MPI_Comm, const char[], const char[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscTellMyCell(MPI_Comm, const char[], const char[], PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscPullJSONValue(const char[], const char[], char[], size_t, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPushJSONValue(char[], const char[], const char[], size_t);

# 2701 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsys.h"


extern __attribute__((visibility("default"))) PetscErrorCode MPIU_Win_allocate_shared(MPI_Aint, PetscMPIInt, MPI_Info, MPI_Comm, void *, MPI_Win *);
extern __attribute__((visibility("default"))) PetscErrorCode MPIU_Win_shared_query(MPI_Win, PetscMPIInt, MPI_Aint *, PetscMPIInt *, void *);


 








 
extern __attribute__((visibility("default"))) PetscErrorCode PetscHasExternalPackage(const char[], PetscBool *);



 






 
extern __attribute__((visibility("default"))) PetscErrorCode PCMPIServerBegin(void);
extern __attribute__((visibility("default"))) PetscErrorCode PCMPIServerEnd(void);
extern __attribute__((visibility("default"))) PetscErrorCode PCMPICommsDestroy(void);
# 6 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscbag.h" 2

 



























 
typedef struct _n_PetscBag     *PetscBag;
typedef struct _n_PetscBagItem *PetscBagItem;

extern __attribute__((visibility("default"))) PetscErrorCode PetscBagCreate(MPI_Comm, size_t, PetscBag *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscBagDestroy(PetscBag *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscBagGetData(PetscBag, void **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscBagRegisterReal(PetscBag, void *, PetscReal, const char *, const char *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscBagRegisterRealArray(PetscBag, void *, PetscInt, const char *, const char *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscBagRegisterString(PetscBag, void *, PetscInt, const char *, const char *, const char *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscBagRegisterScalar(PetscBag, void *, PetscScalar, const char *, const char *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscBagRegisterInt(PetscBag, void *, PetscInt, const char *, const char *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscBagRegisterInt64(PetscBag, void *, PetscInt64, const char *, const char *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscBagRegisterIntArray(PetscBag, void *, PetscInt, const char *, const char *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscBagRegisterEnum(PetscBag, void *, const char *const *, PetscEnum, const char *, const char *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscBagRegisterBool(PetscBag, void *, PetscBool, const char *, const char *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscBagRegisterBoolArray(PetscBag, void *, PetscInt, const char *, const char *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscBagGetNames(PetscBag, const char *[]);

extern __attribute__((visibility("default"))) PetscErrorCode PetscBagSetFromOptions(PetscBag);
extern __attribute__((visibility("default"))) PetscErrorCode PetscBagGetName(PetscBag, char **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscBagSetName(PetscBag, const char *, const char *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscBagSetOptionsPrefix(PetscBag, const char *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscBagView(PetscBag, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscBagLoad(PetscViewer, PetscBag);
extern __attribute__((visibility("default"))) PetscErrorCode PetscBagViewFromOptions(PetscBag, PetscObject, const char[]);

extern __attribute__((visibility("default"))) PetscErrorCode PetscBagSetViewer(PetscBag, PetscErrorCode (*)(PetscBag, PetscViewer));
extern __attribute__((visibility("default"))) PetscErrorCode PetscBagSetLoader(PetscBag, PetscErrorCode (*)(PetscBag, PetscViewer));
extern __attribute__((visibility("default"))) PetscErrorCode PetscBagSetDestroy(PetscBag, PetscErrorCode (*)(PetscBag));



# 6 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscbt.h" 1



# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscviewer.h" 1


 



# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdrawtypes.h" 1



 







 
typedef const char *PetscDrawType;












 
typedef struct _p_PetscDraw *PetscDraw;







 
typedef struct _p_PetscDrawAxis *PetscDrawAxis;







 
typedef struct _p_PetscDrawLG *PetscDrawLG;







 
typedef struct _p_PetscDrawSP *PetscDrawSP;







 
typedef struct _p_PetscDrawHG *PetscDrawHG;







 
typedef struct _p_PetscDrawBar *PetscDrawBar;

# 10 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscviewer.h" 2

 

extern __attribute__((visibility("default"))) PetscClassId PETSC_VIEWER_CLASSID;







 
typedef const char *PetscViewerType;
# 38 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscviewer.h"

extern __attribute__((visibility("default"))) PetscFunctionList PetscViewerList;
extern __attribute__((visibility("default"))) PetscErrorCode    PetscViewerInitializePackage(void);

extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerRegister(const char[], PetscErrorCode (*)(PetscViewer));

extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerCreate(MPI_Comm, PetscViewer *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerSetFromOptions(PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerASCIIOpenWithFILE(MPI_Comm, FILE *, PetscViewer *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerASCIIOpen(MPI_Comm, const char[], PetscViewer *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerASCIISetFILE(PetscViewer, FILE *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerBinaryOpen(MPI_Comm, const char[], PetscFileMode, PetscViewer *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerADIOSOpen(MPI_Comm, const char[], PetscFileMode, PetscViewer *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerBinaryGetFlowControl(PetscViewer, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerBinarySetFlowControl(PetscViewer, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerBinarySetUseMPIIO(PetscViewer, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerBinaryGetUseMPIIO(PetscViewer, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerBinaryGetMPIIODescriptor(PetscViewer, MPI_File *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerBinaryGetMPIIOOffset(PetscViewer, MPI_Offset *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerBinaryAddMPIIOOffset(PetscViewer, MPI_Offset);


extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerSocketOpen(MPI_Comm, const char[], int, PetscViewer *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerStringOpen(MPI_Comm, char[], size_t, PetscViewer *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerDrawOpen(MPI_Comm, const char[], const char[], int, int, int, int, PetscViewer *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerDrawSetDrawType(PetscViewer, PetscDrawType);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerDrawGetDrawType(PetscViewer, PetscDrawType *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerDrawSetTitle(PetscViewer, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerDrawGetTitle(PetscViewer, const char *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerDrawGetDraw(PetscViewer, PetscInt, PetscDraw *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerDrawBaseAdd(PetscViewer, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerDrawBaseSet(PetscViewer, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerDrawGetDrawLG(PetscViewer, PetscInt, PetscDrawLG *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerDrawGetDrawAxis(PetscViewer, PetscInt, PetscDrawAxis *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerMathematicaOpen(MPI_Comm, int, const char[], const char[], PetscViewer *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerSiloOpen(MPI_Comm, const char[], PetscViewer *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerMatlabOpen(MPI_Comm, const char[], PetscFileMode, PetscViewer *);







 
typedef enum {
  PETSC_VIEWER_GLVIS_DUMP,
  PETSC_VIEWER_GLVIS_SOCKET
} PetscViewerGLVisType;
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerGLVisOpen(MPI_Comm, PetscViewerGLVisType, const char *, PetscInt, PetscViewer *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerGLVisSetPrecision(PetscViewer, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerGLVisSetSnapId(PetscViewer, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerGLVisSetFields(PetscViewer, PetscInt, const char *[], PetscInt[], PetscErrorCode (*)(PetscObject, PetscInt, PetscObject[], void *), PetscObject[], void *, PetscErrorCode (*)(void *));

extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerGetType(PetscViewer, PetscViewerType *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerSetType(PetscViewer, PetscViewerType);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerDestroy(PetscViewer *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerGetSubViewer(PetscViewer, MPI_Comm, PetscViewer *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerRestoreSubViewer(PetscViewer, MPI_Comm, PetscViewer *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerSetUp(PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerView(PetscViewer, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerViewFromOptions(PetscViewer, PetscObject, const char[]);

extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerSetOptionsPrefix(PetscViewer, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerAppendOptionsPrefix(PetscViewer, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerGetOptionsPrefix(PetscViewer, const char *[]);

extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerReadable(PetscViewer, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerWritable(PetscViewer, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerCheckReadable(PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerCheckWritable(PetscViewer);










 
typedef enum {
  PETSC_VIEWER_DEFAULT,
  PETSC_VIEWER_ASCII_MATLAB,
  PETSC_VIEWER_ASCII_MATHEMATICA,
  PETSC_VIEWER_ASCII_IMPL,
  PETSC_VIEWER_ASCII_INFO,
  PETSC_VIEWER_ASCII_INFO_DETAIL,
  PETSC_VIEWER_ASCII_COMMON,
  PETSC_VIEWER_ASCII_SYMMODU,
  PETSC_VIEWER_ASCII_INDEX,
  PETSC_VIEWER_ASCII_DENSE,
  PETSC_VIEWER_ASCII_MATRIXMARKET,
  PETSC_VIEWER_ASCII_VTK_DEPRECATED,
  PETSC_VIEWER_ASCII_VTK  = PETSC_VIEWER_ASCII_VTK_DEPRECATED,
  PETSC_VIEWER_ASCII_VTK_CELL_DEPRECATED,
  PETSC_VIEWER_ASCII_VTK_CELL  = PETSC_VIEWER_ASCII_VTK_CELL_DEPRECATED,
  PETSC_VIEWER_ASCII_VTK_COORDS_DEPRECATED,
  PETSC_VIEWER_ASCII_VTK_COORDS  = PETSC_VIEWER_ASCII_VTK_COORDS_DEPRECATED,
  PETSC_VIEWER_ASCII_PCICE,
  PETSC_VIEWER_ASCII_PYTHON,
  PETSC_VIEWER_ASCII_FACTOR_INFO,
  PETSC_VIEWER_ASCII_LATEX,
  PETSC_VIEWER_ASCII_XML,
  PETSC_VIEWER_ASCII_FLAMEGRAPH,
  PETSC_VIEWER_ASCII_GLVIS,
  PETSC_VIEWER_ASCII_CSV,
  PETSC_VIEWER_DRAW_BASIC,
  PETSC_VIEWER_DRAW_LG,
  PETSC_VIEWER_DRAW_LG_XRANGE,
  PETSC_VIEWER_DRAW_CONTOUR,
  PETSC_VIEWER_DRAW_PORTS,
  PETSC_VIEWER_VTK_VTS,
  PETSC_VIEWER_VTK_VTR,
  PETSC_VIEWER_VTK_VTU,
  PETSC_VIEWER_BINARY_MATLAB,
  PETSC_VIEWER_NATIVE,
  PETSC_VIEWER_HDF5_PETSC,
  PETSC_VIEWER_HDF5_VIZ,
  PETSC_VIEWER_HDF5_XDMF,
  PETSC_VIEWER_HDF5_MAT,
  PETSC_VIEWER_NOFORMAT,
  PETSC_VIEWER_LOAD_BALANCE,
  PETSC_VIEWER_FAILED,
  PETSC_VIEWER_ALL
} PetscViewerFormat;
extern __attribute__((visibility("default"))) const char *const PetscViewerFormats[];

extern __attribute__((visibility("default")))                __attribute__((deprecated)) PetscErrorCode PetscViewerSetFormat(PetscViewer, PetscViewerFormat);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerPushFormat(PetscViewer, PetscViewerFormat);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerPopFormat(PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerGetFormat(PetscViewer, PetscViewerFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerFlush(PetscViewer);

extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsPushGetViewerOff(PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsPopGetViewerOff(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsGetViewerOff(PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsGetViewer(MPI_Comm, PetscOptions, const char[], const char[], PetscViewer *, PetscViewerFormat *, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsViewer_Private(PetscOptionItems *, const char[], const char[], const char[], PetscViewer *, PetscViewerFormat *, PetscBool *);

typedef struct {
  PetscViewer       viewer;
  PetscViewerFormat format;
  PetscDrawLG       lg;
  void             *data;
} PetscViewerAndFormat;
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerAndFormatCreate(PetscViewer, PetscViewerFormat, PetscViewerAndFormat **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerAndFormatDestroy(PetscViewerAndFormat **);



 

extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerASCIIGetPointer(PetscViewer, FILE **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerFileGetMode(PetscViewer, PetscFileMode *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerFileSetMode(PetscViewer, PetscFileMode);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerRead(PetscViewer, void *, PetscInt, PetscInt *, PetscDataType);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerASCIIPrintf(PetscViewer, const char[], ...) __attribute__((format(printf, 2, 3)));
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerASCIISynchronizedPrintf(PetscViewer, const char[], ...) __attribute__((format(printf, 2, 3)));
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerASCIIPushSynchronized(PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerASCIIPopSynchronized(PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerASCIIPushTab(PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerASCIIPopTab(PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerASCIIUseTabs(PetscViewer, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerASCIISetTab(PetscViewer, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerASCIIGetTab(PetscViewer, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerASCIIAddTab(PetscViewer, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerASCIISubtractTab(PetscViewer, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerASCIIRead(PetscViewer, void *, PetscInt, PetscInt *, PetscDataType);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerBinaryGetDescriptor(PetscViewer, int *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerBinaryGetInfoPointer(PetscViewer, FILE **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerBinaryRead(PetscViewer, void *, PetscInt, PetscInt *, PetscDataType);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerBinaryWrite(PetscViewer, const void *, PetscInt, PetscDataType);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerBinaryReadAll(PetscViewer, void *, PetscInt, PetscInt, PetscInt, PetscDataType);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerBinaryWriteAll(PetscViewer, const void *, PetscInt, PetscInt, PetscInt, PetscDataType);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerStringSPrintf(PetscViewer, const char[], ...) __attribute__((format(printf, 2, 3)));
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerStringSetString(PetscViewer, char[], size_t);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerStringGetStringRead(PetscViewer, const char *[], size_t *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerStringSetOwnString(PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerDrawClear(PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerDrawSetHold(PetscViewer, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerDrawGetHold(PetscViewer, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerDrawSetPause(PetscViewer, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerDrawGetPause(PetscViewer, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerDrawSetInfo(PetscViewer, const char[], const char[], int, int, int, int);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerDrawResize(PetscViewer, int, int);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerDrawSetBounds(PetscViewer, PetscInt, const PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerDrawGetBounds(PetscViewer, PetscInt *, const PetscReal **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerSocketSetConnection(PetscViewer, const char[], int);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerBinarySkipInfo(PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerBinarySetSkipInfo(PetscViewer, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerBinaryGetSkipInfo(PetscViewer, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerBinarySetSkipOptions(PetscViewer, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerBinaryGetSkipOptions(PetscViewer, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerBinarySetSkipHeader(PetscViewer, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerBinaryGetSkipHeader(PetscViewer, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerBinaryReadStringArray(PetscViewer, char ***);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerBinaryWriteStringArray(PetscViewer, const char *const *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerFileSetName(PetscViewer, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerFileGetName(PetscViewer, const char **);

extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerVUGetPointer(PetscViewer, FILE **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerVUSetVecSeen(PetscViewer, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerVUGetVecSeen(PetscViewer, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerVUPrintDeferred(PetscViewer, const char[], ...) __attribute__((format(printf, 2, 3)));
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerVUFlushDeferred(PetscViewer);
















 
__attribute__((deprecated)) static inline PetscErrorCode PetscViewerVUSetMode(PetscViewer viewer, PetscFileMode mode)
{
  return PetscViewerFileSetMode(viewer, mode);
}

extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerMathematicaInitializePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerMathematicaFinalizePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerMathematicaGetName(PetscViewer, const char **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerMathematicaSetName(PetscViewer, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerMathematicaClearName(PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerMathematicaSkipPackets(PetscViewer, int);

extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerSiloGetName(PetscViewer, char **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerSiloSetName(PetscViewer, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerSiloClearName(PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerSiloGetMeshName(PetscViewer, char **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerSiloSetMeshName(PetscViewer, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerSiloClearMeshName(PetscViewer);

typedef enum {
  PETSC_VTK_INVALID,
  PETSC_VTK_POINT_FIELD,
  PETSC_VTK_POINT_VECTOR_FIELD,
  PETSC_VTK_CELL_FIELD,
  PETSC_VTK_CELL_VECTOR_FIELD
} PetscViewerVTKFieldType;
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerVTKAddField(PetscViewer, PetscObject, PetscErrorCode (*PetscViewerVTKWriteFunction)(PetscObject, PetscViewer), PetscInt, PetscViewerVTKFieldType, PetscBool, PetscObject);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerVTKGetDM(PetscViewer, PetscObject *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerVTKOpen(MPI_Comm, const char[], PetscFileMode, PetscViewer *);



 
extern __attribute__((visibility("default"))) PetscViewer    PETSC_VIEWER_STDOUT_(MPI_Comm);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerASCIIGetStdout(MPI_Comm, PetscViewer *);
extern __attribute__((visibility("default"))) PetscViewer    PETSC_VIEWER_STDERR_(MPI_Comm);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerASCIIGetStderr(MPI_Comm, PetscViewer *);
extern __attribute__((visibility("default"))) PetscViewer    PETSC_VIEWER_DRAW_(MPI_Comm);
extern __attribute__((visibility("default"))) PetscViewer    PETSC_VIEWER_SOCKET_(MPI_Comm);
extern __attribute__((visibility("default"))) PetscViewer    PETSC_VIEWER_BINARY_(MPI_Comm);
extern __attribute__((visibility("default"))) PetscViewer    PETSC_VIEWER_MATLAB_(MPI_Comm);
extern __attribute__((visibility("default"))) PetscViewer    PETSC_VIEWER_HDF5_(MPI_Comm);
extern __attribute__((visibility("default"))) PetscViewer    PETSC_VIEWER_GLVIS_(MPI_Comm);
extern __attribute__((visibility("default"))) PetscViewer    PETSC_VIEWER_EXODUSII_(MPI_Comm);
extern __attribute__((visibility("default"))) PetscViewer    PETSC_VIEWER_MATHEMATICA_WORLD_PRIVATE;





 






 






 






 






 






 






 






 






 






 






 






 




extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerFlowControlStart(PetscViewer, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerFlowControlStepMain(PetscViewer, PetscInt, PetscInt *, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerFlowControlEndMain(PetscViewer, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerFlowControlStepWorker(PetscViewer, PetscMPIInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerFlowControlEndWorker(PetscViewer, PetscInt *);
__attribute__((deprecated)) static inline PetscErrorCode PetscViewerFlowControlStepMaster(PetscViewer viewer, PetscInt i, PetscInt *mcnt, PetscInt cnt)
{
  return PetscViewerFlowControlStepMain(viewer, i, mcnt, cnt);
}
__attribute__((deprecated)) static inline PetscErrorCode PetscViewerFlowControlEndMaster(PetscViewer viewer, PetscInt *mcnt)
{
  return PetscViewerFlowControlEndMain(viewer, mcnt);
}



 
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerMatlabPutArray(PetscViewer, int, int, const PetscScalar *, const char *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerMatlabGetArray(PetscViewer, int, int, PetscScalar *, const char *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerMatlabPutVariable(PetscViewer, const char *, void *);












 
typedef struct _n_PetscViewers *PetscViewers;
extern __attribute__((visibility("default"))) PetscErrorCode     PetscViewersCreate(MPI_Comm, PetscViewers *);
extern __attribute__((visibility("default"))) PetscErrorCode     PetscViewersDestroy(PetscViewers *);
extern __attribute__((visibility("default"))) PetscErrorCode     PetscViewersGetViewer(PetscViewers, PetscInt, PetscViewer *);

# 5 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscbt.h" 2

 

























 
typedef char *PetscBT;


 
static inline size_t PetscBTIndex_Internal(PetscInt index)
{
  return (size_t)index / 8;
}

static inline char PetscBTMask_Internal(PetscInt index)
{
  return (char)(1 << index % 8);
}

static inline size_t PetscBTLength(PetscInt m)
{
  return (size_t)m / 8 + 1;
}

static inline PetscErrorCode PetscBTMemzero(PetscInt m, PetscBT array)
{
  return PetscMemzero(array, (size_t)(PetscBTLength(m)) * sizeof(*(array)));
}

static inline PetscErrorCode PetscBTDestroy(PetscBT *array)
{
  return (*array) ? ((*PetscTrFree)((void *)(*array), 59, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscbt.h") || ((*array) = ((void*)0), 0)) : 0;
}

static inline PetscErrorCode PetscBTCreate(PetscInt m, PetscBT *array)
{
  return PetscMallocA(1, PETSC_TRUE, 64, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscbt.h", (size_t)((size_t)PetscBTLength(m)) * sizeof(* *(array)), (array));
}

static inline char PetscBTLookup(PetscBT array, PetscInt index)
{
  return array[PetscBTIndex_Internal(index)] & PetscBTMask_Internal(index);
}

static inline PetscErrorCode PetscBTSet(PetscBT array, PetscInt index)
{
  ;
  array[PetscBTIndex_Internal(index)] |= PetscBTMask_Internal(index);
  return 0;
}

static inline PetscErrorCode PetscBTNegate(PetscBT array, PetscInt index)
{
  ;
  array[PetscBTIndex_Internal(index)] ^= PetscBTMask_Internal(index);
  return 0;
}

static inline PetscErrorCode PetscBTClear(PetscBT array, PetscInt index)
{
  ;
  array[PetscBTIndex_Internal(index)] &= (char)~PetscBTMask_Internal(index);
  return 0;
}

static inline char PetscBTLookupSet(PetscBT array, PetscInt index)
{
  const char ret = PetscBTLookup(array, index);
  do { PetscErrorCode ierr_continue_ = PetscBTSet(array, index); if (__builtin_expect(! !(ierr_continue_), 0)) PetscError(((MPI_Comm)0x44000001), 96, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscbt.h", ierr_continue_, PETSC_ERROR_REPEAT, " "); } while (0);
  return ret;
}

static inline char PetscBTLookupClear(PetscBT array, PetscInt index)
{
  const char ret = PetscBTLookup(array, index);
  do { PetscErrorCode ierr_continue_ = PetscBTClear(array, index); if (__builtin_expect(! !(ierr_continue_), 0)) PetscError(((MPI_Comm)0x44000001), 103, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscbt.h", ierr_continue_, PETSC_ERROR_REPEAT, " "); } while (0);
  return ret;
}

static inline PetscErrorCode PetscBTView(PetscInt m, const PetscBT bt, PetscViewer viewer)
{
  ;
  if (m < 1) return 0;
  if (!viewer) do { PetscErrorCode ierr_q_; ; ierr_q_ = PetscViewerASCIIGetStdout(((MPI_Comm)0x44000001), &viewer); if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 111, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscbt.h", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
  do { PetscErrorCode ierr_q_; ; ierr_q_ = PetscViewerASCIIPushSynchronized(viewer); if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 112, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscbt.h", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
  for (PetscInt i = 0; i < m; ++i) do { PetscErrorCode ierr_q_; ; ierr_q_ = PetscViewerASCIISynchronizedPrintf(viewer, "%" "d" " %d\n", i, (int)PetscBTLookup(bt, i)); if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 113, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscbt.h", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
  do { PetscErrorCode ierr_q_; ; ierr_q_ = PetscViewerFlush(viewer); if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 114, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscbt.h", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
  do { PetscErrorCode ierr_q_; ; ierr_q_ = PetscViewerASCIIPopSynchronized(viewer); if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 115, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscbt.h", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
  return 0;
}
# 8 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscctable.h" 1




struct _n_PetscTable {
  PetscInt *keytable;
  PetscInt *table;
  PetscInt  count;
  PetscInt  tablesize;
  PetscInt  head;
  PetscInt  maxkey;  
};

typedef struct _n_PetscTable *PetscTable;
typedef PetscInt             *PetscTablePosition;

static inline unsigned long PetscHash(PetscTable ta, unsigned long x)
{
  return (x % (unsigned long)ta->tablesize);
}

static inline unsigned long PetscHashStep(PetscTable ta, unsigned long x)
{
  return (1 + (x % (unsigned long)(ta->tablesize - 1)));
}

extern __attribute__((visibility("default"))) PetscErrorCode PetscTableCreate(const PetscInt, PetscInt, PetscTable *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscTableCreateCopy(const PetscTable, PetscTable *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscTableDestroy(PetscTable *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscTableGetCount(const PetscTable, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscTableIsEmpty(const PetscTable, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscTableAddExpand(PetscTable, PetscInt, PetscInt, InsertMode);
extern __attribute__((visibility("default"))) PetscErrorCode PetscTableAddCountExpand(PetscTable, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscTableGetHeadPosition(PetscTable, PetscTablePosition *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscTableGetNext(PetscTable, PetscTablePosition *, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscTableRemoveAll(PetscTable);

static inline PetscErrorCode PetscTableAdd(PetscTable ta, PetscInt key, PetscInt data, InsertMode imode)
{
  PetscInt i, hash = (PetscInt)PetscHash(ta, (unsigned long)key);
  PetscInt hashstep = (PetscInt)PetscHashStep(ta, (unsigned long)key);

  ;
  do { if (__builtin_expect(! !(!(key > 0)), 0)) do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 44, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscctable.h", 63, PETSC_ERROR_INITIAL, "key (value %" "d" ") <= 0", key); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } while (0);
  do { if (__builtin_expect(! !(!(key <= ta->maxkey)), 0)) do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 45, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscctable.h", 63, PETSC_ERROR_INITIAL, "key %" "d" " is greater than largest key allowed %" "d", key, ta->maxkey); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } while (0);
  do { if (__builtin_expect(! !(!(data)), 0)) do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 46, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscctable.h", 63, PETSC_ERROR_INITIAL, "Null data"); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } while (0);

  for (i = 0; i < ta->tablesize; i++) {
    if (ta->keytable[hash] == key) {
      switch (imode) {
      case INSERT_VALUES:
        ta->table[hash] = data;  
        break;
      case ADD_VALUES:
        ta->table[hash] += data;
        break;
      case MAX_VALUES:
        ta->table[hash] = (((ta->table[hash]) < (data)) ? (data) : (ta->table[hash]));
        break;
      case MIN_VALUES:
        ta->table[hash] = (((ta->table[hash]) < (data)) ? (ta->table[hash]) : (data));
        break;
      case NOT_SET_VALUES:
      case INSERT_ALL_VALUES:
      case ADD_ALL_VALUES:
      case INSERT_BC_VALUES:
      case ADD_BC_VALUES:
        do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 68, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscctable.h", 56, PETSC_ERROR_INITIAL, "Unsupported InsertMode"); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0);
      }
      return 0;
    } else if (!ta->keytable[hash]) {
      if (ta->count < 5 * (ta->tablesize / 6) - 1) {
        ta->count++;  
        ta->keytable[hash] = key;
        ta->table[hash]    = data;
      } else do { PetscErrorCode ierr_q_; ; ierr_q_ = PetscTableAddExpand(ta, key, data, imode); if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 76, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscctable.h", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
      return 0;
    }
    hash = (hash + hashstep) % ta->tablesize;
  }
  do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 81, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscctable.h", 74, PETSC_ERROR_INITIAL, "Full table"); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0);
   
}

static inline PetscErrorCode PetscTableAddCount(PetscTable ta, PetscInt key)
{
  PetscInt i, hash = (PetscInt)PetscHash(ta, (unsigned long)key);
  PetscInt hashstep = (PetscInt)PetscHashStep(ta, (unsigned long)key);

  ;
  do { if (__builtin_expect(! !(!(key > 0)), 0)) do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 91, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscctable.h", 63, PETSC_ERROR_INITIAL, "key (value %" "d" ") <= 0", key); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } while (0);
  do { if (__builtin_expect(! !(!(key <= ta->maxkey)), 0)) do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 92, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscctable.h", 63, PETSC_ERROR_INITIAL, "key %" "d" " is greater than largest key allowed %" "d", key, ta->maxkey); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } while (0);

  for (i = 0; i < ta->tablesize; i++) {
    if (ta->keytable[hash] == key) {
      return 0;
    } else if (!ta->keytable[hash]) {
      if (ta->count < 5 * (ta->tablesize / 6) - 1) {
        ta->count++;  
        ta->keytable[hash] = key;
        ta->table[hash]    = ta->count;
      } else do { PetscErrorCode ierr_q_; ; ierr_q_ = PetscTableAddCountExpand(ta, key); if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 102, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscctable.h", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
      return 0;
    }
    hash = (hash + hashstep) % ta->tablesize;
  }
  do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 107, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscctable.h", 74, PETSC_ERROR_INITIAL, "Full table"); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0);
   
}



 
static inline PetscErrorCode PetscTableFind(PetscTable ta, PetscInt key, PetscInt *data)
{
  PetscInt ii       = 0;
  PetscInt hash     = (PetscInt)PetscHash(ta, (unsigned long)key);
  PetscInt hashstep = (PetscInt)PetscHashStep(ta, (unsigned long)key);

  ;
  *data = 0;
  do { if (__builtin_expect(! !(!(key > 0)), 0)) do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 122, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscctable.h", 63, PETSC_ERROR_INITIAL, "key (value %" "d" ") <= 0", key); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } while (0);
  do { if (__builtin_expect(! !(!(key <= ta->maxkey)), 0)) do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 123, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscctable.h", 63, PETSC_ERROR_INITIAL, "key %" "d" " is greater than largest key allowed %" "d", key, ta->maxkey); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } while (0);

  while (ii++ < ta->tablesize) {
    if (!ta->keytable[hash]) break;
    else if (ta->keytable[hash] == key) {
      *data = ta->table[hash];
      break;
    }
    hash = (hash + hashstep) % ta->tablesize;
  }
  return 0;
}

# 9 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmatlab.h" 1


 



 

extern __attribute__((visibility("default"))) PetscClassId MATLABENGINE_CLASSID;

















 
typedef struct _p_PetscMatlabEngine *PetscMatlabEngine;

extern __attribute__((visibility("default"))) PetscErrorCode PetscMatlabEngineCreate(MPI_Comm, const char[], PetscMatlabEngine *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMatlabEngineDestroy(PetscMatlabEngine *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMatlabEngineEvaluate(PetscMatlabEngine, const char[], ...);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMatlabEngineGetOutput(PetscMatlabEngine, char **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMatlabEnginePrintOutput(PetscMatlabEngine, FILE *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMatlabEnginePut(PetscMatlabEngine, PetscObject);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMatlabEngineGet(PetscMatlabEngine, PetscObject);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMatlabEnginePutArray(PetscMatlabEngine, int, int, const PetscScalar *, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscMatlabEngineGetArray(PetscMatlabEngine, int, int, PetscScalar *, const char[]);

extern __attribute__((visibility("default"))) PetscMatlabEngine PETSC_MATLAB_ENGINE_(MPI_Comm);







 








 


# 10 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdraw.h" 1


 





 

extern __attribute__((visibility("default"))) PetscClassId PETSC_DRAW_CLASSID;

extern __attribute__((visibility("default"))) PetscFunctionList PetscDrawList;
extern __attribute__((visibility("default"))) PetscErrorCode    PetscDrawInitializePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscDrawFinalizePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscDrawRegister(const char[], PetscErrorCode (*)(PetscDraw));

extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawGetType(PetscDraw, PetscDrawType *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSetType(PetscDraw, PetscDrawType);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawCreate(MPI_Comm, const char[], const char[], int, int, int, int, PetscDraw *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSetOptionsPrefix(PetscDraw, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSetFromOptions(PetscDraw);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSetSave(PetscDraw, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSetSaveMovie(PetscDraw, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSetSaveFinalImage(PetscDraw, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawView(PetscDraw, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawViewFromOptions(PetscDraw, PetscObject, const char[]);




 


# 52 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdraw.h"

# 71 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdraw.h"

























 
static inline int PetscDrawRealToColor(PetscReal value, PetscReal min, PetscReal max)
{
  value = (((((min)) < (((((value)) < ((max))) ? ((value)) : ((max))))) ? (((((value)) < ((max))) ? ((value)) : ((max)))) : ((min))));
  return 33 + (int)((255 - 33) * (value - min) / (max - min));
}

extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawOpenX(MPI_Comm, const char[], const char[], int, int, int, int, PetscDraw *);






extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawOpenImage(MPI_Comm, const char[], int, int, PetscDraw *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawOpenNull(MPI_Comm, PetscDraw *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawDestroy(PetscDraw *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawIsNull(PetscDraw, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawGetPopup(PetscDraw, PetscDraw *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawScalePopup(PetscDraw, PetscReal, PetscReal);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawCheckResizedWindow(PetscDraw);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawResizeWindow(PetscDraw, int, int);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawGetWindowSize(PetscDraw, int *, int *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawPixelToCoordinate(PetscDraw, int, int, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawCoordinateToPixel(PetscDraw, PetscReal, PetscReal, int *, int *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawIndicatorFunction(PetscDraw, PetscReal, PetscReal, PetscReal, PetscReal, int, PetscErrorCode (*)(void *, PetscReal, PetscReal, PetscBool *), void *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawLine(PetscDraw, PetscReal, PetscReal, PetscReal, PetscReal, int);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawArrow(PetscDraw, PetscReal, PetscReal, PetscReal, PetscReal, int);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawLineSetWidth(PetscDraw, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawLineGetWidth(PetscDraw, PetscReal *);












 
typedef enum {
  PETSC_DRAW_MARKER_CROSS,
  PETSC_DRAW_MARKER_POINT,
  PETSC_DRAW_MARKER_PLUS,
  PETSC_DRAW_MARKER_CIRCLE
} PetscDrawMarkerType;
extern __attribute__((visibility("default"))) const char *const PetscDrawMarkerTypes[];

extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawMarker(PetscDraw, PetscReal, PetscReal, int);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSetMarkerType(PetscDraw, PetscDrawMarkerType);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawGetMarkerType(PetscDraw, PetscDrawMarkerType *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawPoint(PetscDraw, PetscReal, PetscReal, int);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawPointPixel(PetscDraw, int, int, int);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawPointSetSize(PetscDraw, PetscReal);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawRectangle(PetscDraw, PetscReal, PetscReal, PetscReal, PetscReal, int, int, int, int);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawTriangle(PetscDraw, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal, int, int, int);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawEllipse(PetscDraw, PetscReal, PetscReal, PetscReal, PetscReal, int);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawTensorContourPatch(PetscDraw, int, int, PetscReal *, PetscReal *, PetscReal, PetscReal, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawTensorContour(PetscDraw, int, int, const PetscReal[], const PetscReal[], PetscReal *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawString(PetscDraw, PetscReal, PetscReal, int, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawStringCentered(PetscDraw, PetscReal, PetscReal, int, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawStringBoxed(PetscDraw, PetscReal, PetscReal, int, int, const char[], PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawStringVertical(PetscDraw, PetscReal, PetscReal, int, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawStringSetSize(PetscDraw, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawStringGetSize(PetscDraw, PetscReal *, PetscReal *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSetViewPort(PetscDraw, PetscReal, PetscReal, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawGetViewPort(PetscDraw, PetscReal *, PetscReal *, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSplitViewPort(PetscDraw);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSetCoordinates(PetscDraw, PetscReal, PetscReal, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawGetCoordinates(PetscDraw, PetscReal *, PetscReal *, PetscReal *, PetscReal *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSetTitle(PetscDraw, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawAppendTitle(PetscDraw, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawGetTitle(PetscDraw, const char *[]);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSetPause(PetscDraw, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawGetPause(PetscDraw, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawPause(PetscDraw);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSetDoubleBuffer(PetscDraw);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawClear(PetscDraw);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawFlush(PetscDraw);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSave(PetscDraw);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSaveMovie(PetscDraw);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawBOP(PetscDraw);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawEOP(PetscDraw);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSetDisplay(PetscDraw, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawGetSingleton(PetscDraw, PetscDraw *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawRestoreSingleton(PetscDraw, PetscDraw *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawGetCurrentPoint(PetscDraw, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSetCurrentPoint(PetscDraw, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawPushCurrentPoint(PetscDraw, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawPopCurrentPoint(PetscDraw);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawGetBoundingBox(PetscDraw, PetscReal *, PetscReal *, PetscReal *, PetscReal *);







 
typedef enum {
  PETSC_BUTTON_NONE = 0,
  PETSC_BUTTON_LEFT,
  PETSC_BUTTON_CENTER,
  PETSC_BUTTON_RIGHT,
  PETSC_BUTTON_WHEEL_UP,
  PETSC_BUTTON_WHEEL_DOWN,
  PETSC_BUTTON_LEFT_SHIFT,
  PETSC_BUTTON_CENTER_SHIFT,
  PETSC_BUTTON_RIGHT_SHIFT
} PetscDrawButton;

extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawGetMouseButton(PetscDraw, PetscDrawButton *, PetscReal *, PetscReal *, PetscReal *, PetscReal *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawZoom(PetscDraw, PetscErrorCode (*)(PetscDraw, void *), void *);







 
typedef struct {
  PetscInt   nports;
  PetscReal *xl;
  PetscReal *xr;
  PetscReal *yl;
  PetscReal *yr;
  PetscDraw  draw;
  PetscReal  port_xl, port_yl, port_xr, port_yr;  
} PetscDrawViewPorts;
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawViewPortsCreate(PetscDraw, PetscInt, PetscDrawViewPorts **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawViewPortsCreateRect(PetscDraw, PetscInt, PetscInt, PetscDrawViewPorts **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawViewPortsDestroy(PetscDrawViewPorts *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawViewPortsSet(PetscDrawViewPorts *, PetscInt);

extern __attribute__((visibility("default"))) PetscClassId PETSC_DRAWAXIS_CLASSID;

extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawAxisCreate(PetscDraw, PetscDrawAxis *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawAxisDestroy(PetscDrawAxis *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawAxisDraw(PetscDrawAxis);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawAxisSetLimits(PetscDrawAxis, PetscReal, PetscReal, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawAxisGetLimits(PetscDrawAxis, PetscReal *, PetscReal *, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawAxisSetHoldLimits(PetscDrawAxis, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawAxisSetColors(PetscDrawAxis, int, int, int);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawAxisSetLabels(PetscDrawAxis, const char[], const char[], const char[]);

extern __attribute__((visibility("default"))) PetscClassId PETSC_DRAWLG_CLASSID;

extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawLGCreate(PetscDraw, PetscInt, PetscDrawLG *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawLGDestroy(PetscDrawLG *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawLGAddPoint(PetscDrawLG, const PetscReal *, const PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawLGAddCommonPoint(PetscDrawLG, const PetscReal, const PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawLGAddPoints(PetscDrawLG, PetscInt, PetscReal **, PetscReal **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawLGDraw(PetscDrawLG);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawLGSave(PetscDrawLG);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawLGView(PetscDrawLG, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawLGReset(PetscDrawLG);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawLGSetDimension(PetscDrawLG, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawLGGetDimension(PetscDrawLG, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawLGSetLegend(PetscDrawLG, const char *const *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawLGGetAxis(PetscDrawLG, PetscDrawAxis *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawLGGetDraw(PetscDrawLG, PetscDraw *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawLGSetUseMarkers(PetscDrawLG, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawLGSetLimits(PetscDrawLG, PetscReal, PetscReal, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawLGSetColors(PetscDrawLG, const int[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawLGSetOptionsPrefix(PetscDrawLG, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawLGSetFromOptions(PetscDrawLG);

extern __attribute__((visibility("default"))) PetscClassId PETSC_DRAWSP_CLASSID;

extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSPCreate(PetscDraw, int, PetscDrawSP *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSPDestroy(PetscDrawSP *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSPAddPoint(PetscDrawSP, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSPAddPoints(PetscDrawSP, int, PetscReal **, PetscReal **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSPDraw(PetscDrawSP, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSPSave(PetscDrawSP);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSPReset(PetscDrawSP);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSPGetDimension(PetscDrawSP, int *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSPSetDimension(PetscDrawSP, int);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSPGetAxis(PetscDrawSP, PetscDrawAxis *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSPGetDraw(PetscDrawSP, PetscDraw *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSPSetLimits(PetscDrawSP, PetscReal, PetscReal, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawLGSPDraw(PetscDrawLG, PetscDrawSP);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawSPAddPointColorized(PetscDrawSP, PetscReal *, PetscReal *, PetscReal *);

extern __attribute__((visibility("default"))) PetscClassId PETSC_DRAWHG_CLASSID;

extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawHGCreate(PetscDraw, int, PetscDrawHG *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawHGDestroy(PetscDrawHG *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawHGAddValue(PetscDrawHG, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawHGDraw(PetscDrawHG);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawHGSave(PetscDrawHG);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawHGView(PetscDrawHG, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawHGReset(PetscDrawHG);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawHGGetAxis(PetscDrawHG, PetscDrawAxis *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawHGGetDraw(PetscDrawHG, PetscDraw *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawHGSetLimits(PetscDrawHG, PetscReal, PetscReal, int, int);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawHGSetNumberBins(PetscDrawHG, int);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawHGSetColor(PetscDrawHG, int);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawHGCalcStats(PetscDrawHG, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawHGIntegerBins(PetscDrawHG, PetscBool);

extern __attribute__((visibility("default"))) PetscClassId PETSC_DRAWBAR_CLASSID;

extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawBarCreate(PetscDraw, PetscDrawBar *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawBarSetData(PetscDrawBar, PetscInt, const PetscReal[], const char *const *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawBarDestroy(PetscDrawBar *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawBarDraw(PetscDrawBar);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawBarSave(PetscDrawBar);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawBarSetColor(PetscDrawBar, int);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawBarSetLimits(PetscDrawBar, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawBarSort(PetscDrawBar, PetscBool, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawBarSetFromOptions(PetscDrawBar);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawBarGetAxis(PetscDrawBar, PetscDrawAxis *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawBarGetDraw(PetscDrawBar, PetscDraw *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawUtilitySetCmap(const char[], int, unsigned char[], unsigned char[], unsigned char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDrawUtilitySetGamma(PetscReal);



 
# 434 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdraw.h"

# 11 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdevice.h" 1



# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdevicetypes.h" 1













 






























 
typedef enum {
  PETSC_MEMTYPE_HOST    = 0,
  PETSC_MEMTYPE_DEVICE  = 0x01,
  PETSC_MEMTYPE_CUDA    = 0x01,
  PETSC_MEMTYPE_NVSHMEM = 0x11,
  PETSC_MEMTYPE_HIP     = 0x03,
  PETSC_MEMTYPE_SYCL    = 0x05,
} PetscMemType;
# 63 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdevicetypes.h"

# 70 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdevicetypes.h"

# 96 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdevicetypes.h"

__attribute__((warn_unused_result)) static inline  const char *PetscMemTypeToString(PetscMemType mtype)
{
# 105 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdevicetypes.h"

  switch (mtype) {
    case PETSC_MEMTYPE_HOST: return "PETSC_MEMTYPE_HOST";
     
    case PETSC_MEMTYPE_CUDA: return "PETSC_MEMTYPE_CUDA";
    case PETSC_MEMTYPE_NVSHMEM: return "PETSC_MEMTYPE_NVSHMEM";
    case PETSC_MEMTYPE_HIP: return "PETSC_MEMTYPE_HIP";
    case PETSC_MEMTYPE_SYCL: return "PETSC_MEMTYPE_SYCL";
  }
  __builtin_unreachable();
  return "invalid";

}



















 
typedef enum {
  PETSC_OFFLOAD_UNALLOCATED          = 0x0,
  PETSC_OFFLOAD_CPU                  = 0x1,
  PETSC_OFFLOAD_GPU                  = 0x2,
  PETSC_OFFLOAD_BOTH                 = 0x3,
  PETSC_OFFLOAD_VECKOKKOS  = 0x100,
  PETSC_OFFLOAD_KOKKOS               = 0x100
} PetscOffloadMask;






# 178 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdevicetypes.h"

__attribute__((warn_unused_result)) static inline  const char *PetscOffloadMaskToString(PetscOffloadMask mask)
{




  switch (mask) {
    case PETSC_OFFLOAD_UNALLOCATED: return "PETSC_OFFLOAD_UNALLOCATED";
    case PETSC_OFFLOAD_CPU: return "PETSC_OFFLOAD_CPU";
    case PETSC_OFFLOAD_GPU: return "PETSC_OFFLOAD_GPU";
    case PETSC_OFFLOAD_BOTH: return "PETSC_OFFLOAD_BOTH";
    case PETSC_OFFLOAD_KOKKOS: return "PETSC_OFFLOAD_KOKKOS";
  }
  __builtin_unreachable();
  return "invalid";

}

__attribute__((warn_unused_result)) static inline  PetscMemType PetscOffloadMaskToMemType(PetscOffloadMask mask)
{
  switch (mask) {
  case PETSC_OFFLOAD_UNALLOCATED:
  case PETSC_OFFLOAD_CPU:
    return PETSC_MEMTYPE_HOST;
  case PETSC_OFFLOAD_GPU:
  case PETSC_OFFLOAD_BOTH:
    return PETSC_MEMTYPE_DEVICE;
  case PETSC_OFFLOAD_KOKKOS:
    return PETSC_MEMTYPE_HOST;
  }
  __builtin_unreachable();
  return PETSC_MEMTYPE_HOST;
}
















 
typedef enum {
  PETSC_DEVICE_INIT_NONE,
  PETSC_DEVICE_INIT_LAZY,
  PETSC_DEVICE_INIT_EAGER
} PetscDeviceInitType;
extern __attribute__((visibility("default"))) const char *const PetscDeviceInitTypes[];
















 
typedef enum {
  PETSC_DEVICE_HOST,
  PETSC_DEVICE_CUDA,
  PETSC_DEVICE_HIP,
  PETSC_DEVICE_SYCL,
  PETSC_DEVICE_MAX
} PetscDeviceType;
extern __attribute__((visibility("default"))) const char *const PetscDeviceTypes[];











 
typedef enum {
  PETSC_DEVICE_ATTR_SIZE_T_SHARED_MEM_PER_BLOCK,
  PETSC_DEVICE_ATTR_MAX
} PetscDeviceAttribute;
extern __attribute__((visibility("default"))) const char *const PetscDeviceAttributes[];














 
typedef struct _n_PetscDevice *PetscDevice;













 
typedef enum {
  PETSC_STREAM_GLOBAL_BLOCKING,
  PETSC_STREAM_DEFAULT_BLOCKING,
  PETSC_STREAM_GLOBAL_NONBLOCKING,
  PETSC_STREAM_MAX
} PetscStreamType;
extern __attribute__((visibility("default"))) const char *const PetscStreamTypes[];












 
typedef enum {
  PETSC_DEVICE_CONTEXT_JOIN_DESTROY,
  PETSC_DEVICE_CONTEXT_JOIN_SYNC,
  PETSC_DEVICE_CONTEXT_JOIN_NO_SYNC
} PetscDeviceContextJoinMode;
extern __attribute__((visibility("default"))) const char *const PetscDeviceContextJoinModes[];









 
typedef struct _p_PetscDeviceContext *PetscDeviceContext;













 
typedef enum {
  PETSC_DEVICE_COPY_HTOH,
  PETSC_DEVICE_COPY_DTOH,
  PETSC_DEVICE_COPY_HTOD,
  PETSC_DEVICE_COPY_DTOD,
  PETSC_DEVICE_COPY_AUTO,
} PetscDeviceCopyMode;
extern __attribute__((visibility("default"))) const char *const PetscDeviceCopyModes[];

__attribute__((warn_unused_result)) static inline PetscDeviceCopyMode PetscOffloadMaskToDeviceCopyMode(PetscOffloadMask dest, PetscOffloadMask src)
{
  PetscDeviceCopyMode mode;

  ;
  do { if ((0 && __builtin_expect(! !(!(dest != PETSC_OFFLOAD_UNALLOCATED)), 0))) do { PetscError(((MPI_Comm)0x44000001), 372, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdevicetypes.h", 62, PETSC_ERROR_INITIAL, "Cannot copy to unallocated"); MPI_Abort(((MPI_Comm)0x44000001), 62); } while (0); } while (0);
  do { if ((0 && __builtin_expect(! !(!(src != PETSC_OFFLOAD_UNALLOCATED)), 0))) do { PetscError(((MPI_Comm)0x44000001), 373, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdevicetypes.h", 62, PETSC_ERROR_INITIAL, "Cannot copy from unallocated"); MPI_Abort(((MPI_Comm)0x44000001), 62); } while (0); } while (0);

  if ((((dest)&PETSC_OFFLOAD_GPU) == PETSC_OFFLOAD_GPU)) {
    mode = (((src)&PETSC_OFFLOAD_CPU) == PETSC_OFFLOAD_CPU) ? PETSC_DEVICE_COPY_HTOD : PETSC_DEVICE_COPY_DTOD;
  } else {
    mode = (((src)&PETSC_OFFLOAD_CPU) == PETSC_OFFLOAD_CPU) ? PETSC_DEVICE_COPY_HTOH : PETSC_DEVICE_COPY_DTOH;
  }
  return mode;
}

__attribute__((warn_unused_result)) static inline  PetscDeviceCopyMode PetscMemTypeToDeviceCopyMode(PetscMemType dest, PetscMemType src)
{
  if ((((dest)&0x1) == PETSC_MEMTYPE_HOST)) {
    return (((src)&0x1) == PETSC_MEMTYPE_HOST) ? PETSC_DEVICE_COPY_HTOH : PETSC_DEVICE_COPY_DTOH;
  } else {
    return (((src)&0x1) == PETSC_MEMTYPE_DEVICE) ? PETSC_DEVICE_COPY_DTOD : PETSC_DEVICE_COPY_HTOD;
  }
}
































 
typedef enum {
  PETSC_MEMORY_ACCESS_READ       = 0x1, 
  PETSC_MEMORY_ACCESS_WRITE      = 0x2, 
  PETSC_MEMORY_ACCESS_READ_WRITE = 0x3, 
} PetscMemoryAccessMode;




# 449 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdevicetypes.h"

__attribute__((warn_unused_result)) static inline  const char *PetscMemoryAccessModeToString(PetscMemoryAccessMode mode)
{




  switch (mode) {
    case PETSC_MEMORY_ACCESS_READ: return "PETSC_MEMORY_ACCESS_READ";
    case PETSC_MEMORY_ACCESS_WRITE: return "PETSC_MEMORY_ACCESS_WRITE";
    case PETSC_MEMORY_ACCESS_READ_WRITE: return "PETSC_MEMORY_ACCESS_READ_WRITE";
  }
  __builtin_unreachable();
  return "invalid";

}



# 5 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdevice.h" 2


# 21 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdevice.h"

 




 
extern __attribute__((visibility("default"))) PetscClassId PETSC_DEVICE_CLASSID;
extern __attribute__((visibility("default"))) PetscClassId PETSC_DEVICE_CONTEXT_CLASSID;

extern __attribute__((visibility("default"))) PetscErrorCode PetscDeviceInitializePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDeviceFinalizePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGetMemType(const void *, PetscMemType *);

 

extern __attribute__((visibility("default"))) PetscErrorCode  PetscDeviceCreate(PetscDeviceType, PetscInt, PetscDevice *);
extern __attribute__((visibility("default"))) PetscErrorCode  PetscDeviceDestroy(PetscDevice *);
extern __attribute__((visibility("default"))) PetscErrorCode  PetscDeviceConfigure(PetscDevice);
extern __attribute__((visibility("default"))) PetscErrorCode  PetscDeviceView(PetscDevice, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode  PetscDeviceGetType(PetscDevice, PetscDeviceType *);
extern __attribute__((visibility("default"))) PetscErrorCode  PetscDeviceGetDeviceId(PetscDevice, PetscInt *);
extern __attribute__((visibility("default"))) PetscDeviceType PETSC_DEVICE_DEFAULT(void);
extern __attribute__((visibility("default"))) PetscErrorCode  PetscDeviceSetDefaultDeviceType(PetscDeviceType);
extern __attribute__((visibility("default"))) PetscErrorCode  PetscDeviceInitialize(PetscDeviceType);
extern __attribute__((visibility("default"))) PetscBool       PetscDeviceInitialized(PetscDeviceType);
# 59 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdevice.h"

 

extern __attribute__((visibility("default"))) PetscErrorCode PetscDeviceContextCreate(PetscDeviceContext *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDeviceContextDestroy(PetscDeviceContext *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDeviceContextSetStreamType(PetscDeviceContext, PetscStreamType);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDeviceContextGetStreamType(PetscDeviceContext, PetscStreamType *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDeviceContextSetDevice(PetscDeviceContext, PetscDevice);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDeviceContextGetDevice(PetscDeviceContext, PetscDevice *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDeviceContextGetDeviceType(PetscDeviceContext, PetscDeviceType *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDeviceContextSetUp(PetscDeviceContext);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDeviceContextDuplicate(PetscDeviceContext, PetscDeviceContext *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDeviceContextQueryIdle(PetscDeviceContext, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDeviceContextWaitForContext(PetscDeviceContext, PetscDeviceContext);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDeviceContextForkWithStreamType(PetscDeviceContext, PetscStreamType, PetscInt, PetscDeviceContext **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDeviceContextFork(PetscDeviceContext, PetscInt, PetscDeviceContext **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDeviceContextJoin(PetscDeviceContext, PetscInt, PetscDeviceContextJoinMode, PetscDeviceContext **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDeviceContextSynchronize(PetscDeviceContext);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDeviceContextSetFromOptions(MPI_Comm, PetscDeviceContext);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDeviceContextView(PetscDeviceContext, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDeviceContextViewFromOptions(PetscDeviceContext, PetscObject, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDeviceContextGetCurrentContext(PetscDeviceContext *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDeviceContextSetCurrentContext(PetscDeviceContext);
# 104 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdevice.h"

 

extern __attribute__((visibility("default"))) PetscErrorCode PetscDeviceAllocate_Private(PetscDeviceContext, PetscBool, PetscMemType, size_t, size_t, void **restrict);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDeviceDeallocate_Private(PetscDeviceContext, void *restrict);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDeviceMemcpy(PetscDeviceContext, void *restrict, const void *restrict, size_t);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDeviceMemset(PetscDeviceContext, void *restrict, PetscInt, size_t);
# 118 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdevice.h"




































































 

































 




































 











































 








































 


# 12 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 2

# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsf.h" 1


 



# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsftypes.h" 1



 











 
typedef struct _p_PetscSF *PetscSF;







 
typedef const char *PetscSFType;




















 
typedef struct {
  PetscInt rank;   
  PetscInt index;  
} PetscSFNode;








 
typedef PetscSF VecScatter;







 
typedef PetscSFType VecScatterType;
# 9 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsf.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscvec.h" 1




 



# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscis.h" 1



 



# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsectiontypes.h" 1



 
















 
typedef struct _p_PetscSection *PetscSection;













 
typedef struct _p_PetscSectionSym *PetscSectionSym;










 
typedef const char *PetscSectionSymType;

# 11 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscis.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscistypes.h" 1



 







 
typedef struct _p_IS *IS;


















 
typedef struct _p_ISLocalToGlobalMapping *ISLocalToGlobalMapping;



















 
typedef struct _n_ISColoring *ISColoring;







 
typedef struct _n_PetscLayout *PetscLayout;

# 12 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscis.h" 2

 


extern __attribute__((visibility("default"))) PetscClassId IS_CLASSID;

extern __attribute__((visibility("default"))) PetscErrorCode ISInitializePackage(void);







 
typedef const char *ISType;




 
extern __attribute__((visibility("default"))) PetscFunctionList ISList;
extern __attribute__((visibility("default"))) PetscErrorCode    ISSetType(IS, ISType);
extern __attribute__((visibility("default"))) PetscErrorCode    ISGetType(IS, ISType *);
extern __attribute__((visibility("default"))) PetscErrorCode    ISRegister(const char[], PetscErrorCode (*)(IS));
extern __attribute__((visibility("default"))) PetscErrorCode    ISCreate(MPI_Comm, IS *);

extern __attribute__((visibility("default"))) PetscErrorCode ISDestroy(IS *);
extern __attribute__((visibility("default"))) PetscErrorCode ISSetPermutation(IS);
extern __attribute__((visibility("default"))) PetscErrorCode ISPermutation(IS, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode ISSetIdentity(IS);
extern __attribute__((visibility("default"))) PetscErrorCode ISIdentity(IS, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode ISContiguousLocal(IS, PetscInt, PetscInt, PetscInt *, PetscBool *);














 
typedef enum {
  IS_INFO_MIN    = -1,
  IS_SORTED      = 0,
  IS_UNIQUE      = 1,
  IS_PERMUTATION = 2,
  IS_INTERVAL    = 3,
  IS_IDENTITY    = 4,
  IS_INFO_MAX    = 5
} ISInfo;

typedef enum {
  IS_LOCAL,
  IS_GLOBAL
} ISInfoType;

extern __attribute__((visibility("default"))) PetscErrorCode ISSetInfo(IS, ISInfo, ISInfoType, PetscBool, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode ISGetInfo(IS, ISInfo, ISInfoType, PetscBool, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode ISClearInfoCache(IS, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode ISGetIndices(IS, const PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode ISRestoreIndices(IS, const PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode ISGetTotalIndices(IS, const PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode ISRestoreTotalIndices(IS, const PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode ISGetNonlocalIndices(IS, const PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode ISRestoreNonlocalIndices(IS, const PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode ISGetNonlocalIS(IS, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode ISRestoreNonlocalIS(IS, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode ISGetSize(IS, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode ISGetLocalSize(IS, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode ISInvertPermutation(IS, PetscInt, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode ISView(IS, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode ISViewFromOptions(IS, PetscObject, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode ISLoad(IS, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode ISEqual(IS, IS, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode ISEqualUnsorted(IS, IS, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode ISSort(IS);
extern __attribute__((visibility("default"))) PetscErrorCode ISSortRemoveDups(IS);
extern __attribute__((visibility("default"))) PetscErrorCode ISSorted(IS, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode ISDifference(IS, IS, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode ISSum(IS, IS, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode ISExpand(IS, IS, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode ISIntersect(IS, IS, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode ISGetMinMax(IS, PetscInt *, PetscInt *);

extern __attribute__((visibility("default"))) PetscErrorCode ISLocate(IS, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode ISGetPointRange(IS, PetscInt *, PetscInt *, const PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode ISRestorePointRange(IS, PetscInt *, PetscInt *, const PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode ISGetPointSubrange(IS, PetscInt, PetscInt, const PetscInt *);

extern __attribute__((visibility("default"))) PetscErrorCode ISGetBlockSize(IS, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode ISSetBlockSize(IS, PetscInt);

extern __attribute__((visibility("default"))) PetscErrorCode ISToGeneral(IS);

extern __attribute__((visibility("default"))) PetscErrorCode ISDuplicate(IS, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode ISCopy(IS, IS);
extern __attribute__((visibility("default"))) PetscErrorCode ISShift(IS, PetscInt, IS);
extern __attribute__((visibility("default"))) PetscErrorCode ISAllGather(IS, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode ISComplement(IS, PetscInt, PetscInt, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode ISConcatenate(MPI_Comm, PetscInt, const IS[], IS *);
extern __attribute__((visibility("default"))) PetscErrorCode ISListToPair(MPI_Comm, PetscInt, IS[], IS *, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode ISPairToList(IS, IS, PetscInt *, IS *[]);
extern __attribute__((visibility("default"))) PetscErrorCode ISEmbed(IS, IS, PetscBool, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode ISSortPermutation(IS, PetscBool, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode ISOnComm(IS, MPI_Comm, PetscCopyMode, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode ISRenumber(IS, IS, PetscInt *, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode ISCreateSubIS(IS, IS, IS *);

 
extern __attribute__((visibility("default"))) PetscErrorCode ISCreateGeneral(MPI_Comm, PetscInt, const PetscInt[], PetscCopyMode, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode ISGeneralSetIndices(IS, PetscInt, const PetscInt[], PetscCopyMode);
extern __attribute__((visibility("default"))) PetscErrorCode ISGeneralSetIndicesFromMask(IS, PetscInt, PetscInt, const PetscBool[]);
extern __attribute__((visibility("default"))) PetscErrorCode ISGeneralFilter(IS, PetscInt, PetscInt);

 
extern __attribute__((visibility("default"))) PetscErrorCode ISCreateBlock(MPI_Comm, PetscInt, PetscInt, const PetscInt[], PetscCopyMode, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode ISBlockSetIndices(IS, PetscInt, PetscInt, const PetscInt[], PetscCopyMode);
extern __attribute__((visibility("default"))) PetscErrorCode ISBlockGetIndices(IS, const PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode ISBlockRestoreIndices(IS, const PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode ISBlockGetLocalSize(IS, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode ISBlockGetSize(IS, PetscInt *);

 
extern __attribute__((visibility("default"))) PetscErrorCode ISCreateStride(MPI_Comm, PetscInt, PetscInt, PetscInt, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode ISStrideSetStride(IS, PetscInt, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode ISStrideGetInfo(IS, PetscInt *, PetscInt *);

 
extern __attribute__((visibility("default"))) PetscClassId IS_LTOGM_CLASSID;











 
typedef enum {
  IS_GTOLM_MASK,
  IS_GTOLM_DROP
} ISGlobalToLocalMappingMode;







 
typedef const char *ISLocalToGlobalMappingType;



extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingSetType(ISLocalToGlobalMapping, ISLocalToGlobalMappingType);
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingGetType(ISLocalToGlobalMapping, ISLocalToGlobalMappingType *);
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingRegister(const char[], PetscErrorCode (*)(ISLocalToGlobalMapping));
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingRegisterAll(void);
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingCreate(MPI_Comm, PetscInt, PetscInt, const PetscInt[], PetscCopyMode, ISLocalToGlobalMapping *);
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingCreateIS(IS, ISLocalToGlobalMapping *);
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingCreateSF(PetscSF, PetscInt, ISLocalToGlobalMapping *);
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingSetFromOptions(ISLocalToGlobalMapping);
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingSetUp(ISLocalToGlobalMapping);
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingView(ISLocalToGlobalMapping, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingViewFromOptions(ISLocalToGlobalMapping, PetscObject, const char[]);

extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingDestroy(ISLocalToGlobalMapping *);
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingApply(ISLocalToGlobalMapping, PetscInt, const PetscInt[], PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingApplyBlock(ISLocalToGlobalMapping, PetscInt, const PetscInt[], PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingApplyIS(ISLocalToGlobalMapping, IS, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode ISGlobalToLocalMappingApply(ISLocalToGlobalMapping, ISGlobalToLocalMappingMode, PetscInt, const PetscInt[], PetscInt *, PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode ISGlobalToLocalMappingApplyBlock(ISLocalToGlobalMapping, ISGlobalToLocalMappingMode, PetscInt, const PetscInt[], PetscInt *, PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode ISGlobalToLocalMappingApplyIS(ISLocalToGlobalMapping, ISGlobalToLocalMappingMode, IS, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingGetSize(ISLocalToGlobalMapping, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingGetNodeInfo(ISLocalToGlobalMapping, PetscInt *, PetscInt *[], PetscInt **[]);
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingRestoreNodeInfo(ISLocalToGlobalMapping, PetscInt *, PetscInt *[], PetscInt **[]);
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingGetInfo(ISLocalToGlobalMapping, PetscInt *, PetscInt *[], PetscInt *[], PetscInt **[]);
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingRestoreInfo(ISLocalToGlobalMapping, PetscInt *, PetscInt *[], PetscInt *[], PetscInt **[]);
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingGetBlockInfo(ISLocalToGlobalMapping, PetscInt *, PetscInt *[], PetscInt *[], PetscInt **[]);
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingRestoreBlockInfo(ISLocalToGlobalMapping, PetscInt *, PetscInt *[], PetscInt *[], PetscInt **[]);
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingGetIndices(ISLocalToGlobalMapping, const PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingRestoreIndices(ISLocalToGlobalMapping, const PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingGetBlockIndices(ISLocalToGlobalMapping, const PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingRestoreBlockIndices(ISLocalToGlobalMapping, const PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingConcatenate(MPI_Comm, PetscInt, const ISLocalToGlobalMapping[], ISLocalToGlobalMapping *);
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingGetBlockSize(ISLocalToGlobalMapping, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingSetBlockSize(ISLocalToGlobalMapping, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode ISLocalToGlobalMappingDuplicate(ISLocalToGlobalMapping, ISLocalToGlobalMapping *);

 















 
typedef enum {
  IS_COLORING_GLOBAL,
  IS_COLORING_LOCAL
} ISColoringType;
extern __attribute__((visibility("default"))) const char *const                ISColoringTypes[];
typedef unsigned short ISColoringValue;


extern __attribute__((visibility("default"))) PetscErrorCode ISAllGatherColors(MPI_Comm, PetscInt, ISColoringValue *, PetscInt *, ISColoringValue *[]);

extern __attribute__((visibility("default"))) PetscErrorCode ISColoringCreate(MPI_Comm, PetscInt, PetscInt, const ISColoringValue[], PetscCopyMode, ISColoring *);
extern __attribute__((visibility("default"))) PetscErrorCode ISColoringDestroy(ISColoring *);
extern __attribute__((visibility("default"))) PetscErrorCode ISColoringView(ISColoring, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode ISColoringViewFromOptions(ISColoring, PetscObject, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode ISColoringGetIS(ISColoring, PetscCopyMode, PetscInt *, IS *[]);
extern __attribute__((visibility("default"))) PetscErrorCode ISColoringRestoreIS(ISColoring, PetscCopyMode, IS *[]);
extern __attribute__((visibility("default"))) PetscErrorCode ISColoringReference(ISColoring);
extern __attribute__((visibility("default"))) PetscErrorCode ISColoringSetType(ISColoring, ISColoringType);
extern __attribute__((visibility("default"))) PetscErrorCode ISColoringGetType(ISColoring, ISColoringType *);
extern __attribute__((visibility("default"))) PetscErrorCode ISColoringGetColors(ISColoring, PetscInt *, PetscInt *, const ISColoringValue **);

 
extern __attribute__((visibility("default"))) PetscErrorCode ISBuildTwoSided(IS, IS, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode ISPartitioningToNumbering(IS, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode ISPartitioningCount(IS, PetscInt, PetscInt[]);

extern __attribute__((visibility("default"))) PetscErrorCode ISCompressIndicesGeneral(PetscInt, PetscInt, PetscInt, PetscInt, const IS[], IS[]);
extern __attribute__((visibility("default"))) PetscErrorCode ISCompressIndicesSorted(PetscInt, PetscInt, PetscInt, const IS[], IS[]);
extern __attribute__((visibility("default"))) PetscErrorCode ISExpandIndicesGeneral(PetscInt, PetscInt, PetscInt, PetscInt, const IS[], IS[]);

struct _n_PetscLayout {
  MPI_Comm               comm;
  PetscMPIInt            size;
  PetscInt               n, N;          
  PetscInt               rstart, rend;  
  PetscInt              *range;         
  PetscBool              range_alloc;   
  PetscInt               bs;           


 
  PetscInt               refcnt;        
  ISLocalToGlobalMapping mapping;       
  PetscBool              setupcalled;   
  PetscInt               oldn, oldN;    
  PetscInt               oldbs;         
};



















 
static inline PetscErrorCode PetscLayoutFindOwner(PetscLayout map, PetscInt idx, PetscMPIInt *owner)
{
  PetscMPIInt lo = 0, hi, t;

  ;
  *owner = -1;  




  hi = map->size;
  while (hi - lo > 1) {
    t = lo + (hi - lo) / 2;
    if (idx < map->range[t]) hi = t;
    else lo = t;
  }
  *owner = lo;
  return 0;
}





















 
static inline PetscErrorCode PetscLayoutFindOwnerIndex(PetscLayout map, PetscInt idx, PetscMPIInt *owner, PetscInt *lidx)
{
  PetscMPIInt lo = 0, hi, t;

  ;




  hi = map->size;
  while (hi - lo > 1) {
    t = lo + (hi - lo) / 2;
    if (idx < map->range[t]) hi = t;
    else lo = t;
  }
  if (owner) *owner = lo;
  if (lidx) *lidx = idx - map->range[lo];
  return 0;
}

extern __attribute__((visibility("default"))) PetscErrorCode PetscLayoutCreate(MPI_Comm, PetscLayout *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLayoutCreateFromSizes(MPI_Comm, PetscInt, PetscInt, PetscInt, PetscLayout *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLayoutCreateFromRanges(MPI_Comm, const PetscInt[], PetscCopyMode, PetscInt, PetscLayout *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLayoutSetUp(PetscLayout);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLayoutDestroy(PetscLayout *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLayoutDuplicate(PetscLayout, PetscLayout *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLayoutReference(PetscLayout, PetscLayout *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLayoutSetLocalSize(PetscLayout, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLayoutGetLocalSize(PetscLayout, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLayoutSetSize(PetscLayout, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLayoutGetSize(PetscLayout, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLayoutSetBlockSize(PetscLayout, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLayoutGetBlockSize(PetscLayout, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLayoutGetRange(PetscLayout, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLayoutGetRanges(PetscLayout, const PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLayoutCompare(PetscLayout, PetscLayout, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLayoutSetISLocalToGlobalMapping(PetscLayout, ISLocalToGlobalMapping);
extern __attribute__((visibility("default"))) PetscErrorCode PetscLayoutMapLocal(PetscLayout, PetscInt, const PetscInt[], PetscInt *, PetscInt **, PetscInt **);

extern __attribute__((visibility("default"))) PetscErrorCode PetscParallelSortInt(PetscLayout, PetscLayout, PetscInt *, PetscInt *);

extern __attribute__((visibility("default"))) PetscErrorCode ISGetLayout(IS, PetscLayout *);
extern __attribute__((visibility("default"))) PetscErrorCode ISSetLayout(IS, PetscLayout);

# 12 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscvec.h" 2



 







 
typedef struct _p_Vec *Vec;







 
typedef enum {
  SCATTER_FORWARD       = 0,
  SCATTER_REVERSE       = 1,
  SCATTER_FORWARD_LOCAL = 2,
  SCATTER_REVERSE_LOCAL = 3,
  SCATTER_LOCAL         = 2
} ScatterMode;









 










 










 











 







 
typedef const char *VecType;
# 110 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscvec.h"

 
extern __attribute__((visibility("default"))) PetscErrorCode VecScatterSetType(VecScatter, VecScatterType);
extern __attribute__((visibility("default"))) PetscErrorCode VecScatterGetType(VecScatter, VecScatterType *);
extern __attribute__((visibility("default"))) PetscErrorCode VecScatterSetFromOptions(VecScatter);
extern __attribute__((visibility("default"))) PetscErrorCode VecScatterRegister(const char[], PetscErrorCode (*)(VecScatter));
extern __attribute__((visibility("default"))) PetscErrorCode VecScatterCreate(Vec, IS, Vec, IS, VecScatter *);

 


extern __attribute__((visibility("default"))) PetscClassId VEC_CLASSID;
extern __attribute__((visibility("default"))) PetscClassId PETSCSF_CLASSID;

extern __attribute__((visibility("default"))) PetscErrorCode VecInitializePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode VecFinalizePackage(void);

extern __attribute__((visibility("default"))) PetscErrorCode VecCreate(MPI_Comm, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode VecCreateSeq(MPI_Comm, PetscInt, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode VecCreateMPI(MPI_Comm, PetscInt, PetscInt, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode VecCreateSeqWithArray(MPI_Comm, PetscInt, PetscInt, const PetscScalar[], Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode VecCreateMPIWithArray(MPI_Comm, PetscInt, PetscInt, PetscInt, const PetscScalar[], Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode VecCreateShared(MPI_Comm, PetscInt, PetscInt, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode VecCreateNode(MPI_Comm, PetscInt, PetscInt, Vec *);

extern __attribute__((visibility("default"))) PetscErrorCode VecSetFromOptions(Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecViewFromOptions(Vec, PetscObject, const char[]);

extern __attribute__((visibility("default"))) PetscErrorCode VecSetUp(Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecDestroy(Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode VecZeroEntries(Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecSetOptionsPrefix(Vec, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecAppendOptionsPrefix(Vec, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetOptionsPrefix(Vec, const char *[]);

extern __attribute__((visibility("default"))) PetscErrorCode VecSetSizes(Vec, PetscInt, PetscInt);

extern __attribute__((visibility("default"))) PetscErrorCode VecDotNorm2(Vec, Vec, PetscScalar *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode VecDot(Vec, Vec, PetscScalar *);
extern __attribute__((visibility("default"))) PetscErrorCode VecDotRealPart(Vec, Vec, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode VecTDot(Vec, Vec, PetscScalar *);
extern __attribute__((visibility("default"))) PetscErrorCode VecMDot(Vec, PetscInt, const Vec[], PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecMTDot(Vec, PetscInt, const Vec[], PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetSubVector(Vec, IS, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode VecRestoreSubVector(Vec, IS, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode VecConcatenate(PetscInt, const Vec[], Vec *, IS *[]);







 
typedef enum {
  NORM_1         = 0,
  NORM_2         = 1,
  NORM_FROBENIUS = 2,
  NORM_INFINITY  = 3,
  NORM_1_AND_2   = 4
} NormType;
extern __attribute__((visibility("default"))) const char *const NormTypes[];










 









 









 









 









 






 







 


 
typedef enum {
  REDUCTION_SUM_REALPART       = 10,
  REDUCTION_MEAN_REALPART      = 11,
  REDUCTION_SUM_IMAGINARYPART  = 12,
  REDUCTION_MEAN_IMAGINARYPART = 13
} ReductionType;









 









 









 









 

extern __attribute__((visibility("default"))) PetscErrorCode VecNorm(Vec, NormType, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode VecNormAvailable(Vec, NormType, PetscBool *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode VecNormalize(Vec, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode VecSum(Vec, PetscScalar *);
extern __attribute__((visibility("default"))) PetscErrorCode VecMean(Vec, PetscScalar *);
extern __attribute__((visibility("default"))) PetscErrorCode VecMax(Vec, PetscInt *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode VecMin(Vec, PetscInt *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode VecScale(Vec, PetscScalar);
extern __attribute__((visibility("default"))) PetscErrorCode VecCopy(Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecSetRandom(Vec, PetscRandom);
extern __attribute__((visibility("default"))) PetscErrorCode VecSet(Vec, PetscScalar);
extern __attribute__((visibility("default"))) PetscErrorCode VecSetInf(Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecSwap(Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecAXPY(Vec, PetscScalar, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecAXPBY(Vec, PetscScalar, PetscScalar, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecMAXPY(Vec, PetscInt, const PetscScalar[], Vec[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecAYPX(Vec, PetscScalar, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecWAXPY(Vec, PetscScalar, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecAXPBYPCZ(Vec, PetscScalar, PetscScalar, PetscScalar, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecPointwiseMax(Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecPointwiseMaxAbs(Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecPointwiseMin(Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecPointwiseMult(Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecPointwiseDivide(Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecMaxPointwiseDivide(Vec, Vec, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode VecShift(Vec, PetscScalar);
extern __attribute__((visibility("default"))) PetscErrorCode VecReciprocal(Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecPermute(Vec, IS, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode VecSqrtAbs(Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecLog(Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecExp(Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecAbs(Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecDuplicate(Vec, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode VecDuplicateVecs(Vec, PetscInt, Vec *[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecDestroyVecs(PetscInt, Vec *[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecStrideNormAll(Vec, NormType, PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecStrideMaxAll(Vec, PetscInt[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecStrideMinAll(Vec, PetscInt[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecStrideScaleAll(Vec, const PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecStrideSumAll(Vec, PetscScalar *);
extern __attribute__((visibility("default"))) PetscErrorCode VecUniqueEntries(Vec, PetscInt *, PetscScalar **);

extern __attribute__((visibility("default"))) PetscErrorCode VecStrideNorm(Vec, PetscInt, NormType, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode VecStrideMax(Vec, PetscInt, PetscInt *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode VecStrideMin(Vec, PetscInt, PetscInt *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode VecStrideScale(Vec, PetscInt, PetscScalar);
extern __attribute__((visibility("default"))) PetscErrorCode VecStrideSum(Vec, PetscInt, PetscScalar *);
extern __attribute__((visibility("default"))) PetscErrorCode VecStrideSet(Vec, PetscInt, PetscScalar);

extern __attribute__((visibility("default"))) PetscErrorCode VecStrideGather(Vec, PetscInt, Vec, InsertMode);
extern __attribute__((visibility("default"))) PetscErrorCode VecStrideScatter(Vec, PetscInt, Vec, InsertMode);
extern __attribute__((visibility("default"))) PetscErrorCode VecStrideGatherAll(Vec, Vec[], InsertMode);
extern __attribute__((visibility("default"))) PetscErrorCode VecStrideScatterAll(Vec[], Vec, InsertMode);

extern __attribute__((visibility("default"))) PetscErrorCode VecStrideSubSetScatter(Vec, PetscInt, const PetscInt[], const PetscInt[], Vec, InsertMode);
extern __attribute__((visibility("default"))) PetscErrorCode VecStrideSubSetGather(Vec, PetscInt, const PetscInt[], const PetscInt[], Vec, InsertMode);

extern __attribute__((visibility("default"))) PetscErrorCode VecSetValues(Vec, PetscInt, const PetscInt[], const PetscScalar[], InsertMode);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetValues(Vec, PetscInt, const PetscInt[], PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecAssemblyBegin(Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecAssemblyEnd(Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecStashSetInitialSize(Vec, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode VecStashView(Vec, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode VecStashViewFromOptions(Vec, PetscObject, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecStashGetInfo(Vec, PetscInt *, PetscInt *, PetscInt *, PetscInt *);

extern __attribute__((visibility("default"))) PetscErrorCode VecSetPreallocationCOO(Vec, PetscCount, const PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecSetPreallocationCOOLocal(Vec, PetscCount, PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecSetValuesCOO(Vec, const PetscScalar[], InsertMode);




























 
static inline PetscErrorCode VecSetValue(Vec v, PetscInt i, PetscScalar va, InsertMode mode)
{
  return VecSetValues(v, 1, &i, &va, mode);
}

extern __attribute__((visibility("default"))) PetscErrorCode VecSetBlockSize(Vec, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetBlockSize(Vec, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode VecSetValuesBlocked(Vec, PetscInt, const PetscInt[], const PetscScalar[], InsertMode);

 
extern __attribute__((visibility("default"))) PetscFunctionList VecList;
extern __attribute__((visibility("default"))) PetscErrorCode    VecSetType(Vec, VecType);
extern __attribute__((visibility("default"))) PetscErrorCode    VecGetType(Vec, VecType *);
extern __attribute__((visibility("default"))) PetscErrorCode    VecRegister(const char[], PetscErrorCode (*)(Vec));

extern __attribute__((visibility("default"))) PetscErrorCode VecScatterBegin(VecScatter, Vec, Vec, InsertMode, ScatterMode);
extern __attribute__((visibility("default"))) PetscErrorCode VecScatterEnd(VecScatter, Vec, Vec, InsertMode, ScatterMode);
extern __attribute__((visibility("default"))) PetscErrorCode VecScatterDestroy(VecScatter *);
extern __attribute__((visibility("default"))) PetscErrorCode VecScatterSetUp(VecScatter);
extern __attribute__((visibility("default"))) PetscErrorCode VecScatterCopy(VecScatter, VecScatter *);
extern __attribute__((visibility("default"))) PetscErrorCode VecScatterView(VecScatter, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode VecScatterViewFromOptions(VecScatter, PetscObject, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecScatterRemap(VecScatter, PetscInt[], PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecScatterGetMerged(VecScatter, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode VecGetArray4d(Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscScalar ****[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecRestoreArray4d(Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscScalar ****[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetArray3d(Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscScalar ***[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecRestoreArray3d(Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscScalar ***[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetArray2d(Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscScalar **[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecRestoreArray2d(Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscScalar **[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetArray1d(Vec, PetscInt, PetscInt, PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecRestoreArray1d(Vec, PetscInt, PetscInt, PetscScalar *[]);

extern __attribute__((visibility("default"))) PetscErrorCode VecGetArray4dWrite(Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscScalar ****[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetArray4dWrite(Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscScalar ****[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecRestoreArray4dWrite(Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscScalar ****[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetArray3dWrite(Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscScalar ***[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecRestoreArray3dWrite(Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscScalar ***[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetArray2dWrite(Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscScalar **[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecRestoreArray2dWrite(Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscScalar **[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetArray1dWrite(Vec, PetscInt, PetscInt, PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecRestoreArray1dWrite(Vec, PetscInt, PetscInt, PetscScalar *[]);

extern __attribute__((visibility("default"))) PetscErrorCode VecGetArray4dRead(Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscScalar ****[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecRestoreArray4dRead(Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscScalar ****[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetArray3dRead(Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscScalar ***[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecRestoreArray3dRead(Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscScalar ***[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetArray2dRead(Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscScalar **[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecRestoreArray2dRead(Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscScalar **[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetArray1dRead(Vec, PetscInt, PetscInt, PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecRestoreArray1dRead(Vec, PetscInt, PetscInt, PetscScalar *[]);

extern __attribute__((visibility("default"))) PetscErrorCode VecPlaceArray(Vec, const PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecResetArray(Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecReplaceArray(Vec, const PetscScalar[]);

extern __attribute__((visibility("default"))) PetscErrorCode VecGetArrays(const Vec[], PetscInt, PetscScalar **[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecRestoreArrays(const Vec[], PetscInt, PetscScalar **[]);

extern __attribute__((visibility("default"))) PetscErrorCode VecView(Vec, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode VecViewNative(Vec, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode VecEqual(Vec, Vec, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode VecLoad(Vec, PetscViewer);

extern __attribute__((visibility("default"))) PetscErrorCode VecGetSize(Vec, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetLocalSize(Vec, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetOwnershipRange(Vec, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetOwnershipRanges(Vec, const PetscInt *[]);

extern __attribute__((visibility("default"))) PetscErrorCode VecSetLocalToGlobalMapping(Vec, ISLocalToGlobalMapping);
extern __attribute__((visibility("default"))) PetscErrorCode VecSetValuesLocal(Vec, PetscInt, const PetscInt[], const PetscScalar[], InsertMode);

extern __attribute__((visibility("default"))) PetscErrorCode VecCUDAGetArray(Vec, PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode VecCUDARestoreArray(Vec, PetscScalar **);

extern __attribute__((visibility("default"))) PetscErrorCode VecCUDAGetArrayRead(Vec, const PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode VecCUDARestoreArrayRead(Vec, const PetscScalar **);

extern __attribute__((visibility("default"))) PetscErrorCode VecCUDAGetArrayWrite(Vec, PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode VecCUDARestoreArrayWrite(Vec, PetscScalar **);

extern __attribute__((visibility("default"))) PetscErrorCode VecCUDAPlaceArray(Vec, const PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecCUDAReplaceArray(Vec, const PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecCUDAResetArray(Vec);

extern __attribute__((visibility("default"))) PetscErrorCode VecHIPGetArray(Vec, PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode VecHIPRestoreArray(Vec, PetscScalar **);

extern __attribute__((visibility("default"))) PetscErrorCode VecHIPGetArrayRead(Vec, const PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode VecHIPRestoreArrayRead(Vec, const PetscScalar **);

extern __attribute__((visibility("default"))) PetscErrorCode VecHIPGetArrayWrite(Vec, PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode VecHIPRestoreArrayWrite(Vec, PetscScalar **);

extern __attribute__((visibility("default"))) PetscErrorCode VecHIPPlaceArray(Vec, const PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecHIPReplaceArray(Vec, const PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecHIPResetArray(Vec);

extern __attribute__((visibility("default"))) PetscErrorCode VecViennaCLGetCLContext(Vec, uintptr_t *);
extern __attribute__((visibility("default"))) PetscErrorCode VecViennaCLGetCLQueue(Vec, uintptr_t *);
extern __attribute__((visibility("default"))) PetscErrorCode VecViennaCLGetCLMemRead(Vec, uintptr_t *);
extern __attribute__((visibility("default"))) PetscErrorCode VecViennaCLGetCLMemWrite(Vec, uintptr_t *);
extern __attribute__((visibility("default"))) PetscErrorCode VecViennaCLRestoreCLMemWrite(Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecViennaCLGetCLMem(Vec, uintptr_t *);
extern __attribute__((visibility("default"))) PetscErrorCode VecViennaCLRestoreCLMem(Vec);




























 
static inline PetscErrorCode VecSetValueLocal(Vec v, PetscInt i, PetscScalar va, InsertMode mode)
{
  return VecSetValuesLocal(v, 1, &i, &va, mode);
}

extern __attribute__((visibility("default"))) PetscErrorCode VecSetValuesBlockedLocal(Vec, PetscInt, const PetscInt[], const PetscScalar[], InsertMode);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetLocalToGlobalMapping(Vec, ISLocalToGlobalMapping *);

extern __attribute__((visibility("default"))) PetscErrorCode VecDotBegin(Vec, Vec, PetscScalar *);
extern __attribute__((visibility("default"))) PetscErrorCode VecDotEnd(Vec, Vec, PetscScalar *);
extern __attribute__((visibility("default"))) PetscErrorCode VecTDotBegin(Vec, Vec, PetscScalar *);
extern __attribute__((visibility("default"))) PetscErrorCode VecTDotEnd(Vec, Vec, PetscScalar *);
extern __attribute__((visibility("default"))) PetscErrorCode VecNormBegin(Vec, NormType, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode VecNormEnd(Vec, NormType, PetscReal *);

extern __attribute__((visibility("default"))) PetscErrorCode VecMDotBegin(Vec, PetscInt, const Vec[], PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecMDotEnd(Vec, PetscInt, const Vec[], PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecMTDotBegin(Vec, PetscInt, const Vec[], PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecMTDotEnd(Vec, PetscInt, const Vec[], PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCommSplitReductionBegin(MPI_Comm);

extern __attribute__((visibility("default"))) PetscErrorCode VecBindToCPU(Vec, PetscBool);
__attribute__((deprecated)) static inline PetscErrorCode VecPinToCPU(Vec v, PetscBool flg)
{
  return VecBindToCPU(v, flg);
}
extern __attribute__((visibility("default"))) PetscErrorCode VecBoundToCPU(Vec, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode VecSetBindingPropagates(Vec, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetBindingPropagates(Vec, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode VecSetPinnedMemoryMin(Vec, size_t);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetPinnedMemoryMin(Vec, size_t *);

extern __attribute__((visibility("default"))) PetscErrorCode VecGetOffloadMask(Vec, PetscOffloadMask *);

typedef enum {
  VEC_IGNORE_OFF_PROC_ENTRIES,
  VEC_IGNORE_NEGATIVE_INDICES,
  VEC_SUBSET_OFF_PROC_ENTRIES
} VecOption;
extern __attribute__((visibility("default"))) PetscErrorCode VecSetOption(Vec, VecOption, PetscBool);

extern __attribute__((visibility("default"))) PetscErrorCode VecGetArray(Vec, PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetArrayWrite(Vec, PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetArrayRead(Vec, const PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode VecRestoreArray(Vec, PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode VecRestoreArrayWrite(Vec, PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode VecRestoreArrayRead(Vec, const PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode VecCreateLocalVector(Vec, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetLocalVector(Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecRestoreLocalVector(Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetLocalVectorRead(Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecRestoreLocalVectorRead(Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetArrayAndMemType(Vec, PetscScalar **, PetscMemType *);
extern __attribute__((visibility("default"))) PetscErrorCode VecRestoreArrayAndMemType(Vec, PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetArrayReadAndMemType(Vec, const PetscScalar **, PetscMemType *);
extern __attribute__((visibility("default"))) PetscErrorCode VecRestoreArrayReadAndMemType(Vec, const PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetArrayWriteAndMemType(Vec, PetscScalar **, PetscMemType *);
extern __attribute__((visibility("default"))) PetscErrorCode VecRestoreArrayWriteAndMemType(Vec, PetscScalar **);




















 
static inline PetscErrorCode VecGetArrayPair(Vec x, Vec y, PetscScalar **xv, PetscScalar **yv)
{
  ;
  do { PetscErrorCode ierr_q_; ; ierr_q_ = VecGetArray(y, yv); if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 603, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscvec.h", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
  if (x == y) *xv = *yv;
  else do { PetscErrorCode ierr_q_; ; ierr_q_ = VecGetArrayRead(x, (const PetscScalar * *)xv); if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 605, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscvec.h", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
  return 0;
}




















 
static inline PetscErrorCode VecRestoreArrayPair(Vec x, Vec y, PetscScalar **xv, PetscScalar **yv)
{
  ;
  do { PetscErrorCode ierr_q_; ; ierr_q_ = VecRestoreArray(y, yv); if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 632, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscvec.h", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
  if (x != y) do { PetscErrorCode ierr_q_; ; ierr_q_ = VecRestoreArrayRead(x, (const PetscScalar * *)xv); if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 633, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscvec.h", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
  return 0;
}

# 669 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscvec.h"
   








 
typedef enum {
  VECOP_DUPLICATE  = 0,
  VECOP_VIEW       = 33,
  VECOP_LOAD       = 41,
  VECOP_VIEWNATIVE = 68,
  VECOP_LOADNATIVE = 69
} VecOperation;
extern __attribute__((visibility("default"))) PetscErrorCode VecSetOperation(Vec, VecOperation, void (*)(void));




 
extern __attribute__((visibility("default"))) PetscErrorCode VecMPISetGhost(Vec, PetscInt, const PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode VecCreateGhost(MPI_Comm, PetscInt, PetscInt, PetscInt, const PetscInt[], Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode VecCreateGhostWithArray(MPI_Comm, PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscScalar[], Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode VecCreateGhostBlock(MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, const PetscInt[], Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode VecCreateGhostBlockWithArray(MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscScalar[], Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode VecGhostGetLocalForm(Vec, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode VecGhostRestoreLocalForm(Vec, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode VecGhostIsLocalForm(Vec, Vec, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode VecGhostUpdateBegin(Vec, InsertMode, ScatterMode);
extern __attribute__((visibility("default"))) PetscErrorCode VecGhostUpdateEnd(Vec, InsertMode, ScatterMode);

extern __attribute__((visibility("default"))) PetscErrorCode VecConjugate(Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecImaginaryPart(Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecRealPart(Vec);

extern __attribute__((visibility("default"))) PetscErrorCode VecScatterCreateToAll(Vec, VecScatter *, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode VecScatterCreateToZero(Vec, VecScatter *, Vec *);

extern __attribute__((visibility("default"))) PetscErrorCode ISComplementVec(IS, Vec, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode VecPow(Vec, PetscScalar);
extern __attribute__((visibility("default"))) PetscErrorCode VecMedian(Vec, Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecWhichInactive(Vec, Vec, Vec, Vec, PetscBool, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode VecWhichBetween(Vec, Vec, Vec, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode VecWhichBetweenOrEqual(Vec, Vec, Vec, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode VecWhichGreaterThan(Vec, Vec, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode VecWhichLessThan(Vec, Vec, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode VecWhichEqual(Vec, Vec, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode VecISAXPY(Vec, IS, PetscScalar, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecISCopy(Vec, IS, ScatterMode, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecISSet(Vec, IS, PetscScalar);
extern __attribute__((visibility("default"))) PetscErrorCode VecBoundGradientProjection(Vec, Vec, Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecStepBoundInfo(Vec, Vec, Vec, Vec, PetscReal *, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode VecStepMax(Vec, Vec, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode VecStepMaxBounded(Vec, Vec, Vec, Vec, PetscReal *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerMathematicaGetVector(PetscViewer, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerMathematicaPutVector(PetscViewer, Vec);













 
struct _n_Vecs {
  PetscInt n;
  Vec      v;
};
typedef struct _n_Vecs     *Vecs;
extern __attribute__((visibility("default"))) PetscErrorCode VecsDestroy(Vecs);
extern __attribute__((visibility("default"))) PetscErrorCode VecsCreateSeq(MPI_Comm, PetscInt, PetscInt, Vecs *);
extern __attribute__((visibility("default"))) PetscErrorCode VecsCreateSeqWithArray(MPI_Comm, PetscInt, PetscInt, PetscScalar *, Vecs *);
extern __attribute__((visibility("default"))) PetscErrorCode VecsDuplicate(Vecs, Vecs *);

# 788 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscvec.h"

extern __attribute__((visibility("default"))) PetscErrorCode VecNestGetSubVecs(Vec, PetscInt *, Vec **);
extern __attribute__((visibility("default"))) PetscErrorCode VecNestGetSubVec(Vec, PetscInt, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode VecNestSetSubVecs(Vec, PetscInt, PetscInt *, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode VecNestSetSubVec(Vec, PetscInt, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecCreateNest(MPI_Comm, PetscInt, IS *, Vec *, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode VecNestGetSize(Vec, PetscInt *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscOptionsGetVec(PetscOptions, const char[], const char[], Vec, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode VecChop(Vec, PetscReal);

extern __attribute__((visibility("default"))) PetscErrorCode VecGetLayout(Vec, PetscLayout *);
extern __attribute__((visibility("default"))) PetscErrorCode VecSetLayout(Vec, PetscLayout);

extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionVecView(PetscSection, Vec, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode VecGetValuesSection(Vec, PetscSection, PetscInt, PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode VecSetValuesSection(Vec, PetscSection, PetscInt, PetscScalar[], InsertMode);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionVecNorm(PetscSection, PetscSection, Vec, NormType, PetscReal[]);











 
typedef struct _p_VecTagger *VecTagger;





 
typedef const char *VecTaggerType;
 

 

 

 

 


extern __attribute__((visibility("default"))) PetscClassId      VEC_TAGGER_CLASSID;
extern __attribute__((visibility("default"))) PetscFunctionList VecTaggerList;
extern __attribute__((visibility("default"))) PetscErrorCode    VecTaggerRegister(const char[], PetscErrorCode (*)(VecTagger));

extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerCreate(MPI_Comm, VecTagger *);
extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerSetBlockSize(VecTagger, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerGetBlockSize(VecTagger, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerSetType(VecTagger, VecTaggerType);
extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerGetType(VecTagger, VecTaggerType *);
extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerSetInvert(VecTagger, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerGetInvert(VecTagger, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerSetFromOptions(VecTagger);
extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerSetUp(VecTagger);
extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerView(VecTagger, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerComputeIS(VecTagger, Vec, IS *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerDestroy(VecTagger *);








 
typedef struct {
  PetscScalar min;
  PetscScalar max;
} VecTaggerBox;
extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerComputeBoxes(VecTagger, Vec, PetscInt *, VecTaggerBox **, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerAbsoluteSetBox(VecTagger, VecTaggerBox *);
extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerAbsoluteGetBox(VecTagger, const VecTaggerBox **);

extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerRelativeSetBox(VecTagger, VecTaggerBox *);
extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerRelativeGetBox(VecTagger, const VecTaggerBox **);

extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerCDFSetBox(VecTagger, VecTaggerBox *);
extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerCDFGetBox(VecTagger, const VecTaggerBox **);








 
typedef enum {
  VECTAGGER_CDF_GATHER,
  VECTAGGER_CDF_ITERATIVE,
  VECTAGGER_CDF_NUM_METHODS
} VecTaggerCDFMethod;
extern __attribute__((visibility("default"))) const char *const VecTaggerCDFMethods[];

extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerCDFSetMethod(VecTagger, VecTaggerCDFMethod);
extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerCDFGetMethod(VecTagger, VecTaggerCDFMethod *);
extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerCDFIterativeSetTolerances(VecTagger, PetscInt, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerCDFIterativeGetTolerances(VecTagger, PetscInt *, PetscReal *, PetscReal *);

extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerOrSetSubs(VecTagger, PetscInt, VecTagger *, PetscCopyMode);
extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerOrGetSubs(VecTagger, PetscInt *, VecTagger **);

extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerAndSetSubs(VecTagger, PetscInt, VecTagger *, PetscCopyMode);
extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerAndGetSubs(VecTagger, PetscInt *, VecTagger **);

extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerInitializePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode VecTaggerFinalizePackage(void);

# 912 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscvec.h"

# 10 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsf.h" 2

 

extern __attribute__((visibility("default"))) PetscClassId PETSCSF_CLASSID;

# 23 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsf.h"














 
typedef enum {
  PETSCSF_PATTERN_GENERAL = 0,
  PETSCSF_PATTERN_ALLGATHER,
  PETSCSF_PATTERN_GATHER,
  PETSCSF_PATTERN_ALLTOALL
} PetscSFPattern;











 
typedef enum {
  PETSCSF_WINDOW_SYNC_FENCE,
  PETSCSF_WINDOW_SYNC_LOCK,
  PETSCSF_WINDOW_SYNC_ACTIVE
} PetscSFWindowSyncType;
extern __attribute__((visibility("default"))) const char *const PetscSFWindowSyncTypes[];












 
typedef enum {
  PETSCSF_WINDOW_FLAVOR_CREATE,
  PETSCSF_WINDOW_FLAVOR_DYNAMIC,
  PETSCSF_WINDOW_FLAVOR_ALLOCATE,
  PETSCSF_WINDOW_FLAVOR_SHARED
} PetscSFWindowFlavorType;
extern __attribute__((visibility("default"))) const char *const PetscSFWindowFlavorTypes[];











 
typedef enum {
  PETSCSF_DUPLICATE_CONFONLY,
  PETSCSF_DUPLICATE_RANKS,
  PETSCSF_DUPLICATE_GRAPH
} PetscSFDuplicateOption;
extern __attribute__((visibility("default"))) const char *const PetscSFDuplicateOptions[];

extern __attribute__((visibility("default"))) PetscFunctionList PetscSFList;
extern __attribute__((visibility("default"))) PetscErrorCode    PetscSFRegister(const char[], PetscErrorCode (*)(PetscSF));

extern __attribute__((visibility("default"))) PetscErrorCode PetscSFInitializePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFFinalizePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFCreate(MPI_Comm, PetscSF *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFDestroy(PetscSF *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFSetType(PetscSF, PetscSFType);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFGetType(PetscSF, PetscSFType *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFView(PetscSF, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFViewFromOptions(PetscSF, PetscObject, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFSetUp(PetscSF);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFSetFromOptions(PetscSF);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFDuplicate(PetscSF, PetscSFDuplicateOption, PetscSF *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFWindowSetSyncType(PetscSF, PetscSFWindowSyncType);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFWindowGetSyncType(PetscSF, PetscSFWindowSyncType *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFWindowSetFlavorType(PetscSF, PetscSFWindowFlavorType);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFWindowGetFlavorType(PetscSF, PetscSFWindowFlavorType *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFWindowSetInfo(PetscSF, MPI_Info);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFWindowGetInfo(PetscSF, MPI_Info *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFSetRankOrder(PetscSF, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFSetGraph(PetscSF, PetscInt, PetscInt, PetscInt *, PetscCopyMode, PetscSFNode *, PetscCopyMode);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFSetGraphWithPattern(PetscSF, PetscLayout, PetscSFPattern);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFGetGraph(PetscSF, PetscInt *, PetscInt *, const PetscInt **, const PetscSFNode **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFGetLeafRange(PetscSF, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFCreateEmbeddedRootSF(PetscSF, PetscInt, const PetscInt *, PetscSF *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFCreateEmbeddedLeafSF(PetscSF, PetscInt, const PetscInt *, PetscSF *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFReset(PetscSF);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFSetUpRanks(PetscSF, MPI_Group);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFGetRootRanks(PetscSF, PetscInt *, const PetscMPIInt **, const PetscInt **, const PetscInt **, const PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFGetLeafRanks(PetscSF, PetscInt *, const PetscMPIInt **, const PetscInt **, const PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFGetGroups(PetscSF, MPI_Group *, MPI_Group *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFGetMultiSF(PetscSF, PetscSF *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFCreateInverseSF(PetscSF, PetscSF *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFConcatenate(MPI_Comm, PetscInt, PetscSF[], PetscBool, PetscInt[], PetscSF *);

 
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFSetGraphLayout(PetscSF, PetscLayout, PetscInt, PetscInt *, PetscCopyMode, const PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFGetGraphLayout(PetscSF, PetscLayout *, PetscInt *, const PetscInt *[], PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFCreateFromLayouts(PetscLayout, PetscLayout, PetscSF *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFCreateByMatchingIndices(PetscLayout, PetscInt, const PetscInt *, const PetscInt *, PetscInt, PetscInt, const PetscInt *, const PetscInt *, PetscInt, PetscSF *, PetscSF *);

 
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFSetGraphSection(PetscSF, PetscSection, PetscSection);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFCreateRemoteOffsets(PetscSF, PetscSection, PetscSection, PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFDistributeSection(PetscSF, PetscSection, PetscInt **, PetscSection);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFCreateSectionSF(PetscSF, PetscSection, PetscInt[], PetscSection, PetscSF *);

 
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFBcastBegin(PetscSF, MPI_Datatype, const void *, void *, MPI_Op)  ;
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFBcastEnd(PetscSF, MPI_Datatype, const void *, void *, MPI_Op)  ;
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFBcastWithMemTypeBegin(PetscSF, MPI_Datatype, PetscMemType, const void *, PetscMemType, void *, MPI_Op)  ;

 
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFReduceBegin(PetscSF, MPI_Datatype, const void *, void *, MPI_Op)  ;
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFReduceEnd(PetscSF, MPI_Datatype, const void *, void *, MPI_Op)  ;
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFReduceWithMemTypeBegin(PetscSF, MPI_Datatype, PetscMemType, const void *, PetscMemType, void *, MPI_Op)  ;

 
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFFetchAndOpBegin(PetscSF, MPI_Datatype, void *, const void *, void *, MPI_Op)   ;
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFFetchAndOpEnd(PetscSF, MPI_Datatype, void *, const void *, void *, MPI_Op)   ;

extern __attribute__((visibility("default"))) PetscErrorCode PetscSFFetchAndOpWithMemTypeBegin(PetscSF, MPI_Datatype, PetscMemType, void *, PetscMemType, const void *, PetscMemType, void *, MPI_Op)   ;

 
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFComputeDegreeBegin(PetscSF, const PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFComputeDegreeEnd(PetscSF, const PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFComputeMultiRootOriginalNumbering(PetscSF, const PetscInt[], PetscInt *, PetscInt *[]);
 
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFGatherBegin(PetscSF, MPI_Datatype, const void *, void *)  ;
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFGatherEnd(PetscSF, MPI_Datatype, const void *, void *)  ;
 
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFScatterBegin(PetscSF, MPI_Datatype, const void *, void *)  ;
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFScatterEnd(PetscSF, MPI_Datatype, const void *, void *)  ;

extern __attribute__((visibility("default"))) PetscErrorCode PetscSFCompose(PetscSF, PetscSF, PetscSF *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSFComposeInverse(PetscSF, PetscSF, PetscSF *);



__attribute__((deprecated))
static inline PetscErrorCode PetscSFGetRanks(PetscSF sf, PetscInt *nranks, const PetscMPIInt **ranks, const PetscInt **roffset, const PetscInt **rmine, const PetscInt **rremote)
{
  return PetscSFGetRootRanks(sf, nranks, ranks, roffset, rmine, rremote);
}

__attribute__((deprecated))
static inline PetscErrorCode PetscSFCreateEmbeddedSF(PetscSF sf, PetscInt nselected, const PetscInt *selected, PetscSF *esf)
{
  return PetscSFCreateEmbeddedRootSF(sf, nselected, selected, esf);
}

__attribute__((deprecated))
static inline PetscErrorCode PetscSFBcastAndOpBegin(PetscSF sf, MPI_Datatype unit, const void *rootdata, void *leafdata, MPI_Op op)
{
  return PetscSFBcastBegin(sf, unit, rootdata, leafdata, op);
}

__attribute__((deprecated))
static inline PetscErrorCode PetscSFBcastAndOpEnd(PetscSF sf, MPI_Datatype unit, const void *rootdata, void *leafdata, MPI_Op op)
{
  return PetscSFBcastEnd(sf, unit, rootdata, leafdata, op);
}

__attribute__((deprecated))
static inline PetscErrorCode PetscSFBcastAndOpWithMemtypeBegin(PetscSF sf, MPI_Datatype unit, PetscMemType rootmtype, const void *rootdata, PetscMemType leafmtype, void *leafdata, MPI_Op op)
{
  return PetscSFBcastWithMemTypeBegin(sf, unit, rootmtype, rootdata, leafmtype, leafdata, op);
}

# 14 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsection.h" 1







 

extern __attribute__((visibility("default"))) PetscClassId PETSC_SECTION_CLASSID;

extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionCreate(MPI_Comm, PetscSection *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionClone(PetscSection, PetscSection *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSetFromOptions(PetscSection);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionCopy(PetscSection, PetscSection);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionCompare(PetscSection, PetscSection, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetNumFields(PetscSection, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSetNumFields(PetscSection, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetFieldName(PetscSection, PetscInt, const char *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSetFieldName(PetscSection, PetscInt, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetComponentName(PetscSection, PetscInt, PetscInt, const char *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSetComponentName(PetscSection, PetscInt, PetscInt, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetFieldComponents(PetscSection, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSetFieldComponents(PetscSection, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetChart(PetscSection, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSetChart(PetscSection, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetPermutation(PetscSection, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSetPermutation(PetscSection, IS);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetPointMajor(PetscSection, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSetPointMajor(PetscSection, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetIncludesConstraints(PetscSection, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSetIncludesConstraints(PetscSection, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetDof(PetscSection, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSetDof(PetscSection, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionAddDof(PetscSection, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetFieldDof(PetscSection, PetscInt, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSetFieldDof(PetscSection, PetscInt, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionAddFieldDof(PetscSection, PetscInt, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionHasConstraints(PetscSection, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetConstraintDof(PetscSection, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSetConstraintDof(PetscSection, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionAddConstraintDof(PetscSection, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetFieldConstraintDof(PetscSection, PetscInt, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSetFieldConstraintDof(PetscSection, PetscInt, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionAddFieldConstraintDof(PetscSection, PetscInt, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetConstraintIndices(PetscSection, PetscInt, const PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSetConstraintIndices(PetscSection, PetscInt, const PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetFieldConstraintIndices(PetscSection, PetscInt, PetscInt, const PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSetFieldConstraintIndices(PetscSection, PetscInt, PetscInt, const PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSetUpBC(PetscSection);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSetUp(PetscSection);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetMaxDof(PetscSection, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetStorageSize(PetscSection, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetConstrainedStorageSize(PetscSection, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetOffset(PetscSection, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSetOffset(PetscSection, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetFieldOffset(PetscSection, PetscInt, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSetFieldOffset(PetscSection, PetscInt, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetFieldPointOffset(PetscSection, PetscInt, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetOffsetRange(PetscSection, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionView(PetscSection, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionViewFromOptions(PetscSection, PetscObject, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionLoad(PetscSection, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionReset(PetscSection);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionDestroy(PetscSection *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionCreateGlobalSection(PetscSection, PetscSF, PetscBool, PetscBool, PetscSection *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionCreateGlobalSectionCensored(PetscSection, PetscSF, PetscBool, PetscInt, const PetscInt[], PetscSection *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionCreateSubsection(PetscSection, PetscInt, const PetscInt[], PetscSection *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionCreateSupersection(PetscSection[], PetscInt, PetscSection *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionCreateSubmeshSection(PetscSection, IS, PetscSection *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionCreateSubdomainSection(PetscSection, IS, PetscSection *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetPointLayout(MPI_Comm, PetscSection, PetscLayout *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetValueLayout(MPI_Comm, PetscSection, PetscLayout *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionPermute(PetscSection, IS, PetscSection *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetField(PetscSection, PetscInt, PetscSection *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSetUseFieldOffsets(PetscSection, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetUseFieldOffsets(PetscSection, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionExtractDofsFromArray(PetscSection, MPI_Datatype, const void *, IS, PetscSection *, void *[])  ;

extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSetClosureIndex(PetscSection, PetscObject, PetscSection, IS);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetClosureIndex(PetscSection, PetscObject, PetscSection *, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSetClosurePermutation(PetscSection, PetscObject, PetscInt, IS);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetClosurePermutation(PetscSection, PetscObject, PetscInt, PetscInt, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetClosureInversePermutation(PetscSection, PetscObject, PetscInt, PetscInt, IS *);

extern __attribute__((visibility("default"))) PetscClassId PETSC_SECTION_SYM_CLASSID;

extern __attribute__((visibility("default"))) PetscFunctionList PetscSectionSymList;
extern __attribute__((visibility("default"))) PetscErrorCode    PetscSectionSymSetType(PetscSectionSym, PetscSectionSymType);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscSectionSymGetType(PetscSectionSym, PetscSectionSymType *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscSectionSymRegister(const char[], PetscErrorCode (*)(PetscSectionSym));

extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSymCreate(MPI_Comm, PetscSectionSym *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSymDestroy(PetscSectionSym *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSymView(PetscSectionSym, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSymCopy(PetscSectionSym, PetscSectionSym);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSymDistribute(PetscSectionSym, PetscSF, PetscSectionSym *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSetSym(PetscSection, PetscSectionSym);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetSym(PetscSection, PetscSectionSym *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSetFieldSym(PetscSection, PetscInt, PetscSectionSym);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetFieldSym(PetscSection, PetscInt, PetscSectionSym *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetPointSyms(PetscSection, PetscInt, const PetscInt *, const PetscInt ***, const PetscScalar ***);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionRestorePointSyms(PetscSection, PetscInt, const PetscInt *, const PetscInt ***, const PetscScalar ***);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionGetFieldPointSyms(PetscSection, PetscInt, PetscInt, const PetscInt *, const PetscInt ***, const PetscScalar ***);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionRestoreFieldPointSyms(PetscSection, PetscInt, PetscInt, const PetscInt *, const PetscInt ***, const PetscScalar ***);

# 15 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdmda.h" 1



# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdm.h" 1


 
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmat.h" 1


 





 








 
typedef struct _p_Mat *Mat;







 
typedef const char *MatType;
# 126 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmat.h"











 
typedef const char *MatSolverType;
# 166 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmat.h"









 
typedef enum {
  MAT_FACTOR_NONE,
  MAT_FACTOR_LU,
  MAT_FACTOR_CHOLESKY,
  MAT_FACTOR_ILU,
  MAT_FACTOR_ICC,
  MAT_FACTOR_ILUDT,
  MAT_FACTOR_QR,
  MAT_FACTOR_NUM_TYPES
} MatFactorType;
extern __attribute__((visibility("default"))) const char *const MatFactorTypes[];

extern __attribute__((visibility("default"))) PetscErrorCode MatGetFactor(Mat, MatSolverType, MatFactorType, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetFactorAvailable(Mat, MatSolverType, MatFactorType, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatFactorGetCanUseOrdering(Mat, PetscBool *);
__attribute__((deprecated)) static inline PetscErrorCode MatFactorGetUseOrdering(Mat A, PetscBool *b)
{
  return MatFactorGetCanUseOrdering(A, b);
}
extern __attribute__((visibility("default"))) PetscErrorCode MatFactorGetSolverType(Mat, MatSolverType *);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetFactorType(Mat, MatFactorType *);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetFactorType(Mat, MatFactorType);
 typedef PetscErrorCode (*MatSolverFunction)(Mat, MatFactorType, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode            MatSolverTypeRegister(MatSolverType, MatType, MatFactorType, MatSolverFunction);
extern __attribute__((visibility("default"))) PetscErrorCode            MatSolverTypeGet(MatSolverType, MatType, MatFactorType, PetscBool *, PetscBool *, MatSolverFunction *);
typedef MatSolverType MatSolverPackage __attribute__((deprecated));
__attribute__((deprecated)) static inline PetscErrorCode MatSolverPackageRegister(MatSolverType stype, MatType mtype, MatFactorType ftype, MatSolverFunction f)
{
  return MatSolverTypeRegister(stype, mtype, ftype, f);
}
__attribute__((deprecated)) static inline PetscErrorCode MatSolverPackageGet(MatSolverType stype, MatType mtype, MatFactorType ftype, PetscBool *foundmtype, PetscBool *foundstype, MatSolverFunction *f)
{
  return MatSolverTypeGet(stype, mtype, ftype, foundmtype, foundstype, f);
}







 
typedef enum {
  MATPRODUCT_UNSPECIFIED = 0,
  MATPRODUCT_AB,
  MATPRODUCT_AtB,
  MATPRODUCT_ABt,
  MATPRODUCT_PtAP,
  MATPRODUCT_RARt,
  MATPRODUCT_ABC
} MatProductType;
extern __attribute__((visibility("default"))) const char *const MatProductTypes[];







 
typedef const char *MatProductAlgorithm;
# 260 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmat.h"

extern __attribute__((visibility("default"))) PetscErrorCode MatProductCreate(Mat, Mat, Mat, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatProductCreateWithMat(Mat, Mat, Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatProductSetType(Mat, MatProductType);
extern __attribute__((visibility("default"))) PetscErrorCode MatProductSetAlgorithm(Mat, MatProductAlgorithm);
extern __attribute__((visibility("default"))) PetscErrorCode MatProductSetFill(Mat, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode MatProductSetFromOptions(Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatProductSymbolic(Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatProductNumeric(Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatProductReplaceMats(Mat, Mat, Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatProductClear(Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatProductView(Mat, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode MatProductGetType(Mat, MatProductType *);
extern __attribute__((visibility("default"))) PetscErrorCode MatProductGetMats(Mat, Mat *, Mat *, Mat *);

 

extern __attribute__((visibility("default"))) PetscClassId MAT_CLASSID;
extern __attribute__((visibility("default"))) PetscClassId MAT_COLORING_CLASSID;
extern __attribute__((visibility("default"))) PetscClassId MAT_FDCOLORING_CLASSID;
extern __attribute__((visibility("default"))) PetscClassId MAT_TRANSPOSECOLORING_CLASSID;
extern __attribute__((visibility("default"))) PetscClassId MAT_PARTITIONING_CLASSID;
extern __attribute__((visibility("default"))) PetscClassId MAT_COARSEN_CLASSID;
extern __attribute__((visibility("default"))) PetscClassId MAT_NULLSPACE_CLASSID;
extern __attribute__((visibility("default"))) PetscClassId MATMFFD_CLASSID;















 
typedef enum {
  MAT_INITIAL_MATRIX,
  MAT_REUSE_MATRIX,
  MAT_IGNORE_MATRIX,
  MAT_INPLACE_MATRIX
} MatReuse;








 
typedef enum {
  MAT_DO_NOT_GET_VALUES,
  MAT_GET_VALUES
} MatCreateSubMatrixOption;

extern __attribute__((visibility("default"))) PetscErrorCode MatInitializePackage(void);

extern __attribute__((visibility("default"))) PetscErrorCode MatCreate(MPI_Comm, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetSizes(Mat, PetscInt, PetscInt, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetType(Mat, MatType);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetVecType(Mat, VecType *);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetVecType(Mat, VecType);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetFromOptions(Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatViewFromOptions(Mat, PetscObject, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatRegister(const char[], PetscErrorCode (*)(Mat));
extern __attribute__((visibility("default"))) PetscErrorCode MatRegisterRootName(const char[], const char[], const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetOptionsPrefix(Mat, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetOptionsPrefixFactor(Mat, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatAppendOptionsPrefixFactor(Mat, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatAppendOptionsPrefix(Mat, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetOptionsPrefix(Mat, const char *[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetErrorIfFailure(Mat, PetscBool);

extern __attribute__((visibility("default"))) PetscFunctionList MatList;
extern __attribute__((visibility("default"))) PetscFunctionList MatColoringList;
extern __attribute__((visibility("default"))) PetscFunctionList MatPartitioningList;















 
typedef enum {
  DIFFERENT_NONZERO_PATTERN,
  SUBSET_NONZERO_PATTERN,
  SAME_NONZERO_PATTERN,
  UNKNOWN_NONZERO_PATTERN
} MatStructure;
extern __attribute__((visibility("default"))) const char *const MatStructures[];


extern __attribute__((visibility("default"))) PetscErrorCode MatCreateSeqAIJMKL(MPI_Comm, PetscInt, PetscInt, PetscInt, const PetscInt[], Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateMPIAIJMKL(MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, const PetscInt[], PetscInt, const PetscInt[], Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateBAIJMKL(MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, const PetscInt[], PetscInt, const PetscInt[], Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateSeqBAIJMKL(MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, const PetscInt[], Mat *);


extern __attribute__((visibility("default"))) PetscErrorCode MatCreateSeqSELL(MPI_Comm, PetscInt, PetscInt, PetscInt, const PetscInt[], Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateSELL(MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, const PetscInt[], PetscInt, const PetscInt[], Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatSeqSELLSetPreallocation(Mat, PetscInt, const PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatMPISELLSetPreallocation(Mat, PetscInt, const PetscInt[], PetscInt, const PetscInt[]);

extern __attribute__((visibility("default"))) PetscErrorCode MatCreateSeqDense(MPI_Comm, PetscInt, PetscInt, PetscScalar[], Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateDense(MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscScalar[], Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateSeqAIJ(MPI_Comm, PetscInt, PetscInt, PetscInt, const PetscInt[], Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateAIJ(MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, const PetscInt[], PetscInt, const PetscInt[], Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateMPIAIJWithArrays(MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatUpdateMPIAIJWithArrays(Mat, PetscInt, PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatUpdateMPIAIJWithArray(Mat, const PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateMPIAIJWithSplitArrays(MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt[], PetscInt[], PetscScalar[], PetscInt[], PetscInt[], PetscScalar[], Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateMPIAIJWithSeqAIJ(MPI_Comm, Mat, Mat, const PetscInt[], Mat *);

extern __attribute__((visibility("default"))) PetscErrorCode MatCreateSeqBAIJ(MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, const PetscInt[], Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateBAIJ(MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, const PetscInt[], PetscInt, const PetscInt[], Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateMPIBAIJWithArrays(MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], Mat *);

extern __attribute__((visibility("default"))) PetscErrorCode MatSetPreallocationCOO(Mat, PetscCount, PetscInt[], PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetPreallocationCOOLocal(Mat, PetscCount, PetscInt[], PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetValuesCOO(Mat, const PetscScalar[], InsertMode);

extern __attribute__((visibility("default"))) PetscErrorCode MatCreateMPIAdj(MPI_Comm, PetscInt, PetscInt, PetscInt[], PetscInt[], PetscInt[], Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateSeqSBAIJ(MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, const PetscInt[], Mat *);

extern __attribute__((visibility("default"))) PetscErrorCode MatCreateSBAIJ(MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, const PetscInt[], PetscInt, const PetscInt[], Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateMPISBAIJWithArrays(MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatSeqSBAIJSetPreallocationCSR(Mat, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatMPISBAIJSetPreallocationCSR(Mat, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatXAIJSetPreallocation(Mat, PetscInt, const PetscInt[], const PetscInt[], const PetscInt[], const PetscInt[]);

extern __attribute__((visibility("default"))) PetscErrorCode MatCreateShell(MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, void *, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateCentering(MPI_Comm, PetscInt, PetscInt, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateNormal(Mat, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateNormalHermitian(Mat, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateLRC(Mat, Mat, Vec, Mat, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatLRCGetMats(Mat, Mat *, Mat *, Vec *, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateIS(MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, ISLocalToGlobalMapping, ISLocalToGlobalMapping, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateSeqAIJCRL(MPI_Comm, PetscInt, PetscInt, PetscInt, const PetscInt[], Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateMPIAIJCRL(MPI_Comm, PetscInt, PetscInt, PetscInt, const PetscInt[], PetscInt, const PetscInt[], Mat *);

extern __attribute__((visibility("default"))) PetscErrorCode MatCreateScatter(MPI_Comm, VecScatter, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatScatterSetVecScatter(Mat, VecScatter);
extern __attribute__((visibility("default"))) PetscErrorCode MatScatterGetVecScatter(Mat, VecScatter *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateBlockMat(MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt *, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCompositeAddMat(Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatCompositeMerge(Mat);
typedef enum {
  MAT_COMPOSITE_MERGE_RIGHT,
  MAT_COMPOSITE_MERGE_LEFT
} MatCompositeMergeType;
extern __attribute__((visibility("default"))) PetscErrorCode MatCompositeSetMergeType(Mat, MatCompositeMergeType);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateComposite(MPI_Comm, PetscInt, const Mat *, Mat *);
typedef enum {
  MAT_COMPOSITE_ADDITIVE,
  MAT_COMPOSITE_MULTIPLICATIVE
} MatCompositeType;
extern __attribute__((visibility("default"))) PetscErrorCode MatCompositeSetType(Mat, MatCompositeType);
extern __attribute__((visibility("default"))) PetscErrorCode MatCompositeGetType(Mat, MatCompositeType *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCompositeSetMatStructure(Mat, MatStructure);
extern __attribute__((visibility("default"))) PetscErrorCode MatCompositeGetMatStructure(Mat, MatStructure *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCompositeGetNumberMat(Mat, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCompositeGetMat(Mat, PetscInt, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCompositeSetScalings(Mat, const PetscScalar *);

extern __attribute__((visibility("default"))) PetscErrorCode MatCreateFFT(MPI_Comm, PetscInt, const PetscInt[], MatType, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateSeqCUFFT(MPI_Comm, PetscInt, const PetscInt[], Mat *);

extern __attribute__((visibility("default"))) PetscErrorCode MatCreateTranspose(Mat, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatTransposeGetMat(Mat, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateHermitianTranspose(Mat, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatHermitianTransposeGetMat(Mat, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatNormalGetMat(Mat, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatNormalHermitianGetMat(Mat, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateSubMatrixVirtual(Mat, IS, IS, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatSubMatrixVirtualUpdate(Mat, Mat, IS, IS);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateLocalRef(Mat, IS, IS, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateConstantDiagonal(MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscScalar, Mat *);


extern __attribute__((visibility("default"))) PetscErrorCode MatHYPRESetPreallocation(Mat, PetscInt, const PetscInt[], PetscInt, const PetscInt[]);


extern __attribute__((visibility("default"))) PetscErrorCode MatPythonSetType(Mat, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatPythonGetType(Mat, const char *[]);

extern __attribute__((visibility("default"))) PetscErrorCode MatResetPreallocation(Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetUp(Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatDestroy(Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetNonzeroState(Mat, PetscObjectState *);

extern __attribute__((visibility("default"))) PetscErrorCode MatConjugate(Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatRealPart(Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatImaginaryPart(Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetDiagonalBlock(Mat, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetTrace(Mat, PetscScalar *);
extern __attribute__((visibility("default"))) PetscErrorCode MatInvertBlockDiagonal(Mat, const PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode MatInvertVariableBlockDiagonal(Mat, PetscInt, const PetscInt *, PetscScalar *);
extern __attribute__((visibility("default"))) PetscErrorCode MatInvertBlockDiagonalMat(Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatInvertVariableBlockEnvelope(Mat, MatReuse, Mat *);

 
extern __attribute__((visibility("default"))) PetscErrorCode MatSetValues(Mat, PetscInt, const PetscInt[], PetscInt, const PetscInt[], const PetscScalar[], InsertMode);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetValuesIS(Mat, IS, IS, const PetscScalar[], InsertMode);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetValuesBlocked(Mat, PetscInt, const PetscInt[], PetscInt, const PetscInt[], const PetscScalar[], InsertMode);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetValuesRow(Mat, PetscInt, const PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetValuesRowLocal(Mat, PetscInt, const PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetValuesBatch(Mat, PetscInt, PetscInt, PetscInt[], const PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetRandom(Mat, PetscRandom);















 
typedef struct {
  PetscInt k, j, i, c;
} MatStencil;

extern __attribute__((visibility("default"))) PetscErrorCode MatSetValuesStencil(Mat, PetscInt, const MatStencil[], PetscInt, const MatStencil[], const PetscScalar[], InsertMode);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetValuesBlockedStencil(Mat, PetscInt, const MatStencil[], PetscInt, const MatStencil[], const PetscScalar[], InsertMode);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetStencil(Mat, PetscInt, const PetscInt[], const PetscInt[], PetscInt);








 
typedef enum {
  MAT_FLUSH_ASSEMBLY = 1,
  MAT_FINAL_ASSEMBLY = 0
} MatAssemblyType;
extern __attribute__((visibility("default"))) PetscErrorCode MatAssemblyBegin(Mat, MatAssemblyType);
extern __attribute__((visibility("default"))) PetscErrorCode MatAssemblyEnd(Mat, MatAssemblyType);
extern __attribute__((visibility("default"))) PetscErrorCode MatAssembled(Mat, PetscBool *);














 
typedef enum {
  MAT_OPTION_MIN                  = -3,
  MAT_UNUSED_NONZERO_LOCATION_ERR = -2,
  MAT_ROW_ORIENTED                = -1,
  MAT_SYMMETRIC                   = 1,
  MAT_STRUCTURALLY_SYMMETRIC      = 2,
  MAT_FORCE_DIAGONAL_ENTRIES      = 3,
  MAT_IGNORE_OFF_PROC_ENTRIES     = 4,
  MAT_USE_HASH_TABLE              = 5,
  MAT_KEEP_NONZERO_PATTERN        = 6,
  MAT_IGNORE_ZERO_ENTRIES         = 7,
  MAT_USE_INODES                  = 8,
  MAT_HERMITIAN                   = 9,
  MAT_SYMMETRY_ETERNAL            = 10,
  MAT_NEW_NONZERO_LOCATION_ERR    = 11,
  MAT_IGNORE_LOWER_TRIANGULAR     = 12,
  MAT_ERROR_LOWER_TRIANGULAR      = 13,
  MAT_GETROW_UPPERTRIANGULAR      = 14,
  MAT_SPD                         = 15,
  MAT_NO_OFF_PROC_ZERO_ROWS       = 16,
  MAT_NO_OFF_PROC_ENTRIES         = 17,
  MAT_NEW_NONZERO_LOCATIONS       = 18,
  MAT_NEW_NONZERO_ALLOCATION_ERR  = 19,
  MAT_SUBSET_OFF_PROC_ENTRIES     = 20,
  MAT_SUBMAT_SINGLEIS             = 21,
  MAT_STRUCTURE_ONLY              = 22,
  MAT_SORTED_FULL                 = 23,
  MAT_FORM_EXPLICIT_TRANSPOSE     = 24,
  MAT_STRUCTURAL_SYMMETRY_ETERNAL = 25,
  MAT_SPD_ETERNAL                 = 26,
  MAT_OPTION_MAX                  = 27
} MatOption;

extern __attribute__((visibility("default"))) const char *const *MatOptions;
extern __attribute__((visibility("default"))) PetscErrorCode     MatSetOption(Mat, MatOption, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode     MatGetOption(Mat, MatOption, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode     MatPropagateSymmetryOptions(Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode     MatGetType(Mat, MatType *);

extern __attribute__((visibility("default"))) PetscErrorCode    MatGetValues(Mat, PetscInt, const PetscInt[], PetscInt, const PetscInt[], PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode    MatGetRow(Mat, PetscInt, PetscInt *, const PetscInt *[], const PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode    MatRestoreRow(Mat, PetscInt, PetscInt *, const PetscInt *[], const PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode    MatGetRowUpperTriangular(Mat);
extern __attribute__((visibility("default"))) PetscErrorCode    MatRestoreRowUpperTriangular(Mat);
extern __attribute__((visibility("default"))) PetscErrorCode    MatGetColumnVector(Mat, Vec, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode    MatSeqAIJGetArray(Mat, PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode    MatSeqAIJGetArrayRead(Mat, const PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode    MatSeqAIJGetArrayWrite(Mat, PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode    MatSeqAIJRestoreArray(Mat, PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode    MatSeqAIJRestoreArrayRead(Mat, const PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode    MatSeqAIJRestoreArrayWrite(Mat, PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode    MatSeqAIJGetMaxRowNonzeros(Mat, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode    MatSeqAIJSetValuesLocalFast(Mat, PetscInt, const PetscInt[], PetscInt, const PetscInt[], const PetscScalar[], InsertMode);
extern __attribute__((visibility("default"))) PetscErrorCode    MatSeqAIJSetType(Mat, MatType);
extern __attribute__((visibility("default"))) PetscErrorCode    MatSeqAIJKron(Mat, Mat, MatReuse, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode    MatSeqAIJRegister(const char[], PetscErrorCode (*)(Mat, MatType, MatReuse, Mat *));
extern __attribute__((visibility("default"))) PetscFunctionList MatSeqAIJList;
extern __attribute__((visibility("default"))) PetscErrorCode    MatSeqBAIJGetArray(Mat, PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode    MatSeqBAIJRestoreArray(Mat, PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode    MatSeqSBAIJGetArray(Mat, PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode    MatSeqSBAIJRestoreArray(Mat, PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode    MatDenseGetArray(Mat, PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode    MatDenseRestoreArray(Mat, PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode    MatDensePlaceArray(Mat, const PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode    MatDenseReplaceArray(Mat, const PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode    MatDenseResetArray(Mat);
extern __attribute__((visibility("default"))) PetscErrorCode    MatDenseGetArrayRead(Mat, const PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode    MatDenseRestoreArrayRead(Mat, const PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode    MatDenseGetArrayWrite(Mat, PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode    MatDenseRestoreArrayWrite(Mat, PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode    MatGetBlockSize(Mat, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode    MatSetBlockSize(Mat, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode    MatGetBlockSizes(Mat, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode    MatSetBlockSizes(Mat, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode    MatSetBlockSizesFromMats(Mat, Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode    MatSetVariableBlockSizes(Mat, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode    MatGetVariableBlockSizes(Mat, PetscInt *, const PetscInt **);

extern __attribute__((visibility("default"))) PetscErrorCode MatDenseGetColumn(Mat, PetscInt, PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatDenseRestoreColumn(Mat, PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatDenseGetColumnVec(Mat, PetscInt, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode MatDenseRestoreColumnVec(Mat, PetscInt, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode MatDenseGetColumnVecRead(Mat, PetscInt, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode MatDenseRestoreColumnVecRead(Mat, PetscInt, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode MatDenseGetColumnVecWrite(Mat, PetscInt, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode MatDenseRestoreColumnVecWrite(Mat, PetscInt, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode MatDenseGetSubMatrix(Mat, PetscInt, PetscInt, PetscInt, PetscInt, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatDenseRestoreSubMatrix(Mat, Mat *);

extern __attribute__((visibility("default"))) PetscErrorCode MatMult(Mat, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatMultDiagonalBlock(Mat, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatMultAdd(Mat, Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatMultTranspose(Mat, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatMultHermitianTranspose(Mat, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatIsTranspose(Mat, Mat, PetscReal, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatIsHermitianTranspose(Mat, Mat, PetscReal, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMultTransposeAdd(Mat, Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatMultHermitianTransposeAdd(Mat, Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatMatSolve(Mat, Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatMatSolveTranspose(Mat, Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatMatTransposeSolve(Mat, Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatResidual(Mat, Vec, Vec, Vec);























 
typedef enum {
  MAT_DO_NOT_COPY_VALUES,
  MAT_COPY_VALUES,
  MAT_SHARE_NONZERO_PATTERN
} MatDuplicateOption;

extern __attribute__((visibility("default"))) PetscErrorCode MatConvert(Mat, MatType, MatReuse, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatDuplicate(Mat, MatDuplicateOption, Mat *);

extern __attribute__((visibility("default"))) PetscErrorCode MatCopy(Mat, Mat, MatStructure);
extern __attribute__((visibility("default"))) PetscErrorCode MatView(Mat, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode MatIsSymmetric(Mat, PetscReal, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatIsStructurallySymmetric(Mat, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatIsHermitian(Mat, PetscReal, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatIsSymmetricKnown(Mat, PetscBool *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatIsHermitianKnown(Mat, PetscBool *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatIsStructurallySymmetricKnown(Mat, PetscBool *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatIsSPDKnown(Mat, PetscBool *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMissingDiagonal(Mat, PetscBool *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode MatLoad(Mat, PetscViewer);

extern __attribute__((visibility("default"))) PetscErrorCode MatGetRowIJ(Mat, PetscInt, PetscBool, PetscBool, PetscInt *, const PetscInt *[], const PetscInt *[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatRestoreRowIJ(Mat, PetscInt, PetscBool, PetscBool, PetscInt *, const PetscInt *[], const PetscInt *[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetColumnIJ(Mat, PetscInt, PetscBool, PetscBool, PetscInt *, const PetscInt *[], const PetscInt *[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatRestoreColumnIJ(Mat, PetscInt, PetscBool, PetscBool, PetscInt *, const PetscInt *[], const PetscInt *[], PetscBool *);









 
typedef struct {
  PetscLogDouble block_size;                           
  PetscLogDouble nz_allocated, nz_used, nz_unneeded;   
  PetscLogDouble memory;                               
  PetscLogDouble assemblies;                           
  PetscLogDouble mallocs;                              
  PetscLogDouble fill_ratio_given, fill_ratio_needed;  
  PetscLogDouble factor_mallocs;                       
} MatInfo;










 
typedef enum {
  MAT_LOCAL      = 1,
  MAT_GLOBAL_MAX = 2,
  MAT_GLOBAL_SUM = 3
} MatInfoType;
extern __attribute__((visibility("default"))) PetscErrorCode MatGetInfo(Mat, MatInfoType, MatInfo *);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetDiagonal(Mat, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetRowMax(Mat, Vec, PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetRowMin(Mat, Vec, PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetRowMaxAbs(Mat, Vec, PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetRowMinAbs(Mat, Vec, PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetRowSum(Mat, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatTranspose(Mat, MatReuse, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatTransposeSymbolic(Mat, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatTransposeSetPrecursor(Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatHermitianTranspose(Mat, MatReuse, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatPermute(Mat, IS, IS, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatDiagonalScale(Mat, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatDiagonalSet(Mat, Vec, InsertMode);

extern __attribute__((visibility("default"))) PetscErrorCode MatEqual(Mat, Mat, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMultEqual(Mat, Mat, PetscInt, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMultAddEqual(Mat, Mat, PetscInt, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMultTransposeEqual(Mat, Mat, PetscInt, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMultTransposeAddEqual(Mat, Mat, PetscInt, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMultHermitianTransposeEqual(Mat, Mat, PetscInt, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMultHermitianTransposeAddEqual(Mat, Mat, PetscInt, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMatMultEqual(Mat, Mat, Mat, PetscInt, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatTransposeMatMultEqual(Mat, Mat, Mat, PetscInt, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMatTransposeMultEqual(Mat, Mat, Mat, PetscInt, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatPtAPMultEqual(Mat, Mat, Mat, PetscInt, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatRARtMultEqual(Mat, Mat, Mat, PetscInt, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatIsLinear(Mat, PetscInt, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode MatNorm(Mat, NormType, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetColumnNorms(Mat, NormType, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetColumnSums(Mat, PetscScalar *);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetColumnSumsRealPart(Mat, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetColumnSumsImaginaryPart(Mat, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetColumnMeans(Mat, PetscScalar *);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetColumnMeansRealPart(Mat, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetColumnMeansImaginaryPart(Mat, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetColumnReductions(Mat, PetscInt, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode MatZeroEntries(Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetInf(Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatZeroRows(Mat, PetscInt, const PetscInt[], PetscScalar, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatZeroRowsIS(Mat, IS, PetscScalar, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatZeroRowsStencil(Mat, PetscInt, const MatStencil[], PetscScalar, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatZeroRowsColumnsStencil(Mat, PetscInt, const MatStencil[], PetscScalar, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatZeroRowsColumns(Mat, PetscInt, const PetscInt[], PetscScalar, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatZeroRowsColumnsIS(Mat, IS, PetscScalar, Vec, Vec);

extern __attribute__((visibility("default"))) PetscErrorCode MatGetSize(Mat, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetLocalSize(Mat, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetOwnershipRange(Mat, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetOwnershipRanges(Mat, const PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetOwnershipRangeColumn(Mat, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetOwnershipRangesColumn(Mat, const PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetOwnershipIS(Mat, IS *, IS *);

extern __attribute__((visibility("default"))) PetscErrorCode MatCreateSubMatrices(Mat, PetscInt, const IS[], const IS[], MatReuse, Mat *[]);
__attribute__((deprecated)) static inline PetscErrorCode MatGetSubMatrices(Mat mat, PetscInt n, const IS irow[], const IS icol[], MatReuse scall, Mat *submat[])
{
  return MatCreateSubMatrices(mat, n, irow, icol, scall, submat);
}
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateSubMatricesMPI(Mat, PetscInt, const IS[], const IS[], MatReuse, Mat *[]);
__attribute__((deprecated)) static inline PetscErrorCode MatGetSubMatricesMPI(Mat mat, PetscInt n, const IS irow[], const IS icol[], MatReuse scall, Mat *submat[])
{
  return MatCreateSubMatricesMPI(mat, n, irow, icol, scall, submat);
}
extern __attribute__((visibility("default"))) PetscErrorCode MatDestroyMatrices(PetscInt, Mat *[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatDestroySubMatrices(PetscInt, Mat *[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateSubMatrix(Mat, IS, IS, MatReuse, Mat *);
__attribute__((deprecated)) static inline PetscErrorCode MatGetSubMatrix(Mat mat, IS isrow, IS iscol, MatReuse cll, Mat *newmat)
{
  return MatCreateSubMatrix(mat, isrow, iscol, cll, newmat);
}
extern __attribute__((visibility("default"))) PetscErrorCode MatGetLocalSubMatrix(Mat, IS, IS, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatRestoreLocalSubMatrix(Mat, IS, IS, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetSeqNonzeroStructure(Mat, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatDestroySeqNonzeroStructure(Mat *);

extern __attribute__((visibility("default"))) PetscErrorCode MatCreateMPIAIJSumSeqAIJ(MPI_Comm, Mat, PetscInt, PetscInt, MatReuse, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateMPIAIJSumSeqAIJSymbolic(MPI_Comm, Mat, PetscInt, PetscInt, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateMPIAIJSumSeqAIJNumeric(Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatMPIAIJGetLocalMat(Mat, MatReuse, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatAIJGetLocalMat(Mat, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMPIAIJGetLocalMatCondensed(Mat, MatReuse, IS *, IS *, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMPIAIJGetLocalMatMerge(Mat, MatReuse, IS *, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMPIAIJGetNumberNonzeros(Mat, PetscCount *);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetBrowsOfAcols(Mat, Mat, MatReuse, IS *, IS *, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetGhosts(Mat, PetscInt *, const PetscInt *[]);

extern __attribute__((visibility("default"))) PetscErrorCode MatIncreaseOverlap(Mat, PetscInt, IS[], PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode MatIncreaseOverlapSplit(Mat mat, PetscInt n, IS is[], PetscInt ov);
extern __attribute__((visibility("default"))) PetscErrorCode MatMPIAIJSetUseScalableIncreaseOverlap(Mat, PetscBool);

extern __attribute__((visibility("default"))) PetscErrorCode MatMatMult(Mat, Mat, MatReuse, PetscReal, Mat *);

extern __attribute__((visibility("default"))) PetscErrorCode MatMatMatMult(Mat, Mat, Mat, MatReuse, PetscReal, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatGalerkin(Mat, Mat, Mat, MatReuse, PetscReal, Mat *);

extern __attribute__((visibility("default"))) PetscErrorCode MatPtAP(Mat, Mat, MatReuse, PetscReal, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatRARt(Mat, Mat, MatReuse, PetscReal, Mat *);

extern __attribute__((visibility("default"))) PetscErrorCode MatTransposeMatMult(Mat, Mat, MatReuse, PetscReal, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMatTransposeMult(Mat, Mat, MatReuse, PetscReal, Mat *);

extern __attribute__((visibility("default"))) PetscErrorCode MatAXPY(Mat, PetscScalar, Mat, MatStructure);
extern __attribute__((visibility("default"))) PetscErrorCode MatAYPX(Mat, PetscScalar, Mat, MatStructure);

extern __attribute__((visibility("default"))) PetscErrorCode MatScale(Mat, PetscScalar);
extern __attribute__((visibility("default"))) PetscErrorCode MatShift(Mat, PetscScalar);

extern __attribute__((visibility("default"))) PetscErrorCode MatSetLocalToGlobalMapping(Mat, ISLocalToGlobalMapping, ISLocalToGlobalMapping);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetLocalToGlobalMapping(Mat, ISLocalToGlobalMapping *, ISLocalToGlobalMapping *);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetLayouts(Mat, PetscLayout *, PetscLayout *);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetLayouts(Mat, PetscLayout, PetscLayout);
extern __attribute__((visibility("default"))) PetscErrorCode MatZeroRowsLocal(Mat, PetscInt, const PetscInt[], PetscScalar, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatZeroRowsLocalIS(Mat, IS, PetscScalar, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatZeroRowsColumnsLocal(Mat, PetscInt, const PetscInt[], PetscScalar, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatZeroRowsColumnsLocalIS(Mat, IS, PetscScalar, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetValuesLocal(Mat, PetscInt, const PetscInt[], PetscInt, const PetscInt[], PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetValuesLocal(Mat, PetscInt, const PetscInt[], PetscInt, const PetscInt[], const PetscScalar[], InsertMode);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetValuesBlockedLocal(Mat, PetscInt, const PetscInt[], PetscInt, const PetscInt[], const PetscScalar[], InsertMode);

extern __attribute__((visibility("default"))) PetscErrorCode MatStashSetInitialSize(Mat, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode MatStashGetInfo(Mat, PetscInt *, PetscInt *, PetscInt *, PetscInt *);

extern __attribute__((visibility("default"))) PetscErrorCode MatInterpolate(Mat, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatInterpolateAdd(Mat, Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatRestrict(Mat, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatMatInterpolate(Mat, Mat, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMatInterpolateAdd(Mat, Mat, Mat, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMatRestrict(Mat, Mat, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateVecs(Mat, Vec *, Vec *);
__attribute__((deprecated)) static inline PetscErrorCode MatGetVecs(Mat mat, Vec *x, Vec *y)
{
  return MatCreateVecs(mat, x, y);
}
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateRedundantMatrix(Mat, PetscInt, MPI_Comm, MatReuse, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetMultiProcBlock(Mat, MPI_Comm, MatReuse, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatFindZeroDiagonals(Mat, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode MatFindOffBlockDiagonalEntries(Mat, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateMPIMatConcatenateSeqMat(MPI_Comm, Mat, PetscInt, MatReuse, Mat *);























 
static inline PetscErrorCode MatSetValue(Mat v, PetscInt i, PetscInt j, PetscScalar va, InsertMode mode)
{
  return MatSetValues(v, 1, &i, 1, &j, &va, mode);
}






















 
static inline PetscErrorCode MatGetValue(Mat mat, PetscInt row, PetscInt col, PetscScalar *va)
{
  return MatGetValues(mat, 1, &row, 1, &col, va);
}






















 
static inline PetscErrorCode MatSetValueLocal(Mat v, PetscInt i, PetscInt j, PetscScalar va, InsertMode mode)
{
  return MatSetValuesLocal(v, 1, &i, 1, &j, &va, mode);
}


































 
# 989 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmat.h"
































 
































 
































 































 

































 



































 


































 






























 







 
extern __attribute__((visibility("default"))) PetscErrorCode MatShellGetContext(Mat, void *);

extern __attribute__((visibility("default"))) PetscErrorCode MatInodeAdjustForInodes(Mat, IS *, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode MatInodeGetInodeSizes(Mat, PetscInt *, PetscInt *[], PetscInt *);

extern __attribute__((visibility("default"))) PetscErrorCode MatSeqAIJSetColumnIndices(Mat, PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatSeqBAIJSetColumnIndices(Mat, PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateSeqAIJWithArrays(MPI_Comm, PetscInt, PetscInt, PetscInt[], PetscInt[], PetscScalar[], Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateSeqBAIJWithArrays(MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt[], PetscInt[], PetscScalar[], Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateSeqSBAIJWithArrays(MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt[], PetscInt[], PetscScalar[], Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateSeqAIJFromTriple(MPI_Comm, PetscInt, PetscInt, PetscInt[], PetscInt[], PetscScalar[], Mat *, PetscInt, PetscBool);



extern __attribute__((visibility("default"))) PetscErrorCode MatSeqBAIJSetPreallocation(Mat, PetscInt, PetscInt, const PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatSeqSBAIJSetPreallocation(Mat, PetscInt, PetscInt, const PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatSeqAIJSetPreallocation(Mat, PetscInt, const PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatSeqAIJSetTotalPreallocation(Mat, PetscInt);

extern __attribute__((visibility("default"))) PetscErrorCode MatMPIBAIJSetPreallocation(Mat, PetscInt, PetscInt, const PetscInt[], PetscInt, const PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatMPISBAIJSetPreallocation(Mat, PetscInt, PetscInt, const PetscInt[], PetscInt, const PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatMPIAIJSetPreallocation(Mat, PetscInt, const PetscInt[], PetscInt, const PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatSeqAIJSetPreallocationCSR(Mat, const PetscInt[], const PetscInt[], const PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatSeqBAIJSetPreallocationCSR(Mat, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatMPIAIJSetPreallocationCSR(Mat, const PetscInt[], const PetscInt[], const PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatMPIBAIJSetPreallocationCSR(Mat, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatMPIAdjSetPreallocation(Mat, PetscInt[], PetscInt[], PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatMPIAdjToSeq(Mat, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMPIAdjToSeqRankZero(Mat, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMPIDenseSetPreallocation(Mat, PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatSeqDenseSetPreallocation(Mat, PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatMPIAIJGetSeqAIJ(Mat, Mat *, Mat *, const PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatMPIBAIJGetSeqBAIJ(Mat, Mat *, Mat *, const PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatMPIAdjCreateNonemptySubcommMat(Mat, Mat *);

extern __attribute__((visibility("default"))) PetscErrorCode MatDenseGetLDA(Mat, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode MatDenseSetLDA(Mat, PetscInt);
__attribute__((deprecated)) static inline PetscErrorCode MatSeqDenseSetLDA(Mat A, PetscInt lda)
{
  return MatDenseSetLDA(A, lda);
}
extern __attribute__((visibility("default"))) PetscErrorCode MatDenseGetLocalMatrix(Mat, Mat *);

extern __attribute__((visibility("default"))) PetscErrorCode MatBlockMatSetPreallocation(Mat, PetscInt, PetscInt, const PetscInt[]);

extern __attribute__((visibility("default"))) PetscErrorCode MatStoreValues(Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatRetrieveValues(Mat);

extern __attribute__((visibility("default"))) PetscErrorCode MatFindNonzeroRows(Mat, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode MatFindZeroRows(Mat, IS *);



 










 
typedef const char *MatOrderingType;
# 1342 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmat.h"

extern __attribute__((visibility("default"))) PetscErrorCode    MatGetOrdering(Mat, MatOrderingType, IS *, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode    MatGetOrderingList(PetscFunctionList *);
extern __attribute__((visibility("default"))) PetscErrorCode    MatOrderingRegister(const char[], PetscErrorCode (*)(Mat, MatOrderingType, IS *, IS *));
extern __attribute__((visibility("default"))) PetscFunctionList MatOrderingList;

# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmatcoarsen.h" 1



# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmat.h" 1


 
# 5 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmatcoarsen.h" 2

 

extern __attribute__((visibility("default"))) PetscFunctionList MatCoarsenList;










 
typedef struct _p_MatCoarsen *MatCoarsen;







 
typedef const char *MatCoarsenType;




 
typedef struct _PetscCDIntNd {
  struct _PetscCDIntNd *next;
  PetscInt              gid;
} PetscCDIntNd;

 
typedef struct _PetscCDArrNd {
  struct _PetscCDArrNd *next;
  struct _PetscCDIntNd *array;
} PetscCDArrNd;

 
typedef struct _PetscCoarsenData {
  PetscCDArrNd   pool_list;  
  PetscCDIntNd  *new_node;
  PetscInt       new_left;
  PetscInt       chk_sz;  
  PetscCDIntNd  *extra_nodes;
  PetscCDIntNd **array;  
  PetscInt       size;   
  Mat            mat;    
} PetscCoarsenData;

extern __attribute__((visibility("default"))) PetscErrorCode MatCoarsenCreate(MPI_Comm, MatCoarsen *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCoarsenSetType(MatCoarsen, MatCoarsenType);
extern __attribute__((visibility("default"))) PetscErrorCode MatCoarsenSetAdjacency(MatCoarsen, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatCoarsenSetGreedyOrdering(MatCoarsen, const IS);
extern __attribute__((visibility("default"))) PetscErrorCode MatCoarsenSetStrictAggs(MatCoarsen, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode MatCoarsenGetData(MatCoarsen, PetscCoarsenData **);
extern __attribute__((visibility("default"))) PetscErrorCode MatCoarsenApply(MatCoarsen);
extern __attribute__((visibility("default"))) PetscErrorCode MatCoarsenDestroy(MatCoarsen *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCoarsenRegister(const char[], PetscErrorCode (*)(MatCoarsen));
extern __attribute__((visibility("default"))) PetscErrorCode MatCoarsenView(MatCoarsen, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode MatCoarsenSetFromOptions(MatCoarsen);
extern __attribute__((visibility("default"))) PetscErrorCode MatCoarsenGetType(MatCoarsen, MatCoarsenType *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCoarsenViewFromOptions(MatCoarsen, PetscObject, const char[]);

extern __attribute__((visibility("default"))) PetscErrorCode PetscCDCreate(PetscInt, PetscCoarsenData **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCDDestroy(PetscCoarsenData *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCDIntNdSetID(PetscCDIntNd *, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCDIntNdGetID(const PetscCDIntNd *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCDAppendID(PetscCoarsenData *, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCDAppendRemove(PetscCoarsenData *, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCDAppendNode(PetscCoarsenData *, PetscInt, PetscCDIntNd *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCDRemoveNextNode(PetscCoarsenData *, PetscInt, PetscCDIntNd *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCDSizeAt(const PetscCoarsenData *, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCDEmptyAt(const PetscCoarsenData *, PetscInt, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCDSetChuckSize(PetscCoarsenData *, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCDPrint(const PetscCoarsenData *, MPI_Comm);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCDGetMIS(PetscCoarsenData *, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCDGetMat(PetscCoarsenData *, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCDSetMat(PetscCoarsenData *, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCDRemoveAll(PetscCoarsenData *, PetscInt);

extern __attribute__((visibility("default"))) PetscErrorCode PetscCDGetHeadPos(const PetscCoarsenData *, PetscInt, PetscCDIntNd **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCDGetNextPos(const PetscCoarsenData *, PetscInt, PetscCDIntNd **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCDGetASMBlocks(const PetscCoarsenData *, const PetscInt, Mat, PetscInt *, IS **);

extern __attribute__((visibility("default"))) PetscErrorCode MatCoarsenMISKSetDistance(MatCoarsen, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode MatCoarsenMISKGetDistance(MatCoarsen, PetscInt *);
# 1349 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmat.h" 2

extern __attribute__((visibility("default"))) PetscErrorCode MatReorderForNonzeroDiagonal(Mat, PetscReal, IS, IS);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateLaplacian(Mat, PetscReal, PetscBool, Mat *);

extern __attribute__((visibility("default"))) PetscErrorCode MatFactorGetPreferredOrdering(Mat, MatFactorType, MatOrderingType *);







 
typedef enum {
  MAT_SHIFT_NONE,
  MAT_SHIFT_NONZERO,
  MAT_SHIFT_POSITIVE_DEFINITE,
  MAT_SHIFT_INBLOCKS
} MatFactorShiftType;
extern __attribute__((visibility("default"))) const char *const MatFactorShiftTypes[];
extern __attribute__((visibility("default"))) const char *const MatFactorShiftTypesDetail[];










 
typedef enum {
  MAT_FACTOR_NOERROR,
  MAT_FACTOR_STRUCT_ZEROPIVOT,
  MAT_FACTOR_NUMERIC_ZEROPIVOT,
  MAT_FACTOR_OUTMEMORY,
  MAT_FACTOR_OTHER
} MatFactorError;

extern __attribute__((visibility("default"))) PetscErrorCode MatFactorGetError(Mat, MatFactorError *);
extern __attribute__((visibility("default"))) PetscErrorCode MatFactorClearError(Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatFactorGetErrorZeroPivot(Mat, PetscReal *, PetscInt *);

















 
typedef struct {
  PetscReal diagonal_fill;  
  PetscReal usedt;
  PetscReal dt;             
  PetscReal dtcol;          
  PetscReal dtcount;        
  PetscReal fill;           
  PetscReal levels;         
  PetscReal pivotinblocks; 
 
  PetscReal zeropivot;      
  PetscReal shifttype;      
  PetscReal shiftamount;    
} MatFactorInfo;

extern __attribute__((visibility("default"))) PetscErrorCode MatFactorInfoInitialize(MatFactorInfo *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCholeskyFactor(Mat, IS, const MatFactorInfo *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCholeskyFactorSymbolic(Mat, Mat, IS, const MatFactorInfo *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCholeskyFactorNumeric(Mat, Mat, const MatFactorInfo *);
extern __attribute__((visibility("default"))) PetscErrorCode MatLUFactor(Mat, IS, IS, const MatFactorInfo *);
extern __attribute__((visibility("default"))) PetscErrorCode MatILUFactor(Mat, IS, IS, const MatFactorInfo *);
extern __attribute__((visibility("default"))) PetscErrorCode MatLUFactorSymbolic(Mat, Mat, IS, IS, const MatFactorInfo *);
extern __attribute__((visibility("default"))) PetscErrorCode MatILUFactorSymbolic(Mat, Mat, IS, IS, const MatFactorInfo *);
extern __attribute__((visibility("default"))) PetscErrorCode MatICCFactorSymbolic(Mat, Mat, IS, const MatFactorInfo *);
extern __attribute__((visibility("default"))) PetscErrorCode MatICCFactor(Mat, IS, const MatFactorInfo *);
extern __attribute__((visibility("default"))) PetscErrorCode MatLUFactorNumeric(Mat, Mat, const MatFactorInfo *);
extern __attribute__((visibility("default"))) PetscErrorCode MatQRFactor(Mat, IS, const MatFactorInfo *);
extern __attribute__((visibility("default"))) PetscErrorCode MatQRFactorSymbolic(Mat, Mat, IS, const MatFactorInfo *);
extern __attribute__((visibility("default"))) PetscErrorCode MatQRFactorNumeric(Mat, Mat, const MatFactorInfo *);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetInertia(Mat, PetscInt *, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode MatSolve(Mat, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatForwardSolve(Mat, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatBackwardSolve(Mat, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatSolveAdd(Mat, Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatSolveTranspose(Mat, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatSolveTransposeAdd(Mat, Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatSolves(Mat, Vecs, Vecs);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetUnfactored(Mat);

typedef enum {
  MAT_FACTOR_SCHUR_UNFACTORED,
  MAT_FACTOR_SCHUR_FACTORED,
  MAT_FACTOR_SCHUR_INVERTED
} MatFactorSchurStatus;
extern __attribute__((visibility("default"))) PetscErrorCode MatFactorSetSchurIS(Mat, IS);
extern __attribute__((visibility("default"))) PetscErrorCode MatFactorGetSchurComplement(Mat, Mat *, MatFactorSchurStatus *);
extern __attribute__((visibility("default"))) PetscErrorCode MatFactorRestoreSchurComplement(Mat, Mat *, MatFactorSchurStatus);
extern __attribute__((visibility("default"))) PetscErrorCode MatFactorInvertSchurComplement(Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatFactorCreateSchurComplement(Mat, Mat *, MatFactorSchurStatus *);
extern __attribute__((visibility("default"))) PetscErrorCode MatFactorSolveSchurComplement(Mat, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatFactorSolveSchurComplementTranspose(Mat, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatFactorFactorizeSchurComplement(Mat);

extern __attribute__((visibility("default"))) PetscErrorCode MatSeqDenseInvert(Mat);













 
typedef enum {
  SOR_FORWARD_SWEEP         = 1,
  SOR_BACKWARD_SWEEP        = 2,
  SOR_SYMMETRIC_SWEEP       = 3,
  SOR_LOCAL_FORWARD_SWEEP   = 4,
  SOR_LOCAL_BACKWARD_SWEEP  = 8,
  SOR_LOCAL_SYMMETRIC_SWEEP = 12,
  SOR_ZERO_INITIAL_GUESS    = 16,
  SOR_EISENSTAT             = 32,
  SOR_APPLY_UPPER           = 64,
  SOR_APPLY_LOWER           = 128
} MatSORType;
extern __attribute__((visibility("default"))) PetscErrorCode MatSOR(Mat, Vec, PetscReal, MatSORType, PetscReal, PetscInt, PetscInt, Vec);














 
typedef struct _p_MatColoring *MatColoring;







 
typedef const char *MatColoringType;
# 1523 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmat.h"
















 
typedef enum {
  MAT_COLORING_WEIGHT_RANDOM,
  MAT_COLORING_WEIGHT_LEXICAL,
  MAT_COLORING_WEIGHT_LF,
  MAT_COLORING_WEIGHT_SL
} MatColoringWeightType;

extern __attribute__((visibility("default"))) PetscErrorCode MatColoringCreate(Mat, MatColoring *);
extern __attribute__((visibility("default"))) PetscErrorCode MatColoringGetDegrees(Mat, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode MatColoringDestroy(MatColoring *);
extern __attribute__((visibility("default"))) PetscErrorCode MatColoringView(MatColoring, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode MatColoringSetType(MatColoring, MatColoringType);
extern __attribute__((visibility("default"))) PetscErrorCode MatColoringSetFromOptions(MatColoring);
extern __attribute__((visibility("default"))) PetscErrorCode MatColoringSetDistance(MatColoring, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode MatColoringGetDistance(MatColoring, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode MatColoringSetMaxColors(MatColoring, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode MatColoringGetMaxColors(MatColoring, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode MatColoringApply(MatColoring, ISColoring *);
extern __attribute__((visibility("default"))) PetscErrorCode MatColoringRegister(const char[], PetscErrorCode (*)(MatColoring));
extern __attribute__((visibility("default"))) PetscErrorCode MatColoringPatch(Mat, PetscInt, PetscInt, ISColoringValue[], ISColoring *);
extern __attribute__((visibility("default"))) PetscErrorCode MatColoringSetWeightType(MatColoring, MatColoringWeightType);
extern __attribute__((visibility("default"))) PetscErrorCode MatColoringSetWeights(MatColoring, PetscReal *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode MatColoringCreateWeights(MatColoring, PetscReal **, PetscInt **lperm);
extern __attribute__((visibility("default"))) PetscErrorCode MatColoringTest(MatColoring, ISColoring);
__attribute__((deprecated)) static inline PetscErrorCode MatColoringTestValid(MatColoring matcoloring, ISColoring iscoloring)
{
  return MatColoringTest(matcoloring, iscoloring);
}
extern __attribute__((visibility("default"))) PetscErrorCode MatISColoringTest(Mat, ISColoring);










 
typedef struct _p_MatFDColoring *MatFDColoring;

extern __attribute__((visibility("default"))) PetscErrorCode MatFDColoringCreate(Mat, ISColoring, MatFDColoring *);
extern __attribute__((visibility("default"))) PetscErrorCode MatFDColoringDestroy(MatFDColoring *);
extern __attribute__((visibility("default"))) PetscErrorCode MatFDColoringView(MatFDColoring, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode MatFDColoringSetFunction(MatFDColoring, PetscErrorCode (*)(void), void *);
extern __attribute__((visibility("default"))) PetscErrorCode MatFDColoringGetFunction(MatFDColoring, PetscErrorCode (**)(void), void **);
extern __attribute__((visibility("default"))) PetscErrorCode MatFDColoringSetParameters(MatFDColoring, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode MatFDColoringSetFromOptions(MatFDColoring);
extern __attribute__((visibility("default"))) PetscErrorCode MatFDColoringApply(Mat, MatFDColoring, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode MatFDColoringSetF(MatFDColoring, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatFDColoringGetPerturbedColumns(MatFDColoring, PetscInt *, const PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatFDColoringSetUp(Mat, ISColoring, MatFDColoring);
extern __attribute__((visibility("default"))) PetscErrorCode MatFDColoringSetBlockSize(MatFDColoring, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode MatFDColoringSetValues(Mat, MatFDColoring, const PetscScalar *);







 
typedef struct _p_MatTransposeColoring *MatTransposeColoring;

extern __attribute__((visibility("default"))) PetscErrorCode MatTransposeColoringCreate(Mat, ISColoring, MatTransposeColoring *);
extern __attribute__((visibility("default"))) PetscErrorCode MatTransColoringApplySpToDen(MatTransposeColoring, Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatTransColoringApplyDenToSp(MatTransposeColoring, Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatTransposeColoringDestroy(MatTransposeColoring *);














 
typedef struct _p_MatPartitioning *MatPartitioning;







 
typedef const char *MatPartitioningType;
# 1642 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmat.h"

extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningCreate(MPI_Comm, MatPartitioning *);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningSetType(MatPartitioning, MatPartitioningType);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningSetNParts(MatPartitioning, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningSetAdjacency(MatPartitioning, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningSetNumberVertexWeights(MatPartitioning, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningSetVertexWeights(MatPartitioning, const PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningSetPartitionWeights(MatPartitioning, const PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningSetUseEdgeWeights(MatPartitioning, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningGetUseEdgeWeights(MatPartitioning, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningApply(MatPartitioning, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningImprove(MatPartitioning, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningViewImbalance(MatPartitioning, IS);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningApplyND(MatPartitioning, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningDestroy(MatPartitioning *);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningRegister(const char[], PetscErrorCode (*)(MatPartitioning));
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningView(MatPartitioning, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningViewFromOptions(MatPartitioning, PetscObject, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningSetFromOptions(MatPartitioning);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningGetType(MatPartitioning, MatPartitioningType *);

extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningParmetisSetRepartition(MatPartitioning part);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningParmetisSetCoarseSequential(MatPartitioning);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningParmetisGetEdgeCut(MatPartitioning, PetscInt *);

typedef enum {
  MP_CHACO_MULTILEVEL = 1,
  MP_CHACO_SPECTRAL   = 2,
  MP_CHACO_LINEAR     = 4,
  MP_CHACO_RANDOM     = 5,
  MP_CHACO_SCATTERED  = 6
} MPChacoGlobalType;
extern __attribute__((visibility("default"))) const char *const MPChacoGlobalTypes[];
typedef enum {
  MP_CHACO_KERNIGHAN = 1,
  MP_CHACO_NONE      = 2
} MPChacoLocalType;
extern __attribute__((visibility("default"))) const char *const MPChacoLocalTypes[];
typedef enum {
  MP_CHACO_LANCZOS = 0,
  MP_CHACO_RQI     = 1
} MPChacoEigenType;
extern __attribute__((visibility("default"))) const char *const MPChacoEigenTypes[];

extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningChacoSetGlobal(MatPartitioning, MPChacoGlobalType);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningChacoGetGlobal(MatPartitioning, MPChacoGlobalType *);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningChacoSetLocal(MatPartitioning, MPChacoLocalType);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningChacoGetLocal(MatPartitioning, MPChacoLocalType *);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningChacoSetCoarseLevel(MatPartitioning, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningChacoSetEigenSolver(MatPartitioning, MPChacoEigenType);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningChacoGetEigenSolver(MatPartitioning, MPChacoEigenType *);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningChacoSetEigenTol(MatPartitioning, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningChacoGetEigenTol(MatPartitioning, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningChacoSetEigenNumber(MatPartitioning, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningChacoGetEigenNumber(MatPartitioning, PetscInt *);

# 1706 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmat.h"
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningPartySetGlobal(MatPartitioning, const char *);



extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningPartySetLocal(MatPartitioning, const char *);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningPartySetCoarseLevel(MatPartitioning, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningPartySetBipart(MatPartitioning, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningPartySetMatchOptimization(MatPartitioning, PetscBool);

typedef enum {
  MP_PTSCOTCH_DEFAULT,
  MP_PTSCOTCH_QUALITY,
  MP_PTSCOTCH_SPEED,
  MP_PTSCOTCH_BALANCE,
  MP_PTSCOTCH_SAFETY,
  MP_PTSCOTCH_SCALABILITY
} MPPTScotchStrategyType;
extern __attribute__((visibility("default"))) const char *const MPPTScotchStrategyTypes[];

extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningPTScotchSetImbalance(MatPartitioning, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningPTScotchGetImbalance(MatPartitioning, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningPTScotchSetStrategy(MatPartitioning, MPPTScotchStrategyType);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningPTScotchGetStrategy(MatPartitioning, MPPTScotchStrategyType *);



 
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningHierarchicalGetFineparts(MatPartitioning, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningHierarchicalGetCoarseparts(MatPartitioning, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningHierarchicalSetNcoarseparts(MatPartitioning, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode MatPartitioningHierarchicalSetNfineparts(MatPartitioning, PetscInt);

extern __attribute__((visibility("default"))) PetscErrorCode MatMeshToCellGraph(Mat, PetscInt, Mat *);




 
typedef enum {
  MATOP_SET_VALUES               = 0,
  MATOP_GET_ROW                  = 1,
  MATOP_RESTORE_ROW              = 2,
  MATOP_MULT                     = 3,
  MATOP_MULT_ADD                 = 4,
  MATOP_MULT_TRANSPOSE           = 5,
  MATOP_MULT_TRANSPOSE_ADD       = 6,
  MATOP_SOLVE                    = 7,
  MATOP_SOLVE_ADD                = 8,
  MATOP_SOLVE_TRANSPOSE          = 9,
  MATOP_SOLVE_TRANSPOSE_ADD      = 10,
  MATOP_LUFACTOR                 = 11,
  MATOP_CHOLESKYFACTOR           = 12,
  MATOP_SOR                      = 13,
  MATOP_TRANSPOSE                = 14,
  MATOP_GETINFO                  = 15,
  MATOP_EQUAL                    = 16,
  MATOP_GET_DIAGONAL             = 17,
  MATOP_DIAGONAL_SCALE           = 18,
  MATOP_NORM                     = 19,
  MATOP_ASSEMBLY_BEGIN           = 20,
  MATOP_ASSEMBLY_END             = 21,
  MATOP_SET_OPTION               = 22,
  MATOP_ZERO_ENTRIES             = 23,
  MATOP_ZERO_ROWS                = 24,
  MATOP_LUFACTOR_SYMBOLIC        = 25,
  MATOP_LUFACTOR_NUMERIC         = 26,
  MATOP_CHOLESKY_FACTOR_SYMBOLIC = 27,
  MATOP_CHOLESKY_FACTOR_NUMERIC  = 28,
  MATOP_SETUP                    = 29,
  MATOP_ILUFACTOR_SYMBOLIC       = 30,
  MATOP_ICCFACTOR_SYMBOLIC       = 31,
  MATOP_GET_DIAGONAL_BLOCK       = 32,
  MATOP_SET_INF                  = 33,
  MATOP_DUPLICATE                = 34,
  MATOP_FORWARD_SOLVE            = 35,
  MATOP_BACKWARD_SOLVE           = 36,
  MATOP_ILUFACTOR                = 37,
  MATOP_ICCFACTOR                = 38,
  MATOP_AXPY                     = 39,
  MATOP_CREATE_SUBMATRICES       = 40,
  MATOP_INCREASE_OVERLAP         = 41,
  MATOP_GET_VALUES               = 42,
  MATOP_COPY                     = 43,
  MATOP_GET_ROW_MAX              = 44,
  MATOP_SCALE                    = 45,
  MATOP_SHIFT                    = 46,
  MATOP_DIAGONAL_SET             = 47,
  MATOP_ZERO_ROWS_COLUMNS        = 48,
  MATOP_SET_RANDOM               = 49,
  MATOP_GET_ROW_IJ               = 50,
  MATOP_RESTORE_ROW_IJ           = 51,
  MATOP_GET_COLUMN_IJ            = 52,
  MATOP_RESTORE_COLUMN_IJ        = 53,
  MATOP_FDCOLORING_CREATE        = 54,
  MATOP_COLORING_PATCH           = 55,
  MATOP_SET_UNFACTORED           = 56,
  MATOP_PERMUTE                  = 57,
  MATOP_SET_VALUES_BLOCKED       = 58,
  MATOP_CREATE_SUBMATRIX         = 59,
  MATOP_DESTROY                  = 60,
  MATOP_VIEW                     = 61,
  MATOP_CONVERT_FROM             = 62,
   
  MATOP_MATMAT_MULT_SYMBOLIC    = 64,
  MATOP_MATMAT_MULT_NUMERIC     = 65,
  MATOP_SET_LOCAL_TO_GLOBAL_MAP = 66,
  MATOP_SET_VALUES_LOCAL        = 67,
  MATOP_ZERO_ROWS_LOCAL         = 68,
  MATOP_GET_ROW_MAX_ABS         = 69,
  MATOP_GET_ROW_MIN_ABS         = 70,
  MATOP_CONVERT                 = 71,
  MATOP_HAS_OPERATION           = 72,
   
  MATOP_SET_VALUES_ADIFOR = 74,
  MATOP_FD_COLORING_APPLY = 75,
  MATOP_SET_FROM_OPTIONS  = 76,
   
   
  MATOP_FIND_ZERO_DIAGONALS       = 79,
  MATOP_MULT_MULTIPLE             = 80,
  MATOP_SOLVE_MULTIPLE            = 81,
  MATOP_GET_INERTIA               = 82,
  MATOP_LOAD                      = 83,
  MATOP_IS_SYMMETRIC              = 84,
  MATOP_IS_HERMITIAN              = 85,
  MATOP_IS_STRUCTURALLY_SYMMETRIC = 86,
  MATOP_SET_VALUES_BLOCKEDLOCAL   = 87,
  MATOP_CREATE_VECS               = 88,
   
  MATOP_MAT_MULT_SYMBOLIC = 90,
  MATOP_MAT_MULT_NUMERIC  = 91,
   
  MATOP_PTAP_SYMBOLIC = 93,
  MATOP_PTAP_NUMERIC  = 94,
   
  MATOP_MAT_TRANSPOSE_MULT_SYMBO = 96,
  MATOP_MAT_TRANSPOSE_MULT_NUMER = 97,
  MATOP_BIND_TO_CPU              = 98,
  MATOP_PRODUCTSETFROMOPTIONS    = 99,
  MATOP_PRODUCTSYMBOLIC          = 100,
  MATOP_PRODUCTNUMERIC           = 101,
  MATOP_CONJUGATE                = 102,
  MATOP_VIEW_NATIVE              = 103,
  MATOP_SET_VALUES_ROW           = 104,
  MATOP_REAL_PART                = 105,
  MATOP_IMAGINARY_PART           = 106,
  MATOP_GET_ROW_UPPER_TRIANGULAR = 107,
  MATOP_RESTORE_ROW_UPPER_TRIANG = 108,
  MATOP_MAT_SOLVE                = 109,
  MATOP_MAT_SOLVE_TRANSPOSE      = 110,
  MATOP_GET_ROW_MIN              = 111,
  MATOP_GET_COLUMN_VECTOR        = 112,
  MATOP_MISSING_DIAGONAL         = 113,
  MATOP_GET_SEQ_NONZERO_STRUCTUR = 114,
  MATOP_CREATE                   = 115,
  MATOP_GET_GHOSTS               = 116,
  MATOP_GET_LOCAL_SUB_MATRIX     = 117,
  MATOP_RESTORE_LOCALSUB_MATRIX  = 118,
  MATOP_MULT_DIAGONAL_BLOCK      = 119,
  MATOP_HERMITIAN_TRANSPOSE      = 120,
  MATOP_MULT_HERMITIAN_TRANSPOSE = 121,
  MATOP_MULT_HERMITIAN_TRANS_ADD = 122,
  MATOP_GET_MULTI_PROC_BLOCK     = 123,
  MATOP_FIND_NONZERO_ROWS        = 124,
  MATOP_GET_COLUMN_NORMS         = 125,
  MATOP_INVERT_BLOCK_DIAGONAL    = 126,
  MATOP_INVERT_VBLOCK_DIAGONAL   = 127,
  MATOP_CREATE_SUB_MATRICES_MPI  = 128,
  MATOP_SET_VALUES_BATCH         = 129,
   
  MATOP_TRANSPOSE_MAT_MULT_SYMBO = 131,
  MATOP_TRANSPOSE_MAT_MULT_NUMER = 132,
  MATOP_TRANSPOSE_COLORING_CREAT = 133,
  MATOP_TRANS_COLORING_APPLY_SPT = 134,
  MATOP_TRANS_COLORING_APPLY_DEN = 135,
   
  MATOP_RART_SYMBOLIC         = 137,
  MATOP_RART_NUMERIC          = 138,
  MATOP_SET_BLOCK_SIZES       = 139,
  MATOP_AYPX                  = 140,
  MATOP_RESIDUAL              = 141,
  MATOP_FDCOLORING_SETUP      = 142,
  MATOP_FIND_OFFBLOCK_ENTRIES = 143,
  MATOP_MPICONCATENATESEQ     = 144,
  MATOP_DESTROYSUBMATRICES    = 145,
  MATOP_TRANSPOSE_SOLVE       = 146,
  MATOP_GET_VALUES_LOCAL      = 147
} MatOperation;
extern __attribute__((visibility("default"))) PetscErrorCode MatSetOperation(Mat, MatOperation, void (*)(void));
extern __attribute__((visibility("default"))) PetscErrorCode MatGetOperation(Mat, MatOperation, void (**)(void));
extern __attribute__((visibility("default"))) PetscErrorCode MatHasOperation(Mat, MatOperation, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatHasCongruentLayouts(Mat, PetscBool *);
__attribute__((deprecated)) static inline PetscErrorCode MatFreeIntermediateDataStructures(Mat A)
{
  return MatProductClear(A);
}
extern __attribute__((visibility("default"))) PetscErrorCode MatShellSetOperation(Mat, MatOperation, void (*)(void));
extern __attribute__((visibility("default"))) PetscErrorCode MatShellGetOperation(Mat, MatOperation, void (**)(void));
extern __attribute__((visibility("default"))) PetscErrorCode MatShellSetContext(Mat, void *);
extern __attribute__((visibility("default"))) PetscErrorCode MatShellSetContextDestroy(Mat, PetscErrorCode (*)(void *));
extern __attribute__((visibility("default"))) PetscErrorCode MatShellSetVecType(Mat, VecType);
extern __attribute__((visibility("default"))) PetscErrorCode MatShellTestMult(Mat, PetscErrorCode (*)(void *, Vec, Vec), Vec, void *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatShellTestMultTranspose(Mat, PetscErrorCode (*)(void *, Vec, Vec), Vec, void *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatShellSetManageScalingShifts(Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatShellSetMatProductOperation(Mat, MatProductType, PetscErrorCode (*)(Mat, Mat, Mat, void **), PetscErrorCode (*)(Mat, Mat, Mat, void *), PetscErrorCode (*)(void *), MatType, MatType);
extern __attribute__((visibility("default"))) PetscErrorCode MatIsShell(Mat, PetscBool *);








 


extern __attribute__((visibility("default"))) PetscErrorCode MatMPIBAIJSetHashTableFactor(Mat, PetscReal);

extern __attribute__((visibility("default"))) PetscErrorCode MatISSetLocalMatType(Mat, MatType);
extern __attribute__((visibility("default"))) PetscErrorCode MatISSetPreallocation(Mat, PetscInt, const PetscInt[], PetscInt, const PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatISStoreL2L(Mat, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode MatISFixLocalEmpty(Mat, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode MatISGetLocalMat(Mat, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatISRestoreLocalMat(Mat, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatISSetLocalMat(Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatISGetLocalToGlobalMapping(Mat, ISLocalToGlobalMapping *, ISLocalToGlobalMapping *);
extern __attribute__((visibility("default")))                __attribute__((deprecated)) PetscErrorCode MatISGetMPIXAIJ(Mat, MatReuse, Mat *);








 
typedef struct _p_MatNullSpace *MatNullSpace;

extern __attribute__((visibility("default"))) PetscErrorCode MatNullSpaceCreate(MPI_Comm, PetscBool, PetscInt, const Vec[], MatNullSpace *);
extern __attribute__((visibility("default"))) PetscErrorCode MatNullSpaceSetFunction(MatNullSpace, PetscErrorCode (*)(MatNullSpace, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode MatNullSpaceDestroy(MatNullSpace *);
extern __attribute__((visibility("default"))) PetscErrorCode MatNullSpaceRemove(MatNullSpace, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetNullSpace(Mat, MatNullSpace *);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetTransposeNullSpace(Mat, MatNullSpace *);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetTransposeNullSpace(Mat, MatNullSpace);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetNullSpace(Mat, MatNullSpace);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetNearNullSpace(Mat, MatNullSpace);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetNearNullSpace(Mat, MatNullSpace *);
extern __attribute__((visibility("default"))) PetscErrorCode MatNullSpaceTest(MatNullSpace, Mat, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatNullSpaceView(MatNullSpace, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode MatNullSpaceGetVecs(MatNullSpace, PetscBool *, PetscInt *, const Vec **);
extern __attribute__((visibility("default"))) PetscErrorCode MatNullSpaceCreateRigidBody(Vec, MatNullSpace *);

extern __attribute__((visibility("default"))) PetscErrorCode MatReorderingSeqSBAIJ(Mat, IS);
extern __attribute__((visibility("default"))) PetscErrorCode MatMPISBAIJSetHashTableFactor(Mat, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode MatSeqSBAIJSetColumnIndices(Mat, PetscInt *);

extern __attribute__((visibility("default"))) PetscErrorCode MatCreateMAIJ(Mat, PetscInt, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMAIJRedimension(Mat, PetscInt, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMAIJGetAIJ(Mat, Mat *);

extern __attribute__((visibility("default"))) PetscErrorCode MatComputeOperator(Mat, MatType, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatComputeOperatorTranspose(Mat, MatType, Mat *);

__attribute__((deprecated)) static inline PetscErrorCode MatComputeExplicitOperator(Mat A, Mat *B)
{
  return MatComputeOperator(A, ((void*)0), B);
}
__attribute__((deprecated)) static inline PetscErrorCode MatComputeExplicitOperatorTranspose(Mat A, Mat *B)
{
  return MatComputeOperatorTranspose(A, ((void*)0), B);
}

extern __attribute__((visibility("default"))) PetscErrorCode MatCreateKAIJ(Mat, PetscInt, PetscInt, const PetscScalar[], const PetscScalar[], Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatKAIJGetAIJ(Mat, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatKAIJGetS(Mat, PetscInt *, PetscInt *, PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode MatKAIJGetSRead(Mat, PetscInt *, PetscInt *, const PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode MatKAIJRestoreS(Mat, PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode MatKAIJRestoreSRead(Mat, const PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode MatKAIJGetT(Mat, PetscInt *, PetscInt *, PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode MatKAIJGetTRead(Mat, PetscInt *, PetscInt *, const PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode MatKAIJRestoreT(Mat, PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode MatKAIJRestoreTRead(Mat, const PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode MatKAIJSetAIJ(Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatKAIJSetS(Mat, PetscInt, PetscInt, const PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatKAIJSetT(Mat, PetscInt, PetscInt, const PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatKAIJGetScaledIdentity(Mat, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode MatDiagonalScaleLocal(Mat, Vec);

extern __attribute__((visibility("default"))) PetscErrorCode MatCreateMFFD(MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMFFDSetBase(Mat, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatMFFDSetFunction(Mat, PetscErrorCode (*)(void *, Vec, Vec), void *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMFFDSetFunctioni(Mat, PetscErrorCode (*)(void *, PetscInt, Vec, PetscScalar *));
extern __attribute__((visibility("default"))) PetscErrorCode MatMFFDSetFunctioniBase(Mat, PetscErrorCode (*)(void *, Vec));
extern __attribute__((visibility("default"))) PetscErrorCode MatMFFDSetHHistory(Mat, PetscScalar[], PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode MatMFFDResetHHistory(Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatMFFDSetFunctionError(Mat, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode MatMFFDSetPeriod(Mat, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode MatMFFDGetH(Mat, PetscScalar *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMFFDSetOptionsPrefix(Mat, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatMFFDCheckPositivity(void *, Vec, Vec, PetscScalar *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMFFDSetCheckh(Mat, PetscErrorCode (*)(void *, Vec, Vec, PetscScalar *), void *);













 
typedef struct _p_MatMFFD *MatMFFD;







 
typedef const char *MatMFFDType;



extern __attribute__((visibility("default"))) PetscErrorCode MatMFFDSetType(Mat, MatMFFDType);
extern __attribute__((visibility("default"))) PetscErrorCode MatMFFDRegister(const char[], PetscErrorCode (*)(MatMFFD));

extern __attribute__((visibility("default"))) PetscErrorCode MatMFFDDSSetUmin(Mat, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode MatMFFDWPSetComputeNormU(Mat, PetscBool);

extern __attribute__((visibility("default"))) PetscErrorCode MatFDColoringSetType(MatFDColoring, MatMFFDType);

extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerMathematicaPutMatrix(PetscViewer, PetscInt, PetscInt, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerMathematicaPutCSRMatrix(PetscViewer, PetscInt, PetscInt, PetscInt *, PetscInt *, PetscReal *);

# 2061 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmat.h"

# 2108 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmat.h"


extern __attribute__((visibility("default"))) PetscErrorCode MatMumpsSetIcntl(Mat, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode MatMumpsGetIcntl(Mat, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMumpsSetCntl(Mat, PetscInt, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode MatMumpsGetCntl(Mat, PetscInt, PetscReal *);

extern __attribute__((visibility("default"))) PetscErrorCode MatMumpsGetInfo(Mat, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMumpsGetInfog(Mat, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMumpsGetRinfo(Mat, PetscInt, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMumpsGetRinfog(Mat, PetscInt, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMumpsGetInverse(Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatMumpsGetInverseTranspose(Mat, Mat);


















# 2169 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmat.h"

extern __attribute__((visibility("default"))) PetscErrorCode MatBindToCPU(Mat, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode MatBoundToCPU(Mat, PetscBool *);
__attribute__((deprecated)) static inline PetscErrorCode MatPinToCPU(Mat A, PetscBool flg)
{
  return MatBindToCPU(A, flg);
}
extern __attribute__((visibility("default"))) PetscErrorCode MatSetBindingPropagates(Mat, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetBindingPropagates(Mat, PetscBool *);

typedef struct _n_SplitCSRMat *PetscSplitCSRDataStructure;
extern __attribute__((visibility("default"))) PetscErrorCode    MatCUSPARSEGetDeviceMatWrite(Mat, PetscSplitCSRDataStructure *);







# 2266 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmat.h"

# 2344 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscmat.h"







extern __attribute__((visibility("default"))) PetscErrorCode VecScatterPetscToFFTW(Mat, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecScatterFFTWToPetsc(Mat, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateVecsFFTW(Mat, Vec *, Vec *, Vec *);



extern __attribute__((visibility("default"))) PetscErrorCode MatCreateScaLAPACK(MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatScaLAPACKSetBlockSizes(Mat, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode MatScaLAPACKGetBlockSizes(Mat, PetscInt *, PetscInt *);


extern __attribute__((visibility("default"))) PetscErrorCode MatCreateNest(MPI_Comm, PetscInt, const IS[], PetscInt, const IS[], const Mat[], Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatNestGetSize(Mat, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode MatNestGetISs(Mat, IS[], IS[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatNestGetLocalISs(Mat, IS[], IS[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatNestGetSubMats(Mat, PetscInt *, PetscInt *, Mat ***);
extern __attribute__((visibility("default"))) PetscErrorCode MatNestGetSubMat(Mat, PetscInt, PetscInt, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatNestSetVecType(Mat, VecType);
extern __attribute__((visibility("default"))) PetscErrorCode MatNestSetSubMats(Mat, PetscInt, const IS[], PetscInt, const IS[], const Mat[]);
extern __attribute__((visibility("default"))) PetscErrorCode MatNestSetSubMat(Mat, PetscInt, PetscInt, Mat);

extern __attribute__((visibility("default"))) PetscErrorCode MatChop(Mat, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode MatComputeBandwidth(Mat, PetscReal, PetscInt *);

extern __attribute__((visibility("default"))) PetscErrorCode MatSubdomainsCreateCoalesce(Mat, PetscInt, PetscInt *, IS **);

extern __attribute__((visibility("default"))) PetscErrorCode MatPreallocatorPreallocate(Mat, PetscBool, Mat);

extern __attribute__((visibility("hidden"))) PetscErrorCode MatHeaderMerge(Mat, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatHeaderReplace(Mat, Mat *);

extern __attribute__((visibility("default"))) PetscErrorCode MatSeqAIJGetCSRAndMemType(Mat, const PetscInt **, const PetscInt **, PetscScalar **, PetscMemType *);

extern __attribute__((visibility("default"))) PetscErrorCode MatCreateGraph(Mat, PetscBool, PetscBool, PetscReal, Mat *);
# 7 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdm.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdmtypes.h" 1



 







 
typedef struct _p_DM *DM;


























 
typedef enum {
  DM_BOUNDARY_NONE,
  DM_BOUNDARY_GHOSTED,
  DM_BOUNDARY_MIRROR,
  DM_BOUNDARY_PERIODIC,
  DM_BOUNDARY_TWIST
} DMBoundaryType;
















 
typedef enum {
  DM_BC_ESSENTIAL          = 1,
  DM_BC_ESSENTIAL_FIELD    = 5,
  DM_BC_NATURAL            = 2,
  DM_BC_NATURAL_FIELD      = 6,
  DM_BC_ESSENTIAL_BD_FIELD = 9,
  DM_BC_NATURAL_RIEMANN    = 10
} DMBoundaryConditionType;












 
typedef enum {
  DM_POINTLOCATION_NONE,
  DM_POINTLOCATION_NEAREST,
  DM_POINTLOCATION_REMOVE
} DMPointLocationType;











 
typedef enum {
  DM_ADAPTATION_INITIAL,
  DM_ADAPTATION_SEQUENTIAL,
  DM_ADAPTATION_MULTILEVEL
} DMAdaptationStrategy;












 
typedef enum {
  DM_ADAPTATION_NONE,
  DM_ADAPTATION_REFINE,
  DM_ADAPTATION_LABEL,
  DM_ADAPTATION_METRIC
} DMAdaptationCriterion;







 
typedef enum {
  DM_ADAPT_DETERMINE = -1,
  DM_ADAPT_KEEP      = 0,
  DM_ADAPT_REFINE,
  DM_ADAPT_COARSEN,
  DM_ADAPT_COARSEN_LAST,
  DM_ADAPT_RESERVED_COUNT
} DMAdaptFlag;







 
typedef enum {
  DM_X,
  DM_Y,
  DM_Z
} DMDirection;


















 
typedef enum {
  DM_ENC_EQUALITY,
  DM_ENC_SUPERMESH,
  DM_ENC_SUBMESH,
  DM_ENC_NONE,
  DM_ENC_UNKNOWN
} DMEnclosureType;













 
typedef enum {
  DM_POLYTOPE_POINT,
  DM_POLYTOPE_SEGMENT,
  DM_POLYTOPE_POINT_PRISM_TENSOR,
  DM_POLYTOPE_TRIANGLE,
  DM_POLYTOPE_QUADRILATERAL,
  DM_POLYTOPE_SEG_PRISM_TENSOR,
  DM_POLYTOPE_TETRAHEDRON,
  DM_POLYTOPE_HEXAHEDRON,
  DM_POLYTOPE_TRI_PRISM,
  DM_POLYTOPE_TRI_PRISM_TENSOR,
  DM_POLYTOPE_QUAD_PRISM_TENSOR,
  DM_POLYTOPE_PYRAMID,
  DM_POLYTOPE_FV_GHOST,
  DM_POLYTOPE_INTERIOR_GHOST,
  DM_POLYTOPE_UNKNOWN,
  DM_NUM_POLYTOPES
} DMPolytopeType;
extern __attribute__((visibility("default"))) const char *const DMPolytopeTypes[];







 
typedef enum {
  PETSC_UNIT_LENGTH,
  PETSC_UNIT_MASS,
  PETSC_UNIT_TIME,
  PETSC_UNIT_CURRENT,
  PETSC_UNIT_TEMPERATURE,
  PETSC_UNIT_AMOUNT,
  PETSC_UNIT_LUMINOSITY,
  NUM_PETSC_UNITS
} PetscUnit;





 
typedef struct _p_DMField *DMField;





 
typedef struct _p_UniversalLabel *DMUniversalLabel;

typedef struct _n_DMGeneratorFunctionList *DMGeneratorFunctionList;

# 8 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdm.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscfetypes.h" 1



 







 
typedef struct _p_PetscSpace *PetscSpace;







 
typedef struct _p_PetscDualSpace *PetscDualSpace;









 
typedef enum {
  PETSCDUALSPACE_REFCELL_SIMPLEX,
  PETSCDUALSPACE_REFCELL_TENSOR
} PetscDualSpaceReferenceCell;
extern __attribute__((visibility("default"))) const char *const PetscDualSpaceReferenceCells[];


















 
typedef enum {
  IDENTITY_TRANSFORM,
  COVARIANT_PIOLA_TRANSFORM,
  CONTRAVARIANT_PIOLA_TRANSFORM
} PetscDualSpaceTransformType;







 
typedef struct _p_PetscFE *PetscFE;







 
typedef enum {
  PETSCFE_JACOBIAN,
  PETSCFE_JACOBIAN_PRE,
  PETSCFE_JACOBIAN_DYN
} PetscFEJacobianType;

# 9 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdm.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdstypes.h" 1



# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdmlabel.h" 1




 













 
typedef struct _p_DMLabel *DMLabel;

extern __attribute__((visibility("default"))) PetscErrorCode DMLabelCreate(MPI_Comm, const char[], DMLabel *);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelView(DMLabel, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelReset(DMLabel);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelDestroy(DMLabel *);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelGetDefaultValue(DMLabel, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelSetDefaultValue(DMLabel, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelDuplicate(DMLabel, DMLabel *);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelCompare(MPI_Comm, DMLabel, DMLabel, PetscBool *, char **message);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelGetValue(DMLabel, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelSetValue(DMLabel, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelClearValue(DMLabel, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelAddStratum(DMLabel, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelAddStrata(DMLabel, PetscInt, const PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelAddStrataIS(DMLabel, IS);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelInsertIS(DMLabel, IS, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelGetNumValues(DMLabel, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelGetStratumBounds(DMLabel, PetscInt, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelGetValueIS(DMLabel, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelGetNonEmptyStratumValuesIS(DMLabel, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelGetValueIndex(DMLabel, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelStratumHasPoint(DMLabel, PetscInt, PetscInt, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelHasStratum(DMLabel, PetscInt, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelGetStratumSize(DMLabel, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelGetStratumIS(DMLabel, PetscInt, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelSetStratumIS(DMLabel, PetscInt, IS);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelSetStratumBounds(DMLabel, PetscInt, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelClearStratum(DMLabel, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelGetStratumPointIndex(DMLabel, PetscInt, PetscInt, PetscInt *);

extern __attribute__((visibility("default"))) PetscErrorCode DMLabelComputeIndex(DMLabel);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelCreateIndex(DMLabel, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelDestroyIndex(DMLabel);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelHasValue(DMLabel, PetscInt, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelHasPoint(DMLabel, PetscInt, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelGetBounds(DMLabel, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelFilter(DMLabel, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelPermute(DMLabel, IS, DMLabel *);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelDistribute(DMLabel, PetscSF, DMLabel *);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelGather(DMLabel, PetscSF, DMLabel *);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelConvertToSection(DMLabel, PetscSection *, IS *);

extern __attribute__((visibility("default"))) PetscErrorCode DMLabelPropagateBegin(DMLabel, PetscSF);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelPropagatePush(DMLabel, PetscSF, PetscErrorCode (*)(DMLabel, PetscInt, PetscInt, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMLabelPropagateEnd(DMLabel, PetscSF);

extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionCreateGlobalSectionLabel(PetscSection, PetscSF, PetscBool, DMLabel, PetscInt, PetscSection *);


extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSymCreateLabel(MPI_Comm, DMLabel, PetscSectionSym *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSymLabelSetLabel(PetscSectionSym, DMLabel);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSymLabelGetStratum(PetscSectionSym, PetscInt, PetscInt *, PetscInt *, PetscInt *, const PetscInt ***, const PetscScalar ***);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSectionSymLabelSetStratum(PetscSectionSym, PetscInt, PetscInt, PetscInt, PetscInt, PetscCopyMode, const PetscInt **, const PetscScalar **);

# 5 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdstypes.h" 2

 







 
typedef struct _p_PetscDS *PetscDS;







 
typedef struct _p_PetscWeakForm *PetscWeakForm;











 
typedef struct _PetscFormKey {
  DMLabel  label;  
  PetscInt value;
  PetscInt field;  
  PetscInt part;   
} PetscFormKey;


















 
typedef enum {
  PETSC_WF_OBJECTIVE,
  PETSC_WF_F0,
  PETSC_WF_F1,
  PETSC_WF_G0,
  PETSC_WF_G1,
  PETSC_WF_G2,
  PETSC_WF_G3,
  PETSC_WF_GP0,
  PETSC_WF_GP1,
  PETSC_WF_GP2,
  PETSC_WF_GP3,
  PETSC_WF_GT0,
  PETSC_WF_GT1,
  PETSC_WF_GT2,
  PETSC_WF_GT3,
  PETSC_WF_BDF0,
  PETSC_WF_BDF1,
  PETSC_WF_BDG0,
  PETSC_WF_BDG1,
  PETSC_WF_BDG2,
  PETSC_WF_BDG3,
  PETSC_WF_BDGP0,
  PETSC_WF_BDGP1,
  PETSC_WF_BDGP2,
  PETSC_WF_BDGP3,
  PETSC_WF_R,
  PETSC_NUM_WF
} PetscWeakFormKind;
extern __attribute__((visibility("default"))) const char *const PetscWeakFormKinds[];

# 10 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdm.h" 2


 

extern __attribute__((visibility("default"))) PetscErrorCode DMInitializePackage(void);

extern __attribute__((visibility("default"))) PetscClassId DM_CLASSID;
extern __attribute__((visibility("default"))) PetscClassId DMLABEL_CLASSID;









 
typedef const char *DMType;
# 44 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdm.h"

extern __attribute__((visibility("default"))) const char *const       DMBoundaryTypes[];
extern __attribute__((visibility("default"))) const char *const       DMBoundaryConditionTypes[];
extern __attribute__((visibility("default"))) PetscFunctionList       DMList;
extern __attribute__((visibility("default"))) DMGeneratorFunctionList DMGenerateList;
extern __attribute__((visibility("default"))) PetscErrorCode          DMCreate(MPI_Comm, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode          DMClone(DM, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode          DMSetType(DM, DMType);
extern __attribute__((visibility("default"))) PetscErrorCode          DMGetType(DM, DMType *);
extern __attribute__((visibility("default"))) PetscErrorCode          DMRegister(const char[], PetscErrorCode (*)(DM));
extern __attribute__((visibility("default"))) PetscErrorCode          DMRegisterDestroy(void);

extern __attribute__((visibility("default"))) PetscErrorCode DMView(DM, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode DMLoad(DM, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode DMDestroy(DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMCreateGlobalVector(DM, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMCreateLocalVector(DM, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetLocalVector(DM, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMRestoreLocalVector(DM, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetGlobalVector(DM, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMRestoreGlobalVector(DM, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMClearGlobalVectors(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMClearLocalVectors(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMHasNamedGlobalVector(DM, const char *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetNamedGlobalVector(DM, const char *, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMRestoreNamedGlobalVector(DM, const char *, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMHasNamedLocalVector(DM, const char *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetNamedLocalVector(DM, const char *, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMRestoreNamedLocalVector(DM, const char *, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetLocalToGlobalMapping(DM, ISLocalToGlobalMapping *);
extern __attribute__((visibility("default"))) PetscErrorCode DMCreateFieldIS(DM, PetscInt *, char ***, IS **);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetBlockSize(DM, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMCreateColoring(DM, ISColoringType, ISColoring *);
extern __attribute__((visibility("default"))) PetscErrorCode DMCreateMatrix(DM, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetMatrixPreallocateSkip(DM, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetMatrixPreallocateOnly(DM, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetMatrixStructureOnly(DM, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode DMCreateInterpolation(DM, DM, Mat *, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMCreateRestriction(DM, DM, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode DMCreateInjection(DM, DM, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode DMCreateMassMatrix(DM, DM, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode DMCreateMassMatrixLumped(DM, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetWorkArray(DM, PetscInt, MPI_Datatype, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMRestoreWorkArray(DM, PetscInt, MPI_Datatype, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMRefine(DM, MPI_Comm, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMCoarsen(DM, MPI_Comm, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetCoarseDM(DM, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetCoarseDM(DM, DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetFineDM(DM, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetFineDM(DM, DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMRefineHierarchy(DM, PetscInt, DM[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMCoarsenHierarchy(DM, PetscInt, DM[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMCoarsenHookAdd(DM, PetscErrorCode (*)(DM, DM, void *), PetscErrorCode (*)(DM, Mat, Vec, Mat, DM, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMCoarsenHookRemove(DM, PetscErrorCode (*)(DM, DM, void *), PetscErrorCode (*)(DM, Mat, Vec, Mat, DM, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMRefineHookAdd(DM, PetscErrorCode (*)(DM, DM, void *), PetscErrorCode (*)(DM, Mat, DM, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMRefineHookRemove(DM, PetscErrorCode (*)(DM, DM, void *), PetscErrorCode (*)(DM, Mat, DM, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMRestrict(DM, Mat, Vec, Mat, DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMInterpolate(DM, Mat, DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMInterpolateSolution(DM, DM, Mat, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMExtrude(DM, PetscInt, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetFromOptions(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMViewFromOptions(DM, PetscObject, const char[]);

extern __attribute__((visibility("default"))) PetscErrorCode DMGenerate(DM, const char[], PetscBool, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMGenerateRegister(const char[], PetscErrorCode (*)(DM, PetscBool, DM *), PetscErrorCode (*)(DM, PetscReal *, DM *), PetscErrorCode (*)(DM, Vec, DMLabel, DMLabel, DM *), PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMGenerateRegisterAll(void);
extern __attribute__((visibility("default"))) PetscErrorCode DMGenerateRegisterDestroy(void);
extern __attribute__((visibility("default"))) PetscErrorCode DMAdaptLabel(DM, DMLabel, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMAdaptMetric(DM, Vec, DMLabel, DMLabel, DM *);

extern __attribute__((visibility("default"))) PetscErrorCode DMSetUp(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMCreateInterpolationScale(DM, DM, Mat, Vec *);
extern __attribute__((visibility("default")))                __attribute__((deprecated)) PetscErrorCode DMCreateAggregates(DM, DM, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode DMGlobalToLocalHookAdd(DM, PetscErrorCode (*)(DM, Vec, InsertMode, Vec, void *), PetscErrorCode (*)(DM, Vec, InsertMode, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMLocalToGlobalHookAdd(DM, PetscErrorCode (*)(DM, Vec, InsertMode, Vec, void *), PetscErrorCode (*)(DM, Vec, InsertMode, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMGlobalToLocal(DM, Vec, InsertMode, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMGlobalToLocalBegin(DM, Vec, InsertMode, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMGlobalToLocalEnd(DM, Vec, InsertMode, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMLocalToGlobal(DM, Vec, InsertMode, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMLocalToGlobalBegin(DM, Vec, InsertMode, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMLocalToGlobalEnd(DM, Vec, InsertMode, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMLocalToLocalBegin(DM, Vec, InsertMode, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMLocalToLocalEnd(DM, Vec, InsertMode, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMConvert(DM, DMType, DM *);

 
extern __attribute__((visibility("default"))) PetscErrorCode DMGetDimension(DM, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetDimension(DM, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetDimPoints(DM, PetscInt, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetUseNatural(DM, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetUseNatural(DM, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetNeighbors(DM, PetscInt *, const PetscMPIInt **);

 
extern __attribute__((visibility("default"))) PetscErrorCode DMGetCoordinateDM(DM, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetCoordinateDM(DM, DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetCellCoordinateDM(DM, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetCellCoordinateDM(DM, DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetCoordinateDim(DM, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetCoordinateDim(DM, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetCoordinateSection(DM, PetscSection *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetCoordinateSection(DM, PetscInt, PetscSection);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetCellCoordinateSection(DM, PetscSection *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetCellCoordinateSection(DM, PetscInt, PetscSection);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetCoordinates(DM, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetCoordinates(DM, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetCellCoordinates(DM, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetCellCoordinates(DM, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetCoordinatesLocalSetUp(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetCoordinatesLocal(DM, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetCoordinatesLocalNoncollective(DM, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetCoordinatesLocalTuple(DM, IS, PetscSection *, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetCoordinatesLocal(DM, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetCellCoordinatesLocalSetUp(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetCellCoordinatesLocal(DM, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetCellCoordinatesLocalNoncollective(DM, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetCellCoordinatesLocal(DM, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetCoordinateField(DM, DMField *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetCoordinateField(DM, DMField);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetLocalBoundingBox(DM, PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetBoundingBox(DM, PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMProjectCoordinates(DM, PetscFE);
extern __attribute__((visibility("default"))) PetscErrorCode DMLocatePoints(DM, Vec, DMPointLocationType, PetscSF *);

 
extern __attribute__((visibility("default"))) PetscErrorCode DMGetPeriodicity(DM, const PetscReal *[], const PetscReal *[], const PetscReal *[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetPeriodicity(DM, const PetscReal[], const PetscReal[], const PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMLocalizeCoordinate(DM, const PetscScalar[], PetscBool, PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMLocalizeCoordinates(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetCoordinatesLocalized(DM, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetCoordinatesLocalizedLocal(DM, PetscBool *);

 
extern __attribute__((visibility("default"))) PetscErrorCode DMSubDomainHookAdd(DM, PetscErrorCode (*)(DM, DM, void *), PetscErrorCode (*)(DM, VecScatter, VecScatter, DM, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSubDomainHookRemove(DM, PetscErrorCode (*)(DM, DM, void *), PetscErrorCode (*)(DM, VecScatter, VecScatter, DM, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSubDomainRestrict(DM, VecScatter, VecScatter, DM);

extern __attribute__((visibility("default"))) PetscErrorCode DMSetOptionsPrefix(DM, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMAppendOptionsPrefix(DM, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetOptionsPrefix(DM, const char *[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetVecType(DM, VecType);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetVecType(DM, VecType *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetMatType(DM, MatType);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetMatType(DM, MatType *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetISColoringType(DM, ISColoringType);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetISColoringType(DM, ISColoringType *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetApplicationContext(DM, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetApplicationContextDestroy(DM, PetscErrorCode (*)(void **));
extern __attribute__((visibility("default"))) PetscErrorCode DMGetApplicationContext(DM, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetVariableBounds(DM, PetscErrorCode (*)(DM, Vec, Vec));
extern __attribute__((visibility("default"))) PetscErrorCode DMHasVariableBounds(DM, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMHasColoring(DM, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMHasCreateRestriction(DM, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMHasCreateInjection(DM, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMComputeVariableBounds(DM, Vec, Vec);

extern __attribute__((visibility("default"))) PetscErrorCode DMCreateSubDM(DM, PetscInt, const PetscInt[], IS *, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMCreateSuperDM(DM[], PetscInt, IS **, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMCreateSectionSubDM(DM, PetscInt, const PetscInt[], IS *, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMCreateSectionSuperDM(DM[], PetscInt, IS **, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMCreateFieldDecomposition(DM, PetscInt *, char ***, IS **, DM **);
extern __attribute__((visibility("default"))) PetscErrorCode DMCreateDomainDecomposition(DM, PetscInt *, char ***, IS **, IS **, DM **);
extern __attribute__((visibility("default"))) PetscErrorCode DMCreateDomainDecompositionScatters(DM, PetscInt, DM *, VecScatter **, VecScatter **, VecScatter **);

extern __attribute__((visibility("default"))) PetscErrorCode DMGetRefineLevel(DM, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetRefineLevel(DM, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetCoarsenLevel(DM, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetCoarsenLevel(DM, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMFinalizePackage(void);

extern __attribute__((visibility("default"))) PetscErrorCode VecGetDM(Vec, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode VecSetDM(Vec, DM);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetDM(Mat, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode MatSetDM(Mat, DM);
extern __attribute__((visibility("default"))) PetscErrorCode MatFDColoringUseDM(Mat, MatFDColoring);

typedef struct NLF_DAAD *NLF;



 
extern __attribute__((visibility("default"))) PetscErrorCode DMPrintCellVector(PetscInt, const char[], PetscInt, const PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPrintCellMatrix(PetscInt, const char[], PetscInt, PetscInt, const PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPrintLocalVec(DM, const char[], PetscReal, Vec);

extern __attribute__((visibility("default"))) PetscErrorCode DMSetNullSpaceConstructor(DM, PetscInt, PetscErrorCode (*)(DM, PetscInt, PetscInt, MatNullSpace *));
extern __attribute__((visibility("default"))) PetscErrorCode DMGetNullSpaceConstructor(DM, PetscInt, PetscErrorCode (**)(DM, PetscInt, PetscInt, MatNullSpace *));
extern __attribute__((visibility("default"))) PetscErrorCode DMSetNearNullSpaceConstructor(DM, PetscInt, PetscErrorCode (*)(DM, PetscInt, PetscInt, MatNullSpace *));
extern __attribute__((visibility("default"))) PetscErrorCode DMGetNearNullSpaceConstructor(DM, PetscInt, PetscErrorCode (**)(DM, PetscInt, PetscInt, MatNullSpace *));

extern __attribute__((visibility("default"))) PetscErrorCode DMGetSection(DM, PetscSection *);  
extern __attribute__((visibility("default"))) PetscErrorCode DMSetSection(DM, PetscSection);    
extern __attribute__((visibility("default"))) PetscErrorCode DMGetLocalSection(DM, PetscSection *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetLocalSection(DM, PetscSection);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetGlobalSection(DM, PetscSection *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetGlobalSection(DM, PetscSection);
static inline __attribute__((deprecated)) PetscErrorCode DMGetDefaultSection(DM dm, PetscSection *s)
{
  return DMGetSection(dm, s);
}
static inline __attribute__((deprecated)) PetscErrorCode DMSetDefaultSection(DM dm, PetscSection s)
{
  return DMSetSection(dm, s);
}
static inline __attribute__((deprecated)) PetscErrorCode DMGetDefaultGlobalSection(DM dm, PetscSection *s)
{
  return DMGetGlobalSection(dm, s);
}
static inline __attribute__((deprecated)) PetscErrorCode DMSetDefaultGlobalSection(DM dm, PetscSection s)
{
  return DMSetGlobalSection(dm, s);
}

extern __attribute__((visibility("default"))) PetscErrorCode DMGetSectionSF(DM, PetscSF *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetSectionSF(DM, PetscSF);
extern __attribute__((visibility("default"))) PetscErrorCode DMCreateSectionSF(DM, PetscSection, PetscSection);
static inline __attribute__((deprecated)) PetscErrorCode DMGetDefaultSF(DM dm, PetscSF *s)
{
  return DMGetSectionSF(dm, s);
}
static inline __attribute__((deprecated)) PetscErrorCode DMSetDefaultSF(DM dm, PetscSF s)
{
  return DMSetSectionSF(dm, s);
}
static inline __attribute__((deprecated)) PetscErrorCode DMCreateDefaultSF(DM dm, PetscSection l, PetscSection g)
{
  return DMCreateSectionSF(dm, l, g);
}
extern __attribute__((visibility("default"))) PetscErrorCode DMGetPointSF(DM, PetscSF *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetPointSF(DM, PetscSF);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetNaturalSF(DM, PetscSF *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetNaturalSF(DM, PetscSF);

extern __attribute__((visibility("default"))) PetscErrorCode DMGetDefaultConstraints(DM, PetscSection *, Mat *, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetDefaultConstraints(DM, PetscSection, Mat, Vec);

extern __attribute__((visibility("default"))) PetscErrorCode DMGetOutputDM(DM, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetOutputSequenceNumber(DM, PetscInt *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetOutputSequenceNumber(DM, PetscInt, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode DMOutputSequenceLoad(DM, PetscViewer, const char *, PetscInt, PetscReal *);

extern __attribute__((visibility("default"))) PetscErrorCode DMGetNumFields(DM, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetNumFields(DM, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetField(DM, PetscInt, DMLabel *, PetscObject *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetField(DM, PetscInt, DMLabel, PetscObject);
extern __attribute__((visibility("default"))) PetscErrorCode DMAddField(DM, DMLabel, PetscObject);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetFieldAvoidTensor(DM, PetscInt, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetFieldAvoidTensor(DM, PetscInt, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMClearFields(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMCopyFields(DM, DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetAdjacency(DM, PetscInt, PetscBool *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetAdjacency(DM, PetscInt, PetscBool, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetBasicAdjacency(DM, PetscBool *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetBasicAdjacency(DM, PetscBool, PetscBool);

extern __attribute__((visibility("default"))) PetscErrorCode DMGetNumDS(DM, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetDS(DM, PetscDS *);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetCellDS(DM, PetscInt, PetscDS *);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetRegionDS(DM, DMLabel, IS *, PetscDS *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetRegionDS(DM, DMLabel, IS, PetscDS);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetRegionNumDS(DM, PetscInt, DMLabel *, IS *, PetscDS *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetRegionNumDS(DM, PetscInt, DMLabel, IS, PetscDS);
extern __attribute__((visibility("default"))) PetscErrorCode DMFindRegionNum(DM, PetscDS, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMCreateFEDefault(DM, PetscInt, const char[], PetscInt, PetscFE *);
extern __attribute__((visibility("default"))) PetscErrorCode DMCreateDS(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMClearDS(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMCopyDS(DM, DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMCopyDisc(DM, DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMComputeExactSolution(DM, PetscReal, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetNumAuxiliaryVec(DM, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetAuxiliaryVec(DM, DMLabel, PetscInt, PetscInt, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetAuxiliaryVec(DM, DMLabel, PetscInt, PetscInt, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetAuxiliaryLabels(DM, DMLabel[], PetscInt[], PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMCopyAuxiliaryVec(DM, DM);

















 
struct _DMInterpolationInfo {
  MPI_Comm   comm;
  PetscInt   dim;     
  PetscInt   nInput;  
  PetscReal *points;  
  PetscInt  *cells;   
  PetscInt   n;       
  Vec        coords;  
  PetscInt   dof;     
};
typedef struct _DMInterpolationInfo *DMInterpolationInfo;

extern __attribute__((visibility("default"))) PetscErrorCode DMInterpolationCreate(MPI_Comm, DMInterpolationInfo *);
extern __attribute__((visibility("default"))) PetscErrorCode DMInterpolationSetDim(DMInterpolationInfo, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMInterpolationGetDim(DMInterpolationInfo, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMInterpolationSetDof(DMInterpolationInfo, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMInterpolationGetDof(DMInterpolationInfo, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMInterpolationAddPoints(DMInterpolationInfo, PetscInt, PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMInterpolationSetUp(DMInterpolationInfo, DM, PetscBool, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode DMInterpolationGetCoordinates(DMInterpolationInfo, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMInterpolationGetVector(DMInterpolationInfo, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMInterpolationRestoreVector(DMInterpolationInfo, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMInterpolationEvaluate(DMInterpolationInfo, DM, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMInterpolationDestroy(DMInterpolationInfo *);

extern __attribute__((visibility("default"))) PetscErrorCode DMCreateLabel(DM, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetLabelValue(DM, const char[], PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetLabelValue(DM, const char[], PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMClearLabelValue(DM, const char[], PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetLabelSize(DM, const char[], PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetLabelIdIS(DM, const char[], IS *);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetStratumSize(DM, const char[], PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetStratumIS(DM, const char[], PetscInt, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetStratumIS(DM, const char[], PetscInt, IS);
extern __attribute__((visibility("default"))) PetscErrorCode DMClearLabelStratum(DM, const char[], PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetLabelOutput(DM, const char[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetLabelOutput(DM, const char[], PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetFirstLabeledPoint(DM, DM, DMLabel, PetscInt, const PetscInt *, PetscInt, PetscInt *, PetscDS *);










 
typedef enum {
  DM_COPY_LABELS_REPLACE,
  DM_COPY_LABELS_KEEP,
  DM_COPY_LABELS_FAIL
} DMCopyLabelsMode;
extern __attribute__((visibility("default"))) const char *const DMCopyLabelsModes[];

extern __attribute__((visibility("default"))) PetscErrorCode DMGetNumLabels(DM, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetLabelName(DM, PetscInt, const char **);
extern __attribute__((visibility("default"))) PetscErrorCode DMHasLabel(DM, const char[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetLabel(DM, const char *, DMLabel *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetLabel(DM, DMLabel);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetLabelByNum(DM, PetscInt, DMLabel *);
extern __attribute__((visibility("default"))) PetscErrorCode DMAddLabel(DM, DMLabel);
extern __attribute__((visibility("default"))) PetscErrorCode DMRemoveLabel(DM, const char[], DMLabel *);
extern __attribute__((visibility("default"))) PetscErrorCode DMRemoveLabelBySelf(DM, DMLabel *, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode DMCopyLabels(DM, DM, PetscCopyMode, PetscBool, DMCopyLabelsMode emode);
extern __attribute__((visibility("default"))) PetscErrorCode DMCompareLabels(DM, DM, PetscBool *, char **);

extern __attribute__((visibility("default"))) PetscErrorCode DMAddBoundary(DM, DMBoundaryConditionType, const char[], DMLabel, PetscInt, const PetscInt[], PetscInt, PetscInt, const PetscInt[], void (*)(void), void (*)(void), void *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMIsBoundaryPoint(DM, PetscInt, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode DMProjectFunction(DM, PetscReal, PetscErrorCode (**)(PetscInt, PetscReal, const PetscReal[], PetscInt, PetscScalar *, void *), void **, InsertMode, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMProjectFunctionLocal(DM, PetscReal, PetscErrorCode (**)(PetscInt, PetscReal, const PetscReal[], PetscInt, PetscScalar *, void *), void **, InsertMode, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMProjectFunctionLabel(DM, PetscReal, DMLabel, PetscInt, const PetscInt[], PetscInt, const PetscInt[], PetscErrorCode (**)(PetscInt, PetscReal, const PetscReal[], PetscInt, PetscScalar *, void *), void **, InsertMode, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMProjectFunctionLabelLocal(DM, PetscReal, DMLabel, PetscInt, const PetscInt[], PetscInt, const PetscInt[], PetscErrorCode (**)(PetscInt, PetscReal, const PetscReal[], PetscInt, PetscScalar *, void *), void **, InsertMode, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMProjectFieldLocal(DM, PetscReal, Vec, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), InsertMode, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMProjectFieldLabel(DM, PetscReal, DMLabel, PetscInt, const PetscInt[], PetscInt, const PetscInt[], Vec, void (**funcs)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), InsertMode, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMProjectFieldLabelLocal(DM, PetscReal, DMLabel, PetscInt, const PetscInt[], PetscInt, const PetscInt[], Vec, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), InsertMode, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMProjectBdFieldLabelLocal(DM, PetscReal, DMLabel, PetscInt, const PetscInt[], PetscInt, const PetscInt[], Vec, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), InsertMode, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMComputeL2Diff(DM, PetscReal, PetscErrorCode (**)(PetscInt, PetscReal, const PetscReal[], PetscInt, PetscScalar *, void *), void **, Vec, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode DMComputeL2GradientDiff(DM, PetscReal, PetscErrorCode (**)(PetscInt, PetscReal, const PetscReal[], const PetscReal[], PetscInt, PetscScalar *, void *), void **, Vec, const PetscReal[], PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode DMComputeL2FieldDiff(DM, PetscReal, PetscErrorCode (**)(PetscInt, PetscReal, const PetscReal[], PetscInt, PetscScalar *, void *), void **, Vec, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode DMComputeError(DM, Vec, PetscReal[], Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMHasBasisTransform(DM, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMCopyTransform(DM, DM);

extern __attribute__((visibility("default"))) PetscErrorCode DMGetCompatibility(DM, DM, PetscBool *, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode DMMonitorSet(DM, PetscErrorCode (*)(DM, void *), void *, PetscErrorCode (*)(void **));
extern __attribute__((visibility("default"))) PetscErrorCode DMMonitorCancel(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMMonitorSetFromOptions(DM, const char[], const char[], const char[], PetscErrorCode (*)(DM, void *), PetscErrorCode (*)(DM, PetscViewerAndFormat *), PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMMonitor(DM);

static inline PetscInt DMPolytopeTypeGetDim(DMPolytopeType ct)
{
  switch (ct) {
  case DM_POLYTOPE_POINT:
    return 0;
  case DM_POLYTOPE_SEGMENT:
  case DM_POLYTOPE_POINT_PRISM_TENSOR:
    return 1;
  case DM_POLYTOPE_TRIANGLE:
  case DM_POLYTOPE_QUADRILATERAL:
  case DM_POLYTOPE_SEG_PRISM_TENSOR:
    return 2;
  case DM_POLYTOPE_TETRAHEDRON:
  case DM_POLYTOPE_HEXAHEDRON:
  case DM_POLYTOPE_TRI_PRISM:
  case DM_POLYTOPE_TRI_PRISM_TENSOR:
  case DM_POLYTOPE_QUAD_PRISM_TENSOR:
  case DM_POLYTOPE_PYRAMID:
    return 3;
  default:
    return -1;
  }
}

static inline PetscInt DMPolytopeTypeGetConeSize(DMPolytopeType ct)
{
  switch (ct) {
  case DM_POLYTOPE_POINT:
    return 0;
  case DM_POLYTOPE_SEGMENT:
    return 2;
  case DM_POLYTOPE_POINT_PRISM_TENSOR:
    return 2;
  case DM_POLYTOPE_TRIANGLE:
    return 3;
  case DM_POLYTOPE_QUADRILATERAL:
    return 4;
  case DM_POLYTOPE_SEG_PRISM_TENSOR:
    return 4;
  case DM_POLYTOPE_TETRAHEDRON:
    return 4;
  case DM_POLYTOPE_HEXAHEDRON:
    return 6;
  case DM_POLYTOPE_TRI_PRISM:
    return 5;
  case DM_POLYTOPE_TRI_PRISM_TENSOR:
    return 5;
  case DM_POLYTOPE_QUAD_PRISM_TENSOR:
    return 6;
  case DM_POLYTOPE_PYRAMID:
    return 5;
  default:
    return -1;
  }
}

static inline PetscInt DMPolytopeTypeGetNumVertices(DMPolytopeType ct)
{
  switch (ct) {
  case DM_POLYTOPE_POINT:
    return 1;
  case DM_POLYTOPE_SEGMENT:
    return 2;
  case DM_POLYTOPE_POINT_PRISM_TENSOR:
    return 2;
  case DM_POLYTOPE_TRIANGLE:
    return 3;
  case DM_POLYTOPE_QUADRILATERAL:
    return 4;
  case DM_POLYTOPE_SEG_PRISM_TENSOR:
    return 4;
  case DM_POLYTOPE_TETRAHEDRON:
    return 4;
  case DM_POLYTOPE_HEXAHEDRON:
    return 8;
  case DM_POLYTOPE_TRI_PRISM:
    return 6;
  case DM_POLYTOPE_TRI_PRISM_TENSOR:
    return 6;
  case DM_POLYTOPE_QUAD_PRISM_TENSOR:
    return 8;
  case DM_POLYTOPE_PYRAMID:
    return 5;
  default:
    return -1;
  }
}

static inline DMPolytopeType DMPolytopeTypeSimpleShape(PetscInt dim, PetscBool simplex)
{
  return dim == 0 ? DM_POLYTOPE_POINT : (dim == 1 ? DM_POLYTOPE_SEGMENT : (dim == 2 ? (simplex ? DM_POLYTOPE_TRIANGLE : DM_POLYTOPE_QUADRILATERAL) : (dim == 3 ? (simplex ? DM_POLYTOPE_TETRAHEDRON : DM_POLYTOPE_HEXAHEDRON) : DM_POLYTOPE_UNKNOWN)));
}

static inline PetscInt DMPolytopeTypeGetNumArrangments(DMPolytopeType ct)
{
  switch (ct) {
  case DM_POLYTOPE_POINT:
    return 1;
  case DM_POLYTOPE_SEGMENT:
    return 2;
  case DM_POLYTOPE_POINT_PRISM_TENSOR:
    return 2;
  case DM_POLYTOPE_TRIANGLE:
    return 6;
  case DM_POLYTOPE_QUADRILATERAL:
    return 8;
  case DM_POLYTOPE_SEG_PRISM_TENSOR:
    return 4;
  case DM_POLYTOPE_TETRAHEDRON:
    return 24;
  case DM_POLYTOPE_HEXAHEDRON:
    return 48;
  case DM_POLYTOPE_TRI_PRISM:
    return 12;
  case DM_POLYTOPE_TRI_PRISM_TENSOR:
    return 12;
  case DM_POLYTOPE_QUAD_PRISM_TENSOR:
    return 16;
  case DM_POLYTOPE_PYRAMID:
    return 8;
  default:
    return -1;
  }
}

 
static inline const PetscInt *DMPolytopeTypeGetArrangment(DMPolytopeType ct, PetscInt o)
{
  static const PetscInt pntArr[1 * 2] = {0, 0};
   
  static const PetscInt segArr[2 * 2 * 2] = {1, 0, 0, 0,  
                                             0, 0, 1, 0,
                                              };
  
 
  static const PetscInt triArr[6 * 3 * 2] = {0, -1, 2, -1, 1, -1,  
                                             2, -1, 1, -1, 0, -1,  
                                             1, -1, 0, -1, 2, -1,  
                                             0, 0,  1, 0,  2, 0,   
                                             1, 0,  2, 0,  0, 0,   
                                             2, 0,  0, 0,  1, 0,
                                              };
  
 
  static const PetscInt quadArr[8 * 4 * 2] = {1, -1, 0, -1, 3, -1, 2, -1,  
                                              0, -1, 3, -1, 2, -1, 1, -1,  
                                              3, -1, 2, -1, 1, -1, 0, -1,  
                                              2, -1, 1, -1, 0, -1, 3, -1,  
                                              0, 0,  1, 0,  2, 0,  3, 0,   
                                              1, 0,  2, 0,  3, 0,  0, 0,   
                                              2, 0,  3, 0,  0, 0,  1, 0,   
                                              3, 0,  0, 0,  1, 0,  2, 0,
                                               };
  
 
  static const PetscInt tsegArr[4 * 4 * 2] = {1, -1, 0, -1, 3, -1, 2, -1,  
                                              0, -1, 1, -1, 3, 0,  2, 0,   
                                              0, 0,  1, 0,  2, 0,  3, 0,   
                                              1, 0,  0, 0,  2, -1, 3, -1,
                                               };
   
  static const PetscInt tetArr[24 * 4 * 2] = {3, -2, 2, -3, 0, -1, 1, -1,  
                                              3, -1, 1, -3, 2, -1, 0, -1,  
                                              3, -3, 0, -3, 1, -1, 2, -1,  
                                              2, -1, 3, -1, 1, -3, 0, -2,  
                                              2, -3, 0, -1, 3, -2, 1, -3,  
                                              2, -2, 1, -2, 0, -2, 3, -2,  
                                              1, -2, 0, -2, 2, -2, 3, -1,  
                                              1, -1, 3, -3, 0, -3, 2, -2,  
                                              1, -3, 2, -1, 3, -1, 0, -3,  
                                              0, -3, 1, -1, 3, -3, 2, -3,  
                                              0, -2, 2, -2, 1, -2, 3, -3,  
                                              0, -1, 3, -2, 2, -3, 1, -2,  
                                              0, 0,  1, 0,  2, 0,  3, 0,   
                                              0, 1,  3, 1,  1, 2,  2, 0,   
                                              0, 2,  2, 1,  3, 0,  1, 2,   
                                              1, 2,  0, 1,  3, 1,  2, 2,   
                                              1, 0,  2, 0,  0, 0,  3, 1,   
                                              1, 1,  3, 2,  2, 2,  0, 0,   
                                              2, 1,  3, 0,  0, 2,  1, 0,   
                                              2, 2,  1, 1,  3, 2,  0, 2,   
                                              2, 0,  0, 0,  1, 0,  3, 2,   
                                              3, 2,  2, 2,  1, 1,  0, 1,   
                                              3, 0,  0, 2,  2, 1,  1, 1,   
                                              3, 1,  1, 2,  0, 1,  2, 1  };
   
  static const PetscInt hexArr[48 * 6 * 2] = {
    2, -3, 3, -2, 4, -2, 5, -3, 1, -3, 0, -1,  
    4, -2, 5, -2, 0, -1, 1, -4, 3, -2, 2, -3,  
    5, -3, 4, -1, 1, -2, 0, -3, 3, -4, 2, -1,  
    3, -1, 2, -4, 4, -4, 5, -1, 0, -4, 1, -4,  
    3, -3, 2, -2, 5, -1, 4, -4, 1, -1, 0, -3,  
    4, -4, 5, -4, 1, -4, 0, -1, 2, -4, 3, -1,  
    2, -1, 3, -4, 5, -3, 4, -2, 0, -2, 1, -2,  
    5, -1, 4, -3, 0, -3, 1, -2, 2, -2, 3, -3,  
    4, -3, 5, -1, 3, -2, 2, -4, 1, -4, 0, -4,  
    5, -4, 4, -4, 3, -4, 2, -2, 0, -3, 1, -1,  
    3, -4, 2, -1, 1, -1, 0, -4, 4, -4, 5, -4,  
    2, -2, 3, -3, 0, -2, 1, -3, 4, -2, 5, -2,  
    1, -3, 0, -1, 4, -1, 5, -4, 3, -1, 2, -4,  
    1, -1, 0, -3, 5, -4, 4, -1, 2, -1, 3, -4,  
    5, -2, 4, -2, 2, -2, 3, -4, 1, -2, 0, -2,  
    1, -2, 0, -2, 2, -1, 3, -1, 4, -1, 5, -3,  
    4, -1, 5, -3, 2, -4, 3, -2, 0, -1, 1, -3,  
    3, -2, 2, -3, 0, -4, 1, -1, 5, -1, 4, -3,  
    1, -4, 0, -4, 3, -1, 2, -1, 5, -4, 4, -4,  
    2, -4, 3, -1, 1, -3, 0, -2, 5, -3, 4, -1,  
    0, -4, 1, -4, 4, -3, 5, -2, 2, -3, 3, -2,  
    0, -3, 1, -1, 3, -3, 2, -3, 4, -3, 5, -1,  
    0, -2, 1, -2, 5, -2, 4, -3, 3, -3, 2, -2,  
    0, -1, 1, -3, 2, -3, 3, -3, 5, -2, 4, -2,  
    0, 0,  1, 0,  2, 0,  3, 0,  4, 0,  5, 0,   
    0, 1,  1, 3,  5, 3,  4, 0,  2, 0,  3, 1,   
    0, 2,  1, 2,  3, 0,  2, 0,  5, 3,  4, 1,   
    0, 3,  1, 1,  4, 0,  5, 3,  3, 0,  2, 1,   
    2, 3,  3, 2,  1, 0,  0, 3,  4, 3,  5, 1,   
    1, 3,  0, 1,  3, 2,  2, 2,  4, 2,  5, 2,   
    3, 1,  2, 0,  0, 1,  1, 2,  4, 1,  5, 3,   
    4, 0,  5, 0,  2, 1,  3, 3,  1, 1,  0, 3,   
    1, 1,  0, 3,  2, 2,  3, 2,  5, 1,  4, 3,   
    5, 1,  4, 3,  2, 3,  3, 1,  0, 0,  1, 0,   
    1, 0,  0, 0,  5, 1,  4, 2,  3, 2,  2, 3,   
    1, 2,  0, 2,  4, 2,  5, 1,  2, 2,  3, 3,   
    2, 1,  3, 0,  0, 3,  1, 0,  5, 0,  4, 0,   
    3, 3,  2, 2,  1, 2,  0, 1,  5, 2,  4, 2,   
    5, 3,  4, 1,  3, 1,  2, 3,  1, 3,  0, 1,   
    4, 2,  5, 2,  3, 3,  2, 1,  0, 2,  1, 2,   
    5, 0,  4, 0,  0, 0,  1, 3,  3, 1,  2, 0,   
    2, 0,  3, 1,  5, 0,  4, 3,  1, 0,  0, 0,   
    4, 3,  5, 1,  1, 1,  0, 2,  3, 3,  2, 2,   
    3, 2,  2, 3,  5, 2,  4, 1,  0, 1,  1, 3,   
    3, 0,  2, 1,  4, 1,  5, 2,  1, 2,  0, 2,   
    5, 2,  4, 2,  1, 3,  0, 0,  2, 3,  3, 2,   
    4, 1,  5, 3,  0, 2,  1, 1,  2, 1,  3, 0,   
    2, 2,  3, 3,  4, 3,  5, 0,  0, 3,  1, 1,   
  };
  static const PetscInt tripArr[12 * 5 * 2] = {
    1, -3, 0, -1, 3, -1, 4, -1, 2, -1,  
    1, -1, 0, -3, 4, -1, 2, -1, 3, -1,  
    1, -2, 0, -2, 2, -1, 3, -1, 4, -1,  
    0, -3, 1, -1, 3, -3, 2, -3, 4, -3,  
    0, -2, 1, -2, 4, -3, 3, -3, 2, -3,  
    0, -1, 1, -3, 2, -3, 4, -3, 3, -3,  
    0, 0,  1, 0,  2, 0,  3, 0,  4, 0,   
    0, 1,  1, 2,  4, 0,  2, 0,  3, 0,   
    0, 2,  1, 1,  3, 0,  4, 0,  2, 0,   
    1, 1,  0, 2,  2, 2,  4, 2,  3, 2,   
    1, 0,  0, 0,  4, 2,  3, 2,  2, 2,   
    1, 2,  0, 1,  3, 2,  2, 2,  4, 2,   
  };
  

 
  static const PetscInt ttriArr[12 * 5 * 2] = {
    1, -3, 0, -3, 2, -2, 4, -2, 3, -2,  
    1, -2, 0, -2, 4, -2, 3, -2, 2, -2,  
    1, -1, 0, -1, 3, -2, 2, -2, 4, -2,  
    0, -3, 1, -3, 2, -1, 4, -1, 3, -1,  
    0, -2, 1, -2, 4, -1, 3, -1, 2, -1,  
    0, -1, 1, -1, 3, -1, 2, -1, 4, -1,  
    0, 0,  1, 0,  2, 0,  3, 0,  4, 0,   
    0, 1,  1, 1,  3, 0,  4, 0,  2, 0,   
    0, 2,  1, 2,  4, 0,  2, 0,  3, 0,   
    1, 0,  0, 0,  2, 1,  3, 1,  4, 1,   
    1, 1,  0, 1,  3, 1,  4, 1,  2, 1,   
    1, 2,  0, 2,  4, 1,  2, 1,  3, 1,   
  };
  

 
  static const PetscInt tquadArr[16 * 6 * 2] = {
    1, -4, 0, -4, 3, -2, 2, -2, 5, -2, 4, -2,  
    1, -3, 0, -3, 2, -2, 5, -2, 4, -2, 3, -2,  
    1, -2, 0, -2, 5, -2, 4, -2, 3, -2, 2, -2,  
    1, -1, 0, -1, 4, -2, 3, -2, 2, -2, 5, -2,  
    0, -4, 1, -4, 3, -1, 2, -1, 5, -1, 4, -1,  
    0, -3, 1, -3, 2, -1, 5, -1, 4, -1, 3, -1,  
    0, -2, 1, -2, 5, -1, 4, -1, 3, -1, 2, -1,  
    0, -1, 1, -1, 4, -1, 3, -1, 2, -1, 5, -1,  
    0, 0,  1, 0,  2, 0,  3, 0,  4, 0,  5, 0,   
    0, 1,  1, 1,  3, 0,  4, 0,  5, 0,  2, 0,   
    0, 2,  1, 2,  4, 0,  5, 0,  2, 0,  3, 0,   
    0, 3,  1, 3,  5, 0,  2, 0,  3, 0,  4, 0,   
    1, 0,  0, 0,  2, 1,  3, 1,  4, 1,  5, 1,   
    1, 1,  0, 1,  3, 1,  4, 1,  5, 1,  2, 1,   
    1, 2,  0, 2,  4, 1,  5, 1,  2, 1,  3, 1,   
    1, 3,  0, 3,  5, 1,  2, 1,  3, 1,  4, 1,   
  };
  static const PetscInt pyrArr[8 * 5 * 2] = {
    0, -4, 2, -3, 1, -3, 4, -3, 3, -3,  
    0, -3, 3, -3, 2, -3, 1, -3, 4, -3,  
    0, -2, 4, -3, 3, -3, 2, -3, 1, -3,  
    0, -1, 1, -3, 4, -3, 3, -3, 2, -3,  
    0, 0,  1, 0,  2, 0,  3, 0,  4, 0,   
    0, 1,  4, 0,  1, 0,  2, 0,  3, 0,   
    0, 2,  3, 0,  4, 0,  1, 0,  2, 0,   
    0, 3,  2, 0,  3, 0,  4, 0,  1, 0,   
  };
  switch (ct) {
  case DM_POLYTOPE_POINT:
    return pntArr;
  case DM_POLYTOPE_SEGMENT:
    return &segArr[(o + 1) * 2 * 2];
  case DM_POLYTOPE_POINT_PRISM_TENSOR:
    return &segArr[(o + 1) * 2 * 2];
  case DM_POLYTOPE_TRIANGLE:
    return &triArr[(o + 3) * 3 * 2];
  case DM_POLYTOPE_QUADRILATERAL:
    return &quadArr[(o + 4) * 4 * 2];
  case DM_POLYTOPE_SEG_PRISM_TENSOR:
    return &tsegArr[(o + 2) * 4 * 2];
  case DM_POLYTOPE_TETRAHEDRON:
    return &tetArr[(o + 12) * 4 * 2];
  case DM_POLYTOPE_HEXAHEDRON:
    return &hexArr[(o + 24) * 6 * 2];
  case DM_POLYTOPE_TRI_PRISM:
    return &tripArr[(o + 6) * 5 * 2];
  case DM_POLYTOPE_TRI_PRISM_TENSOR:
    return &ttriArr[(o + 6) * 5 * 2];
  case DM_POLYTOPE_QUAD_PRISM_TENSOR:
    return &tquadArr[(o + 8) * 6 * 2];
  case DM_POLYTOPE_PYRAMID:
    return &pyrArr[(o + 4) * 5 * 2];
  default:
    return ((void*)0);
  }
}

 
static inline const PetscInt *DMPolytopeTypeGetVertexArrangment(DMPolytopeType ct, PetscInt o)
{
  static const PetscInt pntVerts[1]      = {0};
  static const PetscInt segVerts[2 * 2]  = {1, 0, 0, 1};
  static const PetscInt triVerts[6 * 3]  = {1, 0, 2, 0, 2, 1, 2, 1, 0, 0, 1, 2, 1, 2, 0, 2, 0, 1};
  static const PetscInt quadVerts[8 * 4] = {2, 1, 0, 3, 1, 0, 3, 2, 0, 3, 2, 1, 3, 2, 1, 0, 0, 1, 2, 3, 1, 2, 3, 0, 2, 3, 0, 1, 3, 0, 1, 2};
  static const PetscInt tsegVerts[4 * 4] = {3, 2, 1, 0, 1, 0, 3, 2, 0, 1, 2, 3, 2, 3, 0, 1};
  static const PetscInt tetVerts[24 * 4] = {2, 3, 1, 0,  
                                            3, 1, 2, 0,  
                                            1, 2, 3, 0,  
                                            3, 2, 0, 1,  
                                            2, 0, 3, 1,  
                                            0, 3, 2, 1,  
                                            0, 1, 3, 2,  
                                            1, 3, 0, 2,  
                                            3, 0, 1, 2,  
                                            1, 0, 2, 3,  
                                            0, 2, 1, 3,  
                                            2, 1, 0, 3,  
                                            0, 1, 2, 3,  
                                            1, 2, 0, 3,  
                                            2, 0, 1, 3,  
                                            1, 0, 3, 2,  
                                            0, 3, 1, 2,  
                                            3, 1, 0, 2,  
                                            2, 3, 0, 1,  
                                            3, 0, 2, 1,  
                                            0, 2, 3, 1,  
                                            3, 2, 1, 0,  
                                            2, 1, 3, 0,  
                                            1, 3, 2, 0  };
  static const PetscInt hexVerts[48 * 8] = {
    3, 0, 4, 5, 2, 6, 7, 1,  
    3, 5, 6, 2, 0, 1, 7, 4,  
    4, 0, 1, 7, 5, 6, 2, 3,  
    6, 7, 1, 2, 5, 3, 0, 4,  
    1, 2, 6, 7, 0, 4, 5, 3,  
    6, 2, 3, 5, 7, 4, 0, 1,  
    4, 5, 3, 0, 7, 1, 2, 6,  
    1, 7, 4, 0, 2, 3, 5, 6,  
    2, 3, 5, 6, 1, 7, 4, 0,  
    7, 4, 0, 1, 6, 2, 3, 5,  
    7, 1, 2, 6, 4, 5, 3, 0,  
    0, 4, 5, 3, 1, 2, 6, 7,  
    5, 4, 7, 6, 3, 2, 1, 0,  
    7, 6, 5, 4, 1, 0, 3, 2,  
    0, 1, 7, 4, 3, 5, 6, 2,  
    4, 7, 6, 5, 0, 3, 2, 1,  
    5, 6, 2, 3, 4, 0, 1, 7,  
    2, 6, 7, 1, 3, 0, 4, 5,  
    6, 5, 4, 7, 2, 1, 0, 3,  
    5, 3, 0, 4, 6, 7, 1, 2,  
    2, 1, 0, 3, 6, 5, 4, 7,  
    1, 0, 3, 2, 7, 6, 5, 4,  
    0, 3, 2, 1, 4, 7, 6, 5,  
    3, 2, 1, 0, 5, 4, 7, 6,  
    0, 1, 2, 3, 4, 5, 6, 7,  
    1, 2, 3, 0, 7, 4, 5, 6,  
    2, 3, 0, 1, 6, 7, 4, 5,  
    3, 0, 1, 2, 5, 6, 7, 4,  
    4, 0, 3, 5, 7, 6, 2, 1,  
    7, 4, 5, 6, 1, 2, 3, 0,  
    1, 7, 6, 2, 0, 3, 5, 4,  
    3, 2, 6, 5, 0, 4, 7, 1,  
    5, 6, 7, 4, 3, 0, 1, 2,  
    4, 7, 1, 0, 5, 3, 2, 6,  
    4, 5, 6, 7, 0, 1, 2, 3,  
    6, 7, 4, 5, 2, 3, 0, 1,  
    3, 5, 4, 0, 2, 1, 7, 6,  
    6, 2, 1, 7, 5, 4, 0, 3,  
    1, 0, 4, 7, 2, 6, 5, 3,  
    6, 5, 3, 2, 7, 1, 0, 4,  
    0, 4, 7, 1, 3, 2, 6, 5,  
    0, 3, 5, 4, 1, 7, 6, 2,  
    5, 3, 2, 6, 4, 7, 1, 0,  
    7, 6, 2, 1, 4, 0, 3, 5,  
    2, 1, 7, 6, 3, 5, 4, 0,  
    7, 1, 0, 4, 6, 5, 3, 2,  
    2, 6, 5, 3, 1, 0, 4, 7,  
    5, 4, 0, 3, 6, 2, 1, 7,  
  };
  static const PetscInt tripVerts[12 * 6] = {
    4, 3, 5, 2, 1, 0,  
    5, 4, 3, 1, 0, 2,  
    3, 5, 4, 0, 2, 1,  
    1, 0, 2, 5, 4, 3,  
    0, 2, 1, 3, 5, 4,  
    2, 1, 0, 4, 3, 5,  
    0, 1, 2, 3, 4, 5,  
    1, 2, 0, 5, 3, 4,  
    2, 0, 1, 4, 5, 3,  
    4, 5, 3, 2, 0, 1,  
    3, 4, 5, 0, 1, 2,  
    5, 3, 4, 1, 2, 0,  
  };
  static const PetscInt ttriVerts[12 * 6] = {
    4, 3, 5, 1, 0, 2,  
    3, 5, 4, 0, 2, 1,  
    5, 4, 3, 2, 1, 0,  
    1, 0, 2, 4, 3, 5,  
    0, 2, 1, 3, 5, 4,  
    2, 1, 0, 5, 4, 3,  
    0, 1, 2, 3, 4, 5,  
    1, 2, 0, 4, 5, 3,  
    2, 0, 1, 5, 3, 4,  
    3, 4, 5, 0, 1, 2,  
    4, 5, 3, 1, 2, 0,  
    5, 3, 4, 2, 0, 1,  
  };
  

 
  static const PetscInt tquadVerts[16 * 8] = {
    6, 5, 4, 7, 2, 1, 0, 3,  
    5, 4, 7, 6, 1, 0, 3, 2,  
    4, 7, 6, 5, 0, 3, 2, 1,  
    7, 6, 5, 4, 3, 2, 1, 0,  
    2, 1, 0, 3, 6, 5, 4, 7,  
    1, 0, 3, 2, 5, 4, 7, 6,  
    0, 3, 2, 1, 4, 7, 6, 5,  
    3, 2, 1, 0, 7, 6, 5, 4,  
    0, 1, 2, 3, 4, 5, 6, 7,  
    1, 2, 3, 0, 5, 6, 7, 4,  
    2, 3, 0, 1, 6, 7, 4, 5,  
    3, 0, 1, 2, 7, 4, 5, 6,  
    4, 5, 6, 7, 0, 1, 2, 3,  
    5, 6, 7, 4, 1, 2, 3, 0,  
    6, 7, 4, 5, 2, 3, 0, 1,  
    7, 4, 5, 6, 3, 0, 1, 2,  
  };
  static const PetscInt pyrVerts[8 * 5] = {
    2, 1, 0, 3, 4,  
    1, 0, 3, 2, 4,  
    0, 3, 2, 1, 4,  
    3, 2, 1, 0, 4,  
    0, 1, 2, 3, 4,  
    1, 2, 3, 0, 4,  
    2, 3, 0, 1, 4,  
    3, 0, 1, 2, 4,  
  };
  switch (ct) {
  case DM_POLYTOPE_POINT:
    return pntVerts;
  case DM_POLYTOPE_SEGMENT:
    return &segVerts[(o + 1) * 2];
  case DM_POLYTOPE_POINT_PRISM_TENSOR:
    return &segVerts[(o + 1) * 2];
  case DM_POLYTOPE_TRIANGLE:
    return &triVerts[(o + 3) * 3];
  case DM_POLYTOPE_QUADRILATERAL:
    return &quadVerts[(o + 4) * 4];
  case DM_POLYTOPE_SEG_PRISM_TENSOR:
    return &tsegVerts[(o + 2) * 4];
  case DM_POLYTOPE_TETRAHEDRON:
    return &tetVerts[(o + 12) * 4];
  case DM_POLYTOPE_HEXAHEDRON:
    return &hexVerts[(o + 24) * 8];
  case DM_POLYTOPE_TRI_PRISM:
    return &tripVerts[(o + 6) * 6];
  case DM_POLYTOPE_TRI_PRISM_TENSOR:
    return &ttriVerts[(o + 6) * 6];
  case DM_POLYTOPE_QUAD_PRISM_TENSOR:
    return &tquadVerts[(o + 8) * 8];
  case DM_POLYTOPE_PYRAMID:
    return &pyrVerts[(o + 4) * 5];
  default:
    return ((void*)0);
  }
}

 
static inline PetscInt DMPolytopeTypeComposeOrientation(DMPolytopeType ct, PetscInt o1, PetscInt o2)
{
  static const PetscInt segMult[2 * 2]   = {0, -1, -1, 0};
  static const PetscInt triMult[6 * 6]   = {0, 2, 1, -3, -1, -2, 1, 0, 2, -2, -3, -1, 2, 1, 0, -1, -2, -3, -3, -2, -1, 0, 1, 2, -2, -1, -3, 1, 2, 0, -1, -3, -2, 2, 0, 1};
  static const PetscInt quadMult[8 * 8]  = {0,  3,  2,  1,  -4, -1, -2, -3, 1,  0,  3,  2,  -3, -4, -1, -2, 2,  1,  0,  3,  -2, -3, -4, -1, 3,  2,  1,  0,  -1, -2, -3, -4,
                                            -4, -3, -2, -1, 0,  1,  2,  3,  -3, -2, -1, -4, 1,  2,  3,  0,  -2, -1, -4, -3, 2,  3,  0,  1,  -1, -4, -3, -2, 3,  0,  1,  2};
  static const PetscInt tsegMult[4 * 4]  = {0, 1, -2, -1, 1, 0, -1, -2, -2, -1, 0, 1, -1, -2, 1, 0};
  static const PetscInt tetMult[24 * 24] = {
    3,   2,   7,   0,   5,   10,  9,   8,   1,   6,   11,  4,   -12, -7,  -5,  -9,  -10, -2,  -6,  -1,  -11, -3,  -4,  -8,  4,   0,   8,   1,   3,   11,  10,  6,   2,   7,   9,   5,   -11, -9,  -4,  -8,  -12, -1,  -5,  -3,  -10, -2,  -6,  -7,
    5,   1,   6,   2,   4,   9,   11,  7,   0,   8,   10,  3,   -10, -8,  -6,  -7,  -11, -3,  -4,  -2,  -12, -1,  -5,  -9,  0,   8,   4,   3,   11,  1,   6,   2,   10,  9,   5,   7,   -9,  -4,  -11, -12, -1,  -8,  -3,  -10, -5,  -6,  -7,  -2,
    1,   6,   5,   4,   9,   2,   7,   0,   11,  10,  3,   8,   -8,  -6,  -10, -11, -3,  -7,  -2,  -12, -4,  -5,  -9,  -1,  2,   7,   3,   5,   10,  0,   8,   1,   9,   11,  4,   6,   -7,  -5,  -12, -10, -2,  -9,  -1,  -11, -6,  -4,  -8,  -3,
    6,   5,   1,   9,   2,   4,   0,   11,  7,   3,   8,   10,  -6,  -10, -8,  -3,  -7,  -11, -12, -4,  -2,  -9,  -1,  -5,  7,   3,   2,   10,  0,   5,   1,   9,   8,   4,   6,   11,  -5,  -12, -7,  -2,  -9,  -10, -11, -6,  -1,  -8,  -3,  -4,
    8,   4,   0,   11,  1,   3,   2,   10,  6,   5,   7,   9,   -4,  -11, -9,  -1,  -8,  -12, -10, -5,  -3,  -7,  -2,  -6,  9,   11,  10,  6,   8,   7,   3,   5,   4,   0,   2,   1,   -3,  -1,  -2,  -6,  -4,  -5,  -9,  -7,  -8,  -12, -10, -11,
    10,  9,   11,  7,   6,   8,   4,   3,   5,   1,   0,   2,   -2,  -3,  -1,  -5,  -6,  -4,  -8,  -9,  -7,  -11, -12, -10, 11,  10,  9,   8,   7,   6,   5,   4,   3,   2,   1,   0,   -1,  -2,  -3,  -4,  -5,  -6,  -7,  -8,  -9,  -10, -11, -12,
    -12, -11, -10, -9,  -8,  -7,  -6,  -5,  -4,  -3,  -2,  -1,  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  -11, -10, -12, -8,  -7,  -9,  -5,  -4,  -6,  -2,  -1,  -3,  1,   2,   0,   4,   5,   3,   7,   8,   6,   10,  11,  9,
    -10, -12, -11, -7,  -9,  -8,  -4,  -6,  -5,  -1,  -3,  -2,  2,   0,   1,   5,   3,   4,   8,   6,   7,   11,  9,   10,  -9,  -5,  -1,  -12, -2,  -4,  -3,  -11, -7,  -6,  -8,  -10, 3,   10,  8,   0,   7,   11,  9,   4,   2,   6,   1,   5,
    -8,  -4,  -3,  -11, -1,  -6,  -2,  -10, -9,  -5,  -7,  -12, 4,   11,  6,   1,   8,   9,   10,  5,   0,   7,   2,   3,   -7,  -6,  -2,  -10, -3,  -5,  -1,  -12, -8,  -4,  -9,  -11, 5,   9,   7,   2,   6,   10,  11,  3,   1,   8,   0,   4,
    -3,  -8,  -4,  -6,  -11, -1,  -9,  -2,  -10, -12, -5,  -7,  6,   4,   11,  9,   1,   8,   0,   10,  5,   3,   7,   2,   -2,  -7,  -6,  -5,  -10, -3,  -8,  -1,  -12, -11, -4,  -9,  7,   5,   9,   10,  2,   6,   1,   11,  3,   4,   8,   0,
    -1,  -9,  -5,  -4,  -12, -2,  -7,  -3,  -11, -10, -6,  -8,  8,   3,   10,  11,  0,   7,   2,   9,   4,   5,   6,   1,   -6,  -2,  -7,  -3,  -5,  -10, -12, -8,  -1,  -9,  -11, -4,  9,   7,   5,   6,   10,  2,   3,   1,   11,  0,   4,   8,
    -5,  -1,  -9,  -2,  -4,  -12, -11, -7,  -3,  -8,  -10, -6,  10,  8,   3,   7,   11,  0,   4,   2,   9,   1,   5,   6,   -4,  -3,  -8,  -1,  -6,  -11, -10, -9,  -2,  -7,  -12, -5,  11,  6,   4,   8,   9,   1,   5,   0,   10,  2,   3,   7,
  };
  static const PetscInt hexMult[48 * 48] = {
    18,  2,   5,   22,  21,  8,   16,  0,   13,  6,   11,  3,   15,  9,   4,   23,  12,  1,   19,  10,  7,   20,  14,  17,  -24, -10, -20, -16, -12, -21, -4,  -5,  -18, -13, -15, -8,  -2,  -11, -14, -7,  -3,  -22, -6,  -17, -19, -9,  -1,  -23,
    8,   20,  19,  2,   5,   23,  0,   17,  11,  1,   15,  7,   13,  4,   10,  18,  3,   14,  21,  9,   12,  22,  6,   16,  -23, -13, -17, -7,  -8,  -19, -16, -12, -22, -2,  -14, -5,  -10, -15, -11, -4,  -20, -9,  -21, -3,  -6,  -18, -24, -1,
    2,   17,  23,  8,   0,   19,  5,   20,  1,   11,  9,   14,  12,  6,   3,   16,  10,  7,   22,  15,  13,  21,  4,   18,  -22, -14, -19, -5,  -15, -17, -10, -2,  -23, -12, -13, -7,  -16, -8,  -4,  -11, -24, -3,  -18, -9,  -1,  -21, -20, -6,
    21,  5,   2,   16,  18,  0,   22,  8,   4,   12,  3,   11,  14,  7,   13,  20,  6,   10,  17,  1,   9,   23,  15,  19,  -21, -8,  -18, -15, -4,  -24, -12, -14, -20, -7,  -16, -10, -11, -2,  -5,  -13, -6,  -19, -3,  -23, -22, -1,  -9,  -17,
    16,  8,   0,   21,  22,  2,   18,  5,   12,  4,   1,   10,  9,   15,  6,   19,  13,  11,  23,  3,   14,  17,  7,   20,  -20, -16, -24, -10, -2,  -18, -11, -7,  -21, -14, -8,  -15, -12, -4,  -13, -5,  -9,  -23, -1,  -19, -17, -3,  -6,  -22,
    5,   19,  20,  0,   8,   17,  2,   23,  10,  3,   7,   15,  6,   12,  11,  22,  1,   9,   16,  14,  4,   18,  13,  21,  -19, -5,  -22, -14, -16, -23, -8,  -11, -17, -4,  -7,  -13, -15, -10, -12, -2,  -21, -6,  -20, -1,  -9,  -24, -18, -3,
    22,  0,   8,   18,  16,  5,   21,  2,   6,   13,  10,  1,   7,   14,  12,  17,  4,   3,   20,  11,  15,  19,  9,   23,  -18, -15, -21, -8,  -11, -20, -2,  -13, -24, -5,  -10, -16, -4,  -12, -7,  -14, -1,  -17, -9,  -22, -23, -6,  -3,  -19,
    0,   23,  17,  5,   2,   20,  8,   19,  3,   10,  14,  9,   4,   13,  1,   21,  11,  15,  18,  7,   6,   16,  12,  22,  -17, -7,  -23, -13, -10, -22, -15, -4,  -19, -11, -5,  -14, -8,  -16, -2,  -12, -18, -1,  -24, -6,  -3,  -20, -21, -9,
    10,  13,  6,   1,   11,  12,  3,   4,   8,   0,   22,  18,  19,  23,  5,   15,  2,   21,  9,   16,  17,  7,   20,  14,  -16, -24, -10, -20, -23, -8,  -19, -6,  -15, -3,  -21, -18, -22, -17, -9,  -1,  -14, -12, -7,  -4,  -11, -13, -5,  -2,
    1,   4,   12,  10,  3,   6,   11,  13,  0,   8,   16,  21,  17,  20,  2,   14,  5,   18,  7,   22,  19,  9,   23,  15,  -15, -21, -8,  -18, -17, -10, -22, -3,  -16, -6,  -24, -20, -19, -23, -1,  -9,  -5,  -4,  -13, -12, -2,  -7,  -14, -11,
    14,  10,  3,   9,   7,   1,   15,  11,  17,  23,  0,   5,   16,  22,  20,  6,   19,  8,   12,  2,   21,  4,   18,  13,  -14, -19, -5,  -22, -3,  -13, -9,  -20, -7,  -21, -23, -17, -6,  -1,  -24, -18, -12, -16, -2,  -8,  -10, -4,  -11, -15,
    7,   3,   10,  15,  14,  11,  9,   1,   20,  19,  5,   0,   18,  21,  17,  4,   23,  2,   13,  8,   22,  6,   16,  12,  -13, -17, -7,  -23, -9,  -14, -3,  -24, -5,  -18, -22, -19, -1,  -6,  -20, -21, -2,  -10, -12, -15, -16, -11, -4,  -8,
    13,  14,  15,  12,  4,   9,   6,   7,   21,  22,  23,  20,  2,   0,   18,  3,   16,  17,  1,   19,  8,   11,  5,   10,  -12, -9,  -11, -6,  -21, -4,  -24, -22, -2,  -23, -3,  -1,  -20, -18, -19, -17, -16, -14, -15, -13, -5,  -8,  -10, -7,
    6,   9,   7,   4,   12,  14,  13,  15,  16,  18,  17,  19,  0,   2,   22,  1,   21,  23,  3,   20,  5,   10,  8,   11,  -11, -6,  -12, -9,  -20, -2,  -18, -17, -4,  -19, -1,  -3,  -21, -24, -23, -22, -8,  -7,  -10, -5,  -13, -16, -15, -14,
    3,   12,  4,   11,  1,   13,  10,  6,   2,   5,   21,  16,  23,  19,  0,   9,   8,   22,  15,  18,  20,  14,  17,  7,   -10, -20, -16, -24, -22, -15, -17, -1,  -8,  -9,  -18, -21, -23, -19, -3,  -6,  -13, -2,  -5,  -11, -4,  -14, -7,  -12,
    20,  16,  18,  23,  17,  21,  19,  22,  14,  15,  4,   6,   3,   1,   7,   0,   9,   12,  2,   13,  11,  5,   10,  8,   -9,  -11, -6,  -12, -14, -3,  -13, -10, -1,  -8,  -2,  -4,  -7,  -5,  -16, -15, -23, -20, -22, -18, -24, -19, -17, -21,
    11,  6,   13,  3,   10,  4,   1,   12,  5,   2,   18,  22,  20,  17,  8,   7,   0,   16,  14,  21,  23,  15,  19,  9,   -8,  -18, -15, -21, -19, -16, -23, -9,  -10, -1,  -20, -24, -17, -22, -6,  -3,  -7,  -11, -14, -2,  -12, -5,  -13, -4,
    9,   11,  1,   14,  15,  3,   7,   10,  23,  17,  2,   8,   21,  18,  19,  13,  20,  5,   4,   0,   16,  12,  22,  6,   -7,  -23, -13, -17, -1,  -5,  -6,  -21, -14, -20, -19, -22, -9,  -3,  -18, -24, -11, -8,  -4,  -16, -15, -2,  -12, -10,
    19,  21,  22,  17,  23,  16,  20,  18,  9,   7,   12,  13,  1,   3,   15,  2,   14,  4,   0,   6,   10,  8,   11,  5,   -6,  -12, -9,  -11, -7,  -1,  -5,  -15, -3,  -16, -4,  -2,  -14, -13, -8,  -10, -19, -21, -17, -24, -18, -23, -22, -20,
    15,  1,   11,  7,   9,   10,  14,  3,   19,  20,  8,   2,   22,  16,  23,  12,  17,  0,   6,   5,   18,  13,  21,  4,   -5,  -22, -14, -19, -6,  -7,  -1,  -18, -13, -24, -17, -23, -3,  -9,  -21, -20, -4,  -15, -11, -10, -8,  -12, -2,  -16,
    4,   15,  14,  6,   13,  7,   12,  9,   18,  16,  20,  23,  5,   8,   21,  11,  22,  19,  10,  17,  0,   3,   2,   1,   -4,  -1,  -2,  -3,  -24, -12, -21, -19, -11, -17, -6,  -9,  -18, -20, -22, -23, -15, -5,  -16, -7,  -14, -10, -8,  -13,
    17,  18,  16,  19,  20,  22,  23,  21,  7,   9,   6,   4,   10,  11,  14,  5,   15,  13,  8,   12,  1,   0,   3,   2,   -3,  -4,  -1,  -2,  -13, -9,  -14, -16, -6,  -15, -12, -11, -5,  -7,  -10, -8,  -22, -24, -23, -21, -20, -17, -19, -18,
    12,  7,   9,   13,  6,   15,  4,   14,  22,  21,  19,  17,  8,   5,   16,  10,  18,  20,  11,  23,  2,   1,   0,   3,   -2,  -3,  -4,  -1,  -18, -11, -20, -23, -12, -22, -9,  -6,  -24, -21, -17, -19, -10, -13, -8,  -14, -7,  -15, -16, -5,
    23,  22,  21,  20,  19,  18,  17,  16,  15,  14,  13,  12,  11,  10,  9,   8,   7,   6,   5,   4,   3,   2,   1,   0,   -1,  -2,  -3,  -4,  -5,  -6,  -7,  -8,  -9,  -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24,
    -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9,  -8,  -7,  -6,  -5,  -4,  -3,  -2,  -1,  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,
    -13, -8,  -10, -14, -7,  -16, -5,  -15, -23, -22, -20, -18, -9,  -6,  -17, -11, -19, -21, -12, -24, -3,  -2,  -1,  -4,  1,   2,   3,   0,   17,  10,  19,  22,  11,  21,  8,   5,   23,  20,  16,  18,  9,   12,  7,   13,  6,   14,  15,  4,
    -18, -19, -17, -20, -21, -23, -24, -22, -8,  -10, -7,  -5,  -11, -12, -15, -6,  -16, -14, -9,  -13, -2,  -1,  -4,  -3,  2,   3,   0,   1,   12,  8,   13,  15,  5,   14,  11,  10,  4,   6,   9,   7,   21,  23,  22,  20,  19,  16,  18,  17,
    -5,  -16, -15, -7,  -14, -8,  -13, -10, -19, -17, -21, -24, -6,  -9,  -22, -12, -23, -20, -11, -18, -1,  -4,  -3,  -2,  3,   0,   1,   2,   23,  11,  20,  18,  10,  16,  5,   8,   17,  19,  21,  22,  14,  4,   15,  6,   13,  9,   7,   12,
    -16, -2,  -12, -8,  -10, -11, -15, -4,  -20, -21, -9,  -3,  -23, -17, -24, -13, -18, -1,  -7,  -6,  -19, -14, -22, -5,  4,   21,  13,  18,  5,   6,   0,   17,  12,  23,  16,  22,  2,   8,   20,  19,  3,   14,  10,  9,   7,   11,  1,   15,
    -20, -22, -23, -18, -24, -17, -21, -19, -10, -8,  -13, -14, -2,  -4,  -16, -3,  -15, -5,  -1,  -7,  -11, -9,  -12, -6,  5,   11,  8,   10,  6,   0,   4,   14,  2,   15,  3,   1,   13,  12,  7,   9,   18,  20,  16,  23,  17,  22,  21,  19,
    -10, -12, -2,  -15, -16, -4,  -8,  -11, -24, -18, -3,  -9,  -22, -19, -20, -14, -21, -6,  -5,  -1,  -17, -13, -23, -7,  6,   22,  12,  16,  0,   4,   5,   20,  13,  19,  18,  21,  8,   2,   17,  23,  10,  7,   3,   15,  14,  1,   11,  9,
    -12, -7,  -14, -4,  -11, -5,  -2,  -13, -6,  -3,  -19, -23, -21, -18, -9,  -8,  -1,  -17, -15, -22, -24, -16, -20, -10, 7,   17,  14,  20,  18,  15,  22,  8,   9,   0,   19,  23,  16,  21,  5,   2,   6,   10,  13,  1,   11,  4,   12,  3,
    -21, -17, -19, -24, -18, -22, -20, -23, -15, -16, -5,  -7,  -4,  -2,  -8,  -1,  -10, -13, -3,  -14, -12, -6,  -11, -9,  8,   10,  5,   11,  13,  2,   12,  9,   0,   7,   1,   3,   6,   4,   15,  14,  22,  19,  21,  17,  23,  18,  16,  20,
    -4,  -13, -5,  -12, -2,  -14, -11, -7,  -3,  -6,  -22, -17, -24, -20, -1,  -10, -9,  -23, -16, -19, -21, -15, -18, -8,  9,   19,  15,  23,  21,  14,  16,  0,   7,   8,   17,  20,  22,  18,  2,   5,   12,  1,   4,   10,  3,   13,  6,   11,
    -7,  -10, -8,  -5,  -13, -15, -14, -16, -17, -19, -18, -20, -1,  -3,  -23, -2,  -22, -24, -4,  -21, -6,  -11, -9,  -12, 10,  5,   11,  8,   19,  1,   17,  16,  3,   18,  0,   2,   20,  23,  22,  21,  7,   6,   9,   4,   12,  15,  14,  13,
    -14, -15, -16, -13, -5,  -10, -7,  -8,  -22, -23, -24, -21, -3,  -1,  -19, -4,  -17, -18, -2,  -20, -9,  -12, -6,  -11, 11,  8,   10,  5,   20,  3,   23,  21,  1,   22,  2,   0,   19,  17,  18,  16,  15,  13,  14,  12,  4,   7,   9,   6,
    -8,  -4,  -11, -16, -15, -12, -10, -2,  -21, -20, -6,  -1,  -19, -22, -18, -5,  -24, -3,  -14, -9,  -23, -7,  -17, -13, 12,  16,  6,   22,  8,   13,  2,   23,  4,   17,  21,  18,  0,   5,   19,  20,  1,   9,   11,  14,  15,  10,  3,   7,
    -15, -11, -4,  -10, -8,  -2,  -16, -12, -18, -24, -1,  -6,  -17, -23, -21, -7,  -20, -9,  -13, -3,  -22, -5,  -19, -14, 13,  18,  4,   21,  2,   12,  8,   19,  6,   20,  22,  16,  5,   0,   23,  17,  11,  15,  1,   7,   9,   3,   10,  14,
    -2,  -5,  -13, -11, -4,  -7,  -12, -14, -1,  -9,  -17, -22, -18, -21, -3,  -15, -6,  -19, -8,  -23, -20, -10, -24, -16, 14,  20,  7,   17,  16,  9,   21,  2,   15,  5,   23,  19,  18,  22,  0,   8,   4,   3,   12,  11,  1,   6,   13,  10,
    -11, -14, -7,  -2,  -12, -13, -4,  -5,  -9,  -1,  -23, -19, -20, -24, -6,  -16, -3,  -22, -10, -17, -18, -8,  -21, -15, 15,  23,  9,   19,  22,  7,   18,  5,   14,  2,   20,  17,  21,  16,  8,   0,   13,  11,  6,   3,   10,  12,  4,   1,
    -1,  -24, -18, -6,  -3,  -21, -9,  -20, -4,  -11, -15, -10, -5,  -14, -2,  -22, -12, -16, -19, -8,  -7,  -17, -13, -23, 16,  6,   22,  12,  9,   21,  14,  3,   18,  10,  4,   13,  7,   15,  1,   11,  17,  0,   23,  5,   2,   19,  20,  8,
    -23, -1,  -9,  -19, -17, -6,  -22, -3,  -7,  -14, -11, -2,  -8,  -15, -13, -18, -5,  -4,  -21, -12, -16, -20, -10, -24, 17,  14,  20,  7,   10,  19,  1,   12,  23,  4,   9,   15,  3,   11,  6,   13,  0,   16,  8,   21,  22,  5,   2,   18,
    -6,  -20, -21, -1,  -9,  -18, -3,  -24, -11, -4,  -8,  -16, -7,  -13, -12, -23, -2,  -10, -17, -15, -5,  -19, -14, -22, 18,  4,   21,  13,  15,  22,  7,   10,  16,  3,   6,   12,  14,  9,   11,  1,   20,  5,   19,  0,   8,   23,  17,  2,
    -17, -9,  -1,  -22, -23, -3,  -19, -6,  -13, -5,  -2,  -11, -10, -16, -7,  -20, -14, -12, -24, -4,  -15, -18, -8,  -21, 19,  15,  23,  9,   1,   17,  10,  6,   20,  13,  7,   14,  11,  3,   12,  4,   8,   22,  0,   18,  16,  2,   5,   21,
    -22, -6,  -3,  -17, -19, -1,  -23, -9,  -5,  -13, -4,  -12, -15, -8,  -14, -21, -7,  -11, -18, -2,  -10, -24, -16, -20, 20,  7,   17,  14,  3,   23,  11,  13,  19,  6,   15,  9,   10,  1,   4,   12,  5,   18,  2,   22,  21,  0,   8,   16,
    -3,  -18, -24, -9,  -1,  -20, -6,  -21, -2,  -12, -10, -15, -13, -7,  -4,  -17, -11, -8,  -23, -16, -14, -22, -5,  -19, 21,  13,  18,  4,   14,  16,  9,   1,   22,  11,  12,  6,   15,  7,   3,   10,  23,  2,   17,  8,   0,   20,  19,  5,
    -9,  -21, -20, -3,  -6,  -24, -1,  -18, -12, -2,  -16, -8,  -14, -5,  -11, -19, -4,  -15, -22, -10, -13, -23, -7,  -17, 22,  12,  16,  6,   7,   18,  15,  11,  21,  1,   13,  4,   9,   14,  10,  3,   19,  8,   20,  2,   5,   17,  23,  0,
    -19, -3,  -6,  -23, -22, -9,  -17, -1,  -14, -7,  -12, -4,  -16, -10, -5,  -24, -13, -2,  -20, -11, -8,  -21, -15, -18, 23,  9,   19,  15,  11,  20,  3,   4,   17,  12,  14,  7,   1,   10,  13,  6,   2,   21,  5,   16,  18,  8,   0,   22,
  };
  static const PetscInt tripMult[12 * 12] = {
    1,  0,  2,  3,  5,  4,  -6, -4, -5, -2, -3, -1, 0,  2,  1,  4,  3,  5,  -5, -6, -4, -3, -1, -2, 2,  1,  0,  5,  4,  3,  -4, -5, -6, -1, -2, -3, 4,  3,  5,  0,  2,  1,  -3, -1, -2, -5, -6, -4,
    3,  5,  4,  1,  0,  2,  -2, -3, -1, -6, -4, -5, 5,  4,  3,  2,  1,  0,  -1, -2, -3, -4, -5, -6, -6, -5, -4, -3, -2, -1, 0,  1,  2,  3,  4,  5,  -4, -6, -5, -2, -1, -3, 1,  2,  0,  5,  3,  4,
    -5, -4, -6, -1, -3, -2, 2,  0,  1,  4,  5,  3,  -3, -2, -1, -6, -5, -4, 3,  4,  5,  0,  1,  2,  -1, -3, -2, -5, -4, -6, 4,  5,  3,  2,  0,  1,  -2, -1, -3, -4, -6, -5, 5,  3,  4,  1,  2,  0,
  };
  static const PetscInt ttriMult[12 * 12] = {
    0,  2,  1,  3,  5,  4,  -6, -4, -5, -3, -1, -2, 1,  0,  2,  4,  3,  5,  -5, -6, -4, -2, -3, -1, 2,  1,  0,  5,  4,  3,  -4, -5, -6, -1, -2, -3, 3,  5,  4,  0,  2,  1,  -3, -1, -2, -6, -4, -5,
    4,  3,  5,  1,  0,  2,  -2, -3, -1, -5, -6, -4, 5,  4,  3,  2,  1,  0,  -1, -2, -3, -4, -5, -6, -6, -5, -4, -3, -2, -1, 0,  1,  2,  3,  4,  5,  -5, -4, -6, -2, -1, -3, 1,  2,  0,  4,  5,  3,
    -4, -6, -5, -1, -3, -2, 2,  0,  1,  5,  3,  4,  -3, -2, -1, -6, -5, -4, 3,  4,  5,  0,  1,  2,  -2, -1, -3, -5, -4, -6, 4,  5,  3,  1,  2,  0,  -1, -3, -2, -4, -6, -5, 5,  3,  4,  2,  0,  1,
  };
  static const PetscInt tquadMult[16 * 16] = {
    0,  3,  2,  1,  4,  7,  6,  5,  -8, -5, -6, -7, -4, -1, -2, -3, 1,  0,  3,  2,  5,  4,  7,  6,  -7, -8, -5, -6, -3, -4, -1, -2, 2,  1,  0,  3,  6,  5,  4,  7,  -6, -7, -8, -5, -2, -3, -4, -1, 3, 2, 1, 0,
    7,  6,  5,  4,  -5, -6, -7, -8, -1, -2, -3, -4, 4,  7,  6,  5,  0,  3,  2,  1,  -4, -1, -2, -3, -8, -5, -6, -7, 5,  4,  7,  6,  1,  0,  3,  2,  -3, -4, -1, -2, -7, -8, -5, -6, 6,  5,  4,  7,  2, 1, 0, 3,
    -2, -3, -4, -1, -6, -7, -8, -5, 7,  6,  5,  4,  3,  2,  1,  0,  -1, -2, -3, -4, -5, -6, -7, -8, -8, -7, -6, -5, -4, -3, -2, -1, 0,  1,  2,  3,  4,  5,  6,  7,  -7, -6, -5, -8, -3, -2, -1, -4, 1, 2, 3, 0,
    5,  6,  7,  4,  -6, -5, -8, -7, -2, -1, -4, -3, 2,  3,  0,  1,  6,  7,  4,  5,  -5, -8, -7, -6, -1, -4, -3, -2, 3,  0,  1,  2,  7,  4,  5,  6,  -4, -3, -2, -1, -8, -7, -6, -5, 4,  5,  6,  7,  0, 1, 2, 3,
    -3, -2, -1, -4, -7, -6, -5, -8, 5,  6,  7,  4,  1,  2,  3,  0,  -2, -1, -4, -3, -6, -5, -8, -7, 6,  7,  4,  5,  2,  3,  0,  1,  -1, -4, -3, -2, -5, -8, -7, -6, 7,  4,  5,  6,  3,  0,  1,  2,
  };
  static const PetscInt pyrMult[8 * 8] = {
    0, 3, 2, 1, -4, -1, -2, -3, 1, 0, 3, 2, -3, -4, -1, -2, 2, 1, 0, 3, -2, -3, -4, -1, 3, 2, 1, 0, -1, -2, -3, -4, -4, -3, -2, -1, 0, 1, 2, 3, -3, -2, -1, -4, 1, 2, 3, 0, -2, -1, -4, -3, 2, 3, 0, 1, -1, -4, -3, -2, 3, 0, 1, 2,
  };
  switch (ct) {
  case DM_POLYTOPE_POINT:
    return 0;
  case DM_POLYTOPE_SEGMENT:
  case DM_POLYTOPE_POINT_PRISM_TENSOR:
    return segMult[(o1 + 1) * 2 + o2 + 1];
  case DM_POLYTOPE_TRIANGLE:
    return triMult[(o1 + 3) * 6 + o2 + 3];
  case DM_POLYTOPE_QUADRILATERAL:
    return quadMult[(o1 + 4) * 8 + o2 + 4];
  case DM_POLYTOPE_SEG_PRISM_TENSOR:
    return tsegMult[(o1 + 2) * 4 + o2 + 2];
  case DM_POLYTOPE_TETRAHEDRON:
    return tetMult[(o1 + 12) * 24 + o2 + 12];
  case DM_POLYTOPE_HEXAHEDRON:
    return hexMult[(o1 + 24) * 48 + o2 + 24];
  case DM_POLYTOPE_TRI_PRISM:
    return tripMult[(o1 + 6) * 12 + o2 + 6];
  case DM_POLYTOPE_TRI_PRISM_TENSOR:
    return ttriMult[(o1 + 6) * 12 + o2 + 6];
  case DM_POLYTOPE_QUAD_PRISM_TENSOR:
    return tquadMult[(o1 + 8) * 16 + o2 + 8];
  case DM_POLYTOPE_PYRAMID:
    return pyrMult[(o1 + 4) * 8 + o2 + 4];
  default:
    return 0;
  }
}

 
static inline PetscInt DMPolytopeTypeComposeOrientationInv(DMPolytopeType ct, PetscInt o1, PetscInt o2)
{
  static const PetscInt triInv[6]    = {-3, -2, -1, 0, 2, 1};
  static const PetscInt quadInv[8]   = {-4, -3, -2, -1, 0, 3, 2, 1};
  static const PetscInt tetInv[24]   = {-9, -11, -4, -12, -5, -7, -6, -8, -10, -3, -2, -1, 0, 2, 1, 3, 8, 10, 6, 11, 4, 9, 5, 7};
  static const PetscInt hexInv[48]   = {-17, -18, -20, -19, -22, -21, -23, -24, -15, -16, -14, -13, -11, -12, -10, -9, -8, -5, -6, -7, -4, -3, -2, -1, 0, 3, 2, 1, 6, 5, 4, 9, 8, 7, 10, 11, 12, 13, 14, 15, 17, 16, 19, 18, 21, 20, 23, 22};
  static const PetscInt tripInv[12]  = {-5, -6, -4, -3, -2, -1, 0, 2, 1, 3, 4, 5};
  static const PetscInt ttriInv[12]  = {-6, -5, -4, -3, -2, -1, 0, 2, 1, 3, 5, 4};
  static const PetscInt tquadInv[16] = {-8, -7, -6, -5, -4, -3, -2, -1, 0, 3, 2, 1, 4, 7, 6, 5};
  static const PetscInt pyrInv[8]    = {-4, -3, -2, -1, 0, 3, 2, 1};
  switch (ct) {
  case DM_POLYTOPE_POINT:
    return 0;
  case DM_POLYTOPE_SEGMENT:
  case DM_POLYTOPE_POINT_PRISM_TENSOR:
    return DMPolytopeTypeComposeOrientation(ct, o1, o2);
  case DM_POLYTOPE_TRIANGLE:
    return DMPolytopeTypeComposeOrientation(ct, o1, triInv[o2 + 3]);
  case DM_POLYTOPE_QUADRILATERAL:
    return DMPolytopeTypeComposeOrientation(ct, o1, quadInv[o2 + 4]);
  case DM_POLYTOPE_SEG_PRISM_TENSOR:
    return DMPolytopeTypeComposeOrientation(ct, o1, o2);
  case DM_POLYTOPE_TETRAHEDRON:
    return DMPolytopeTypeComposeOrientation(ct, o1, tetInv[o2 + 12]);
  case DM_POLYTOPE_HEXAHEDRON:
    return DMPolytopeTypeComposeOrientation(ct, o1, hexInv[o2 + 24]);
  case DM_POLYTOPE_TRI_PRISM:
    return DMPolytopeTypeComposeOrientation(ct, o1, tripInv[o2 + 6]);
  case DM_POLYTOPE_TRI_PRISM_TENSOR:
    return DMPolytopeTypeComposeOrientation(ct, o1, ttriInv[o2 + 6]);
  case DM_POLYTOPE_QUAD_PRISM_TENSOR:
    return DMPolytopeTypeComposeOrientation(ct, o1, tquadInv[o2 + 8]);
  case DM_POLYTOPE_PYRAMID:
    return DMPolytopeTypeComposeOrientation(ct, o1, pyrInv[o2 + 4]);
  default:
    return 0;
  }
}

extern __attribute__((visibility("default"))) PetscErrorCode DMPolytopeMatchOrientation(DMPolytopeType, const PetscInt[], const PetscInt[], PetscInt *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPolytopeMatchVertexOrientation(DMPolytopeType, const PetscInt[], const PetscInt[], PetscInt *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPolytopeGetOrientation(DMPolytopeType, const PetscInt[], const PetscInt[], PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPolytopeGetVertexOrientation(DMPolytopeType, const PetscInt[], const PetscInt[], PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPolytopeInCellTest(DMPolytopeType, const PetscReal[], PetscBool *);

# 5 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdmda.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdmdatypes.h" 1





 








 
typedef enum {
  DMDA_STENCIL_STAR,
  DMDA_STENCIL_BOX
} DMDAStencilType;








 
typedef enum {
  DMDA_Q0,
  DMDA_Q1
} DMDAInterpolationType;









 
typedef enum {
  DMDA_ELEMENT_P1,
  DMDA_ELEMENT_Q1
} DMDAElementType;















 
typedef struct {
  PetscInt        dim, dof, sw;
  PetscInt        mx, my, mz;     
  PetscInt        xs, ys, zs;     
  PetscInt        xm, ym, zm;     
  PetscInt        gxs, gys, gzs;  
  PetscInt        gxm, gym, gzm;  
  DMBoundaryType  bx, by, bz;     
  DMDAStencilType st;
  DM              da;
} DMDALocalInfo;

# 6 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdmda.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscpf.h" 1


 





 




 
extern __attribute__((visibility("default"))) PetscFunctionList PFList;







 
typedef const char *PFType;
# 31 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscpf.h"







 
typedef struct _p_PF *PF;

extern __attribute__((visibility("default"))) PetscClassId PF_CLASSID;

extern __attribute__((visibility("default"))) PetscErrorCode PFCreate(MPI_Comm, PetscInt, PetscInt, PF *);
extern __attribute__((visibility("default"))) PetscErrorCode PFSetType(PF, PFType, void *);
extern __attribute__((visibility("default"))) PetscErrorCode PFSet(PF, PetscErrorCode (*)(void *, PetscInt, const PetscScalar *, PetscScalar *), PetscErrorCode (*)(void *, Vec, Vec), PetscErrorCode (*)(void *, PetscViewer), PetscErrorCode (*)(void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode PFApply(PF, PetscInt, const PetscScalar *, PetscScalar *);
extern __attribute__((visibility("default"))) PetscErrorCode PFApplyVec(PF, Vec, Vec);

extern __attribute__((visibility("default"))) PetscErrorCode PFInitializePackage(void);

extern __attribute__((visibility("default"))) PetscErrorCode PFRegister(const char[], PetscErrorCode (*)(PF, void *));

extern __attribute__((visibility("default"))) PetscErrorCode PFDestroy(PF *);
extern __attribute__((visibility("default"))) PetscErrorCode PFSetFromOptions(PF);
extern __attribute__((visibility("default"))) PetscErrorCode PFGetType(PF, PFType *);

extern __attribute__((visibility("default"))) PetscErrorCode PFView(PF, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PFViewFromOptions(PF, PetscObject, const char[]);



# 7 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdmda.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscao.h" 1





 












 
typedef struct _p_AO *AO;








 
typedef const char *AOType;





 
extern __attribute__((visibility("default"))) PetscClassId AO_CLASSID;

extern __attribute__((visibility("default"))) PetscErrorCode AOInitializePackage(void);

extern __attribute__((visibility("default"))) PetscErrorCode AOCreate(MPI_Comm, AO *);
extern __attribute__((visibility("default"))) PetscErrorCode AOSetIS(AO, IS, IS);
extern __attribute__((visibility("default"))) PetscErrorCode AOSetFromOptions(AO);

extern __attribute__((visibility("default"))) PetscErrorCode AOCreateBasic(MPI_Comm, PetscInt, const PetscInt[], const PetscInt[], AO *);
extern __attribute__((visibility("default"))) PetscErrorCode AOCreateBasicIS(IS, IS, AO *);
extern __attribute__((visibility("default"))) PetscErrorCode AOCreateMemoryScalable(MPI_Comm, PetscInt, const PetscInt[], const PetscInt[], AO *);
extern __attribute__((visibility("default"))) PetscErrorCode AOCreateMemoryScalableIS(IS, IS, AO *);
extern __attribute__((visibility("default"))) PetscErrorCode AOCreateMapping(MPI_Comm, PetscInt, const PetscInt[], const PetscInt[], AO *);
extern __attribute__((visibility("default"))) PetscErrorCode AOCreateMappingIS(IS, IS, AO *);

extern __attribute__((visibility("default"))) PetscErrorCode AOView(AO, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode AOViewFromOptions(AO, PetscObject, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode AODestroy(AO *);

 
extern __attribute__((visibility("default"))) PetscFunctionList AOList;
extern __attribute__((visibility("default"))) PetscErrorCode    AOSetType(AO, AOType);
extern __attribute__((visibility("default"))) PetscErrorCode    AOGetType(AO, AOType *);

extern __attribute__((visibility("default"))) PetscErrorCode AORegister(const char[], PetscErrorCode (*)(AO));

extern __attribute__((visibility("default"))) PetscErrorCode AOPetscToApplication(AO, PetscInt, PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode AOApplicationToPetsc(AO, PetscInt, PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode AOPetscToApplicationIS(AO, IS);
extern __attribute__((visibility("default"))) PetscErrorCode AOApplicationToPetscIS(AO, IS);

extern __attribute__((visibility("default"))) PetscErrorCode AOPetscToApplicationPermuteInt(AO, PetscInt, PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode AOApplicationToPetscPermuteInt(AO, PetscInt, PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode AOPetscToApplicationPermuteReal(AO, PetscInt, PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode AOApplicationToPetscPermuteReal(AO, PetscInt, PetscReal[]);

extern __attribute__((visibility("default"))) PetscErrorCode AOMappingHasApplicationIndex(AO, PetscInt, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode AOMappingHasPetscIndex(AO, PetscInt, PetscBool *);

 
# 8 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdmda.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscfe.h" 1


 
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdt.h" 1


 





 

extern __attribute__((visibility("default"))) PetscClassId PETSCQUADRATURE_CLASSID;







 
typedef struct _p_PetscQuadrature *PetscQuadrature;









 
typedef enum {
  PETSCGAUSSLOBATTOLEGENDRE_VIA_LINEAR_ALGEBRA,
  PETSCGAUSSLOBATTOLEGENDRE_VIA_NEWTON
} PetscGaussLobattoLegendreCreateType;

















 
typedef enum {
  PETSCDTNODES_DEFAULT = -1,
  PETSCDTNODES_GAUSSJACOBI,
  PETSCDTNODES_EQUISPACED,
  PETSCDTNODES_TANHSINH
} PetscDTNodeType;

extern __attribute__((visibility("default"))) const char *const *const PetscDTNodeTypes;























 
typedef enum {
  PETSCDTSIMPLEXQUAD_DEFAULT = -1,
  PETSCDTSIMPLEXQUAD_CONIC   = 0,
  PETSCDTSIMPLEXQUAD_MINSYM
} PetscDTSimplexQuadratureType;

extern __attribute__((visibility("default"))) const char *const *const PetscDTSimplexQuadratureTypes;

extern __attribute__((visibility("default"))) PetscErrorCode PetscQuadratureCreate(MPI_Comm, PetscQuadrature *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscQuadratureDuplicate(PetscQuadrature, PetscQuadrature *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscQuadratureGetOrder(PetscQuadrature, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscQuadratureSetOrder(PetscQuadrature, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscQuadratureGetNumComponents(PetscQuadrature, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscQuadratureSetNumComponents(PetscQuadrature, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscQuadratureEqual(PetscQuadrature, PetscQuadrature, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscQuadratureGetData(PetscQuadrature, PetscInt *, PetscInt *, PetscInt *, const PetscReal *[], const PetscReal *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscQuadratureSetData(PetscQuadrature, PetscInt, PetscInt, PetscInt, const PetscReal[], const PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscQuadratureView(PetscQuadrature, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscQuadratureDestroy(PetscQuadrature *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDTTensorQuadratureCreate(PetscQuadrature, PetscQuadrature, PetscQuadrature *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscQuadratureExpandComposite(PetscQuadrature, PetscInt, const PetscReal[], const PetscReal[], PetscQuadrature *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscQuadraturePushForward(PetscQuadrature, PetscInt, const PetscReal[], const PetscReal[], const PetscReal[], PetscInt, PetscQuadrature *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDTLegendreEval(PetscInt, const PetscReal *, PetscInt, const PetscInt *, PetscReal *, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDTJacobiNorm(PetscReal, PetscReal, PetscInt, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDTJacobiEval(PetscInt, PetscReal, PetscReal, const PetscReal *, PetscInt, const PetscInt *, PetscReal *, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDTJacobiEvalJet(PetscReal, PetscReal, PetscInt, const PetscReal[], PetscInt, PetscInt, PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDTPKDEvalJet(PetscInt, PetscInt, const PetscReal[], PetscInt, PetscInt, PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDTPTrimmedSize(PetscInt, PetscInt, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDTPTrimmedEvalJet(PetscInt, PetscInt, const PetscReal[], PetscInt, PetscInt, PetscInt, PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDTGaussQuadrature(PetscInt, PetscReal, PetscReal, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDTGaussJacobiQuadrature(PetscInt, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDTGaussLobattoJacobiQuadrature(PetscInt, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDTGaussLobattoLegendreQuadrature(PetscInt, PetscGaussLobattoLegendreCreateType, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDTReconstructPoly(PetscInt, PetscInt, const PetscReal *, PetscInt, const PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDTGaussTensorQuadrature(PetscInt, PetscInt, PetscInt, PetscReal, PetscReal, PetscQuadrature *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDTStroudConicalQuadrature(PetscInt, PetscInt, PetscInt, PetscReal, PetscReal, PetscQuadrature *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDTSimplexQuadrature(PetscInt, PetscInt, PetscDTSimplexQuadratureType, PetscQuadrature *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDTTanhSinhTensorQuadrature(PetscInt, PetscInt, PetscReal, PetscReal, PetscQuadrature *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDTTanhSinhIntegrate(void (*)(const PetscReal[], void *, PetscReal *), PetscReal, PetscReal, PetscInt, void *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDTTanhSinhIntegrateMPFR(void (*)(const PetscReal[], void *, PetscReal *), PetscReal, PetscReal, PetscInt, void *, PetscReal *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscGaussLobattoLegendreIntegrate(PetscInt, PetscReal *, PetscReal *, const PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGaussLobattoLegendreElementLaplacianCreate(PetscInt, PetscReal *, PetscReal *, PetscReal ***);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGaussLobattoLegendreElementLaplacianDestroy(PetscInt, PetscReal *, PetscReal *, PetscReal ***);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGaussLobattoLegendreElementGradientCreate(PetscInt, PetscReal *, PetscReal *, PetscReal ***, PetscReal ***);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGaussLobattoLegendreElementGradientDestroy(PetscInt, PetscReal *, PetscReal *, PetscReal ***, PetscReal ***);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGaussLobattoLegendreElementAdvectionCreate(PetscInt, PetscReal *, PetscReal *, PetscReal ***);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGaussLobattoLegendreElementAdvectionDestroy(PetscInt, PetscReal *, PetscReal *, PetscReal ***);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGaussLobattoLegendreElementMassCreate(PetscInt, PetscReal *, PetscReal *, PetscReal ***);
extern __attribute__((visibility("default"))) PetscErrorCode PetscGaussLobattoLegendreElementMassDestroy(PetscInt, PetscReal *, PetscReal *, PetscReal ***);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDTAltVApply(PetscInt, PetscInt, const PetscReal *, const PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDTAltVWedge(PetscInt, PetscInt, PetscInt, const PetscReal *, const PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDTAltVWedgeMatrix(PetscInt, PetscInt, PetscInt, const PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDTAltVPullback(PetscInt, PetscInt, const PetscReal *, PetscInt, const PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDTAltVPullbackMatrix(PetscInt, PetscInt, const PetscReal *, PetscInt, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDTAltVInterior(PetscInt, PetscInt, const PetscReal *, const PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDTAltVInteriorMatrix(PetscInt, PetscInt, const PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDTAltVInteriorPattern(PetscInt, PetscInt, PetscInt (*)[3]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDTAltVStar(PetscInt, PetscInt, PetscInt, const PetscReal *, PetscReal *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDTBaryToIndex(PetscInt, PetscInt, const PetscInt[], PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDTIndexToBary(PetscInt, PetscInt, PetscInt, PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDTGradedOrderToIndex(PetscInt, const PetscInt[], PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDTIndexToGradedOrder(PetscInt, PetscInt, PetscInt[]);

# 162 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdt.h"











 
static inline PetscErrorCode PetscDTFactorial(PetscInt n, PetscReal *factorial)
{
  PetscReal f = 1.0;

  ;
  *factorial = -1.0;
  do { if (__builtin_expect(! !(!(n >= 0)), 0)) do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 180, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdt.h", 63, PETSC_ERROR_INITIAL, "Factorial called with negative number %" "d", n); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } while (0);
  for (PetscInt i = 1; i < n + 1; ++i) f *= (PetscReal)i;
  *factorial = f;
  return 0;
}













 
static inline PetscErrorCode PetscDTFactorialInt(PetscInt n, PetscInt *factorial)
{
  PetscInt facLookup[13] = {1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600};

  ;
  *factorial = -1;
  do { if (__builtin_expect(! !(!(n >= 0 && n <= 12)), 0)) do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 205, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdt.h", 63, PETSC_ERROR_INITIAL, "Number of elements %" "d" " is not in supported range [0,%d]", n, 12); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } while (0);
  if (n <= 12) {
    *factorial = facLookup[n];
  } else {
    PetscInt f = facLookup[12];
    PetscInt i;

    for (i = 13; i < n + 1; ++i) f *= i;
    *factorial = f;
  }
  return 0;
}












 
static inline PetscErrorCode PetscDTBinomial(PetscInt n, PetscInt k, PetscReal *binomial)
{
  ;
  *binomial = -1.0;
  do { if (__builtin_expect(! !(!(n >= 0 && k >= 0 && k <= n)), 0)) do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 234, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdt.h", 63, PETSC_ERROR_INITIAL, "Binomial arguments (%" "d" " %" "d" ") must be non-negative, k <= n", n, k); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } while (0);
  if (n <= 3) {
    PetscInt binomLookup[4][4] = {
      {1, 0, 0, 0},
      {1, 1, 0, 0},
      {1, 2, 1, 0},
      {1, 3, 3, 1}
    };

    *binomial = (PetscReal)binomLookup[n][k];
  } else {
    PetscReal binom = 1.0;

    k = (((k) < (n - k)) ? (k) : (n - k));
    for (PetscInt i = 0; i < k; i++) binom = (binom * (PetscReal)(n - i)) / (PetscReal)(i + 1);
    *binomial = binom;
  }
  return 0;
}














 
static inline PetscErrorCode PetscDTBinomialInt(PetscInt n, PetscInt k, PetscInt *binomial)
{
  PetscInt bin;

  ;
  *binomial = -1;
  do { if (__builtin_expect(! !(!(n >= 0 && k >= 0 && k <= n)), 0)) do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 274, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdt.h", 63, PETSC_ERROR_INITIAL, "Binomial arguments (%" "d" " %" "d" ") must be non-negative, k <= n", n, k); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } while (0);
  do { if (__builtin_expect(! !(!(n <= 29)), 0)) do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 275, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdt.h", 63, PETSC_ERROR_INITIAL, "Binomial elements %" "d" " is larger than max for PetscInt, %d", n, 29); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } while (0);
  if (n <= 3) {
    PetscInt binomLookup[4][4] = {
      {1, 0, 0, 0},
      {1, 1, 0, 0},
      {1, 2, 1, 0},
      {1, 3, 3, 1}
    };

    bin = binomLookup[n][k];
  } else {
    PetscInt binom = 1;

    k = (((k) < (n - k)) ? (k) : (n - k));
    for (PetscInt i = 0; i < k; i++) binom = (binom * (n - i)) / (i + 1);
    bin = binom;
  }
  *binomial = bin;
  return 0;
}






















 
static inline PetscErrorCode PetscDTEnumPerm(PetscInt n, PetscInt k, PetscInt *perm, PetscBool *isOdd)
{
  PetscInt  odd = 0;
  PetscInt  i;
  PetscInt  work[12];
  PetscInt *w;

  ;
  if (isOdd) *isOdd = PETSC_FALSE;
  do { if (__builtin_expect(! !(!(n >= 0 && n <= 12)), 0)) do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 327, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdt.h", 63, PETSC_ERROR_INITIAL, "Number of elements %" "d" " is not in supported range [0,%d]", n, 12); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } while (0);
  w = &work[n - 2];
  for (i = 2; i <= n; i++) {
    *(w--) = k % i;
    k /= i;
  }
  for (i = 0; i < n; i++) perm[i] = i;
  for (i = 0; i < n - 1; i++) {
    PetscInt s    = work[i];
    PetscInt swap = perm[i];

    perm[i]     = perm[i + s];
    perm[i + s] = swap;
    odd ^= (!!s);
  }
  if (isOdd) *isOdd = odd ? PETSC_TRUE : PETSC_FALSE;
  return 0;
}
















 
static inline PetscErrorCode PetscDTPermIndex(PetscInt n, const PetscInt *perm, PetscInt *k, PetscBool *isOdd)
{
  PetscInt odd = 0;
  PetscInt i, idx;
  PetscInt work[12];
  PetscInt iwork[12];

  ;
  *k = -1;
  if (isOdd) *isOdd = PETSC_FALSE;
  do { if (__builtin_expect(! !(!(n >= 0 && n <= 12)), 0)) do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 372, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdt.h", 63, PETSC_ERROR_INITIAL, "Number of elements %" "d" " is not in supported range [0,%d]", n, 12); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } while (0);
  for (i = 0; i < n; i++) work[i] = i;   
  for (i = 0; i < n; i++) iwork[i] = i;  
  for (idx = 0, i = 0; i < n - 1; i++) {
    PetscInt j    = perm[i];
    PetscInt icur = work[i];
    PetscInt jloc = iwork[j];
    PetscInt diff = jloc - i;

    idx = idx * (n - i) + diff;
     
    work[i]     = j;
    work[jloc]  = icur;
    iwork[j]    = i;
    iwork[icur] = jloc;
    odd ^= (!!diff);
  }
  *k = idx;
  if (isOdd) *isOdd = odd ? PETSC_TRUE : PETSC_FALSE;
  return 0;
}



















 
static inline PetscErrorCode PetscDTEnumSubset(PetscInt n, PetscInt k, PetscInt j, PetscInt *subset)
{
  PetscInt Nk;

  ;
  do { PetscErrorCode ierr_q_; ; ierr_q_ = PetscDTBinomialInt(n, k, &Nk); if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 418, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdt.h", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
  for (PetscInt i = 0, l = 0; i < n && l < k; i++) {
    PetscInt Nminuskminus = (Nk * (k - l)) / (n - i);
    PetscInt Nminusk      = Nk - Nminuskminus;

    if (j < Nminuskminus) {
      subset[l++] = i;
      Nk          = Nminuskminus;
    } else {
      j -= Nminuskminus;
      Nk = Nminusk;
    }
  }
  return 0;
}



















 
static inline PetscErrorCode PetscDTSubsetIndex(PetscInt n, PetscInt k, const PetscInt *subset, PetscInt *index)
{
  PetscInt j = 0, Nk;

  ;
  *index = -1;
  do { PetscErrorCode ierr_q_; ; ierr_q_ = PetscDTBinomialInt(n, k, &Nk); if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 459, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdt.h", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
  for (PetscInt i = 0, l = 0; i < n && l < k; i++) {
    PetscInt Nminuskminus = (Nk * (k - l)) / (n - i);
    PetscInt Nminusk      = Nk - Nminuskminus;

    if (subset[l] == i) {
      l++;
      Nk = Nminuskminus;
    } else {
      j += Nminuskminus;
      Nk = Nminusk;
    }
  }
  *index = j;
  return 0;
}



















 
static inline PetscErrorCode PetscDTEnumSplit(PetscInt n, PetscInt k, PetscInt j, PetscInt *perm, PetscBool *isOdd)
{
  PetscInt  i, l, m, Nk, odd = 0;
  PetscInt *subcomp = perm + k;

  ;
  if (isOdd) *isOdd = PETSC_FALSE;
  do { PetscErrorCode ierr_q_; ; ierr_q_ = PetscDTBinomialInt(n, k, &Nk); if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 502, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdt.h", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
  for (i = 0, l = 0, m = 0; i < n && l < k; i++) {
    PetscInt Nminuskminus = (Nk * (k - l)) / (n - i);
    PetscInt Nminusk      = Nk - Nminuskminus;

    if (j < Nminuskminus) {
      perm[l++] = i;
      Nk        = Nminuskminus;
    } else {
      subcomp[m++] = i;
      j -= Nminuskminus;
      odd ^= ((k - l) & 1);
      Nk = Nminusk;
    }
  }
  for (; i < n; i++) subcomp[m++] = i;
  if (isOdd) *isOdd = odd ? PETSC_TRUE : PETSC_FALSE;
  return 0;
}

struct _p_PetscTabulation {
  PetscInt    K;     
  PetscInt    Nr;    
  PetscInt    Np;    
  PetscInt    Nb;    
  PetscInt    Nc;    
  PetscInt    cdim;  
  PetscReal **T;    


 
};
typedef struct _p_PetscTabulation *PetscTabulation;

typedef PetscErrorCode (*PetscProbFunc)(const PetscReal[], const PetscReal[], PetscReal[]);

typedef enum {
  DTPROB_DENSITY_CONSTANT,
  DTPROB_DENSITY_GAUSSIAN,
  DTPROB_DENSITY_MAXWELL_BOLTZMANN,
  DTPROB_NUM_DENSITY
} DTProbDensityType;
extern __attribute__((visibility("default"))) const char *const DTProbDensityTypes[];

extern __attribute__((visibility("default"))) PetscErrorCode PetscPDFMaxwellBoltzmann1D(const PetscReal[], const PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCDFMaxwellBoltzmann1D(const PetscReal[], const PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPDFMaxwellBoltzmann2D(const PetscReal[], const PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCDFMaxwellBoltzmann2D(const PetscReal[], const PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPDFMaxwellBoltzmann3D(const PetscReal[], const PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCDFMaxwellBoltzmann3D(const PetscReal[], const PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPDFGaussian1D(const PetscReal[], const PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCDFGaussian1D(const PetscReal[], const PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPDFSampleGaussian1D(const PetscReal[], const PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPDFGaussian2D(const PetscReal[], const PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPDFSampleGaussian2D(const PetscReal[], const PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPDFGaussian3D(const PetscReal[], const PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPDFSampleGaussian3D(const PetscReal[], const PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPDFConstant1D(const PetscReal[], const PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCDFConstant1D(const PetscReal[], const PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPDFSampleConstant1D(const PetscReal[], const PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPDFConstant2D(const PetscReal[], const PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCDFConstant2D(const PetscReal[], const PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPDFSampleConstant2D(const PetscReal[], const PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPDFConstant3D(const PetscReal[], const PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscCDFConstant3D(const PetscReal[], const PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPDFSampleConstant3D(const PetscReal[], const PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscProbCreateFromOptions(PetscInt, const char[], const char[], PetscProbFunc *, PetscProbFunc *, PetscProbFunc *);



extern __attribute__((visibility("default"))) PetscErrorCode PetscProbComputeKSStatistic(Vec, PetscProbFunc, PetscReal *);

# 8 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscfe.h" 2



 








 
typedef struct _n_PetscFEGeom {
  const PetscReal *xi;
  PetscReal       *v;      
  PetscReal       *J;      
  PetscReal       *invJ;   
  PetscReal       *detJ;   
  PetscReal       *n;      
  PetscInt (*face)[2];     
  PetscReal *suppJ[2];     
  PetscReal *suppInvJ[2];  
  PetscReal *suppDetJ[2];  
  PetscInt   dim;          
  PetscInt   dimEmbed;     
  PetscInt   numCells;     
  PetscInt   numPoints;    
  PetscBool  isAffine;     
  PetscBool  isCohesive;   
} PetscFEGeom;

extern __attribute__((visibility("default"))) PetscErrorCode PetscFEInitializePackage(void);

extern __attribute__((visibility("default"))) PetscClassId PETSCSPACE_CLASSID;







 
typedef const char *PetscSpaceType;
# 59 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscfe.h"

extern __attribute__((visibility("default"))) PetscFunctionList PetscSpaceList;
extern __attribute__((visibility("default"))) PetscErrorCode    PetscSpaceCreate(MPI_Comm, PetscSpace *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscSpaceDestroy(PetscSpace *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscSpaceSetType(PetscSpace, PetscSpaceType);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscSpaceGetType(PetscSpace, PetscSpaceType *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscSpaceSetUp(PetscSpace);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscSpaceSetFromOptions(PetscSpace);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscSpaceViewFromOptions(PetscSpace, PetscObject, const char[]);

extern __attribute__((visibility("default"))) PetscErrorCode PetscSpaceView(PetscSpace, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSpaceRegister(const char[], PetscErrorCode (*)(PetscSpace));
extern __attribute__((visibility("default"))) PetscErrorCode PetscSpaceRegisterDestroy(void);

extern __attribute__((visibility("default"))) PetscErrorCode PetscSpaceGetDimension(PetscSpace, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSpaceSetNumComponents(PetscSpace, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSpaceGetNumComponents(PetscSpace, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSpaceSetNumVariables(PetscSpace, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSpaceGetNumVariables(PetscSpace, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSpaceSetDegree(PetscSpace, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSpaceGetDegree(PetscSpace, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSpaceEvaluate(PetscSpace, PetscInt, const PetscReal[], PetscReal[], PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSpaceGetHeightSubspace(PetscSpace, PetscInt, PetscSpace *);

static inline __attribute__((deprecated)) PetscErrorCode PetscSpacePolynomialSetSymmetric(PetscSpace sp, PetscBool s)
{
  do { if (__builtin_expect(! !(!(!s)), 0)) do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(PetscObjectComm((PetscObject)sp), 85, __func__, "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscfe.h", 56, PETSC_ERROR_INITIAL, "PETSCSPACEPOLYNOMIAL does not support symmetric polynomials"); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0); } while (0);
  return 0;
}
static inline __attribute__((deprecated)) PetscErrorCode PetscSpacePolynomialGetSymmetric(__attribute((unused)) PetscSpace sp, PetscBool *s)
{
  *s = PETSC_FALSE;
  return 0;
}
extern __attribute__((visibility("default"))) PetscErrorCode PetscSpacePolynomialSetTensor(PetscSpace, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSpacePolynomialGetTensor(PetscSpace, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscSpacePTrimmedSetFormDegree(PetscSpace, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSpacePTrimmedGetFormDegree(PetscSpace, PetscInt *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscSpaceTensorSetNumSubspaces(PetscSpace, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSpaceTensorGetNumSubspaces(PetscSpace, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSpaceTensorSetSubspace(PetscSpace, PetscInt, PetscSpace);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSpaceTensorGetSubspace(PetscSpace, PetscInt, PetscSpace *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscSpaceSumSetNumSubspaces(PetscSpace, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSpaceSumGetNumSubspaces(PetscSpace, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSpaceSumSetSubspace(PetscSpace, PetscInt, PetscSpace);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSpaceSumGetSubspace(PetscSpace, PetscInt, PetscSpace *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSpaceSumSetConcatenate(PetscSpace, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSpaceSumGetConcatenate(PetscSpace, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSpaceCreateSum(PetscInt numSubspaces, const PetscSpace subspaces[], PetscBool concatenate, PetscSpace *sumSpace);

extern __attribute__((visibility("default"))) PetscErrorCode PetscSpacePointGetPoints(PetscSpace, PetscQuadrature *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscSpacePointSetPoints(PetscSpace, PetscQuadrature);

extern __attribute__((visibility("default"))) PetscErrorCode PetscSpaceCreateSubspace(PetscSpace, PetscDualSpace, PetscReal *, PetscReal *, PetscReal *, PetscReal *, PetscCopyMode, PetscSpace *);

extern __attribute__((visibility("default"))) PetscClassId PETSCDUALSPACE_CLASSID;







 
typedef const char *PetscDualSpaceType;
















 

extern __attribute__((visibility("default"))) PetscFunctionList PetscDualSpaceList;
extern __attribute__((visibility("default"))) PetscErrorCode    PetscDualSpaceCreate(MPI_Comm, PetscDualSpace *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscDualSpaceDestroy(PetscDualSpace *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscDualSpaceDuplicate(PetscDualSpace, PetscDualSpace *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscDualSpaceSetType(PetscDualSpace, PetscDualSpaceType);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscDualSpaceGetType(PetscDualSpace, PetscDualSpaceType *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscDualSpaceGetUniform(PetscDualSpace, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscDualSpaceGetNumDof(PetscDualSpace, const PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscDualSpaceGetSection(PetscDualSpace, PetscSection *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscDualSpaceSetUp(PetscDualSpace);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscDualSpaceSetFromOptions(PetscDualSpace);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscDualSpaceViewFromOptions(PetscDualSpace, PetscObject, const char[]);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceView(PetscDualSpace, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceRegister(const char[], PetscErrorCode (*)(PetscDualSpace));
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceRegisterDestroy(void);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceGetDimension(PetscDualSpace, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceGetInteriorDimension(PetscDualSpace, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceSetNumComponents(PetscDualSpace, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceGetNumComponents(PetscDualSpace, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceSetOrder(PetscDualSpace, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceGetOrder(PetscDualSpace, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceSetDM(PetscDualSpace, DM);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceGetDM(PetscDualSpace, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceGetFunctional(PetscDualSpace, PetscInt, PetscQuadrature *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceGetSymmetries(PetscDualSpace, const PetscInt ****, const PetscScalar ****);

extern __attribute__((visibility("default"))) PetscErrorCode PetscFEGeomCreate(PetscQuadrature, PetscInt, PetscInt, PetscBool, PetscFEGeom **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEGeomGetQuadrature(PetscFEGeom *, PetscQuadrature *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEGeomSetQuadrature(PetscFEGeom *, PetscQuadrature);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEGeomGetChunk(PetscFEGeom *, PetscInt, PetscInt, PetscFEGeom **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEGeomRestoreChunk(PetscFEGeom *, PetscInt, PetscInt, PetscFEGeom **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEGeomGetPoint(PetscFEGeom *, PetscInt, PetscInt, const PetscReal[], PetscFEGeom *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEGeomGetCellPoint(PetscFEGeom *, PetscInt, PetscInt, PetscFEGeom *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEGeomComplete(PetscFEGeom *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEGeomDestroy(PetscFEGeom **);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceApply(PetscDualSpace, PetscInt, PetscReal, PetscFEGeom *, PetscInt, PetscErrorCode (*)(PetscInt, PetscReal, const PetscReal[], PetscInt, PetscScalar *, void *), void *, PetscScalar *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceApplyDefault(PetscDualSpace, PetscInt, PetscReal, PetscFEGeom *, PetscInt, PetscErrorCode (*)(PetscInt, PetscReal, const PetscReal[], PetscInt, PetscScalar *, void *), void *, PetscScalar *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceGetAllData(PetscDualSpace, PetscQuadrature *, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceCreateAllDataDefault(PetscDualSpace, PetscQuadrature *, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceGetInteriorData(PetscDualSpace, PetscQuadrature *, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceCreateInteriorDataDefault(PetscDualSpace, PetscQuadrature *, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceEqual(PetscDualSpace, PetscDualSpace, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceApplyAll(PetscDualSpace, const PetscScalar *, PetscScalar *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceApplyAllDefault(PetscDualSpace, const PetscScalar *, PetscScalar *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceApplyInterior(PetscDualSpace, const PetscScalar *, PetscScalar *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceApplyInteriorDefault(PetscDualSpace, const PetscScalar *, PetscScalar *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceGetFormDegree(PetscDualSpace, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceSetFormDegree(PetscDualSpace, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceGetDeRahm(PetscDualSpace, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceTransform(PetscDualSpace, PetscDualSpaceTransformType, PetscBool, PetscFEGeom *, PetscInt, PetscInt, PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceTransformGradient(PetscDualSpace, PetscDualSpaceTransformType, PetscBool, PetscFEGeom *, PetscInt, PetscInt, PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceTransformHessian(PetscDualSpace, PetscDualSpaceTransformType, PetscBool, PetscFEGeom *, PetscInt, PetscInt, PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpacePullback(PetscDualSpace, PetscFEGeom *, PetscInt, PetscInt, PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpacePushforward(PetscDualSpace, PetscFEGeom *, PetscInt, PetscInt, PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpacePushforwardGradient(PetscDualSpace, PetscFEGeom *, PetscInt, PetscInt, PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpacePushforwardHessian(PetscDualSpace, PetscFEGeom *, PetscInt, PetscInt, PetscScalar[]);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceLagrangeGetContinuity(PetscDualSpace, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceLagrangeSetContinuity(PetscDualSpace, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceLagrangeGetTensor(PetscDualSpace, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceLagrangeSetTensor(PetscDualSpace, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceLagrangeGetTrimmed(PetscDualSpace, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceLagrangeSetTrimmed(PetscDualSpace, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceLagrangeGetNodeType(PetscDualSpace, PetscDTNodeType *, PetscBool *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceLagrangeSetNodeType(PetscDualSpace, PetscDTNodeType, PetscBool, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceLagrangeGetUseMoments(PetscDualSpace, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceLagrangeSetUseMoments(PetscDualSpace, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceLagrangeGetMomentOrder(PetscDualSpace, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceLagrangeSetMomentOrder(PetscDualSpace, PetscInt);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceGetHeightSubspace(PetscDualSpace, PetscInt, PetscDualSpace *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceGetPointSubspace(PetscDualSpace, PetscInt, PetscDualSpace *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceSimpleSetDimension(PetscDualSpace, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceSimpleSetFunctional(PetscDualSpace, PetscInt, PetscQuadrature);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceRefinedSetCellSpaces(PetscDualSpace, const PetscDualSpace[]);

extern __attribute__((visibility("default"))) PetscClassId PETSCFE_CLASSID;









 
typedef const char *PetscFEType;




extern __attribute__((visibility("default"))) PetscFunctionList PetscFEList;
extern __attribute__((visibility("default"))) PetscErrorCode    PetscFECreate(MPI_Comm, PetscFE *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscFEDestroy(PetscFE *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscFESetType(PetscFE, PetscFEType);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscFEGetType(PetscFE, PetscFEType *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscFESetUp(PetscFE);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscFESetFromOptions(PetscFE);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscFEViewFromOptions(PetscFE, PetscObject, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscFESetName(PetscFE, const char[]);

extern __attribute__((visibility("default"))) PetscErrorCode PetscFEView(PetscFE, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFERegister(const char[], PetscErrorCode (*)(PetscFE));
extern __attribute__((visibility("default"))) PetscErrorCode PetscFERegisterDestroy(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFECreateDefault(MPI_Comm, PetscInt, PetscInt, PetscBool, const char[], PetscInt, PetscFE *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFECreateByCell(MPI_Comm, PetscInt, PetscInt, DMPolytopeType, const char[], PetscInt, PetscFE *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFECreateLagrange(MPI_Comm, PetscInt, PetscInt, PetscBool, PetscInt, PetscInt, PetscFE *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFECreateLagrangeByCell(MPI_Comm, PetscInt, PetscInt, DMPolytopeType, PetscInt, PetscInt, PetscFE *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFECreateFromSpaces(PetscSpace, PetscDualSpace, PetscQuadrature, PetscQuadrature, PetscFE *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscFEGetDimension(PetscFE, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEGetSpatialDimension(PetscFE, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFESetNumComponents(PetscFE, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEGetNumComponents(PetscFE, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEGetTileSizes(PetscFE, PetscInt *, PetscInt *, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFESetTileSizes(PetscFE, PetscInt, PetscInt, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFESetBasisSpace(PetscFE, PetscSpace);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEGetBasisSpace(PetscFE, PetscSpace *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFESetDualSpace(PetscFE, PetscDualSpace);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEGetDualSpace(PetscFE, PetscDualSpace *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFESetQuadrature(PetscFE, PetscQuadrature);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEGetQuadrature(PetscFE, PetscQuadrature *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFESetFaceQuadrature(PetscFE, PetscQuadrature);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEGetFaceQuadrature(PetscFE, PetscQuadrature *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFECopyQuadrature(PetscFE, PetscFE);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEGetNumDof(PetscFE, const PetscInt **);

 
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEGetCellTabulation(PetscFE, PetscInt, PetscTabulation *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEGetFaceTabulation(PetscFE, PetscInt, PetscTabulation *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEGetFaceCentroidTabulation(PetscFE, PetscTabulation *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFECreateTabulation(PetscFE, PetscInt, PetscInt, const PetscReal[], PetscInt, PetscTabulation *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEComputeTabulation(PetscFE, PetscInt, const PetscReal[], PetscInt, PetscTabulation);
extern __attribute__((visibility("default"))) PetscErrorCode PetscTabulationDestroy(PetscTabulation *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscFERefine(PetscFE, PetscFE *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEGetHeightSubspace(PetscFE, PetscInt, PetscFE *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscFECreateCellGeometry(PetscFE, PetscQuadrature, PetscFEGeom *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEDestroyCellGeometry(PetscFE, PetscFEGeom *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEPushforward(PetscFE, PetscFEGeom *, PetscInt, PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEPushforwardGradient(PetscFE, PetscFEGeom *, PetscInt, PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEPushforwardHessian(PetscFE, PetscFEGeom *, PetscInt, PetscScalar[]);

extern __attribute__((visibility("default"))) PetscErrorCode PetscFEIntegrate(PetscDS, PetscInt, PetscInt, PetscFEGeom *, const PetscScalar[], PetscDS, const PetscScalar[], PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEIntegrateBd(PetscDS, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, PetscFEGeom *, const PetscScalar[], PetscDS, const PetscScalar[], PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEIntegrateResidual(PetscDS, PetscFormKey, PetscInt, PetscFEGeom *, const PetscScalar[], const PetscScalar[], PetscDS, const PetscScalar[], PetscReal, PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEIntegrateBdResidual(PetscDS, PetscWeakForm, PetscFormKey, PetscInt, PetscFEGeom *, const PetscScalar[], const PetscScalar[], PetscDS, const PetscScalar[], PetscReal, PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEIntegrateHybridResidual(PetscDS, PetscFormKey, PetscInt, PetscInt, PetscFEGeom *, const PetscScalar[], const PetscScalar[], PetscDS, const PetscScalar[], PetscReal, PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEIntegrateJacobian(PetscDS, PetscFEJacobianType, PetscFormKey, PetscInt, PetscFEGeom *, const PetscScalar[], const PetscScalar[], PetscDS, const PetscScalar[], PetscReal, PetscReal, PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEIntegrateBdJacobian(PetscDS, PetscWeakForm, PetscFormKey, PetscInt, PetscFEGeom *, const PetscScalar[], const PetscScalar[], PetscDS, const PetscScalar[], PetscReal, PetscReal, PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEIntegrateHybridJacobian(PetscDS, PetscFEJacobianType, PetscFormKey, PetscInt, PetscInt, PetscFEGeom *, const PetscScalar[], const PetscScalar[], PetscDS, const PetscScalar[], PetscReal, PetscReal, PetscScalar[]);

extern __attribute__((visibility("default"))) PetscErrorCode PetscFECompositeGetMapping(PetscFE, PetscInt *, const PetscReal *[], const PetscReal *[], const PetscReal *[]);

extern __attribute__((visibility("default"))) PetscErrorCode PetscFECreateHeightTrace(PetscFE, PetscInt, PetscFE *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFECreatePointTrace(PetscFE, PetscInt, PetscFE *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscFEOpenCLSetRealType(PetscFE, PetscDataType);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFEOpenCLGetRealType(PetscFE, PetscDataType *);

# 9 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdmda.h" 2

 











 








 

extern __attribute__((visibility("default"))) PetscErrorCode DMDASetInterpolationType(DM, DMDAInterpolationType);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetInterpolationType(DM, DMDAInterpolationType *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDACreateAggregates(DM, DM, Mat *);

 
extern __attribute__((visibility("default"))) PetscErrorCode DMDASetElementType(DM, DMDAElementType);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetElementType(DM, DMDAElementType *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetElements(DM, PetscInt *, PetscInt *, const PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMDARestoreElements(DM, PetscInt *, PetscInt *, const PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetElementsSizes(DM, PetscInt *, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetElementsCorners(DM, PetscInt *, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetSubdomainCornersIS(DM, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDARestoreSubdomainCornersIS(DM, IS *);



extern __attribute__((visibility("default"))) PetscErrorCode DMDACreate(MPI_Comm, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDASetSizes(DM, PetscInt, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMDACreate1d(MPI_Comm, DMBoundaryType, PetscInt, PetscInt, PetscInt, const PetscInt[], DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDACreate2d(MPI_Comm, DMBoundaryType, DMBoundaryType, DMDAStencilType, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDACreate3d(MPI_Comm, DMBoundaryType, DMBoundaryType, DMBoundaryType, DMDAStencilType, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscInt[], DM *);

extern __attribute__((visibility("default"))) PetscErrorCode DMDAGlobalToNaturalBegin(DM, Vec, InsertMode, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGlobalToNaturalEnd(DM, Vec, InsertMode, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMDANaturalToGlobalBegin(DM, Vec, InsertMode, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMDANaturalToGlobalEnd(DM, Vec, InsertMode, Vec);
__attribute__((deprecated)) static inline PetscErrorCode DMDALocalToLocalBegin(DM dm, Vec g, InsertMode mode, Vec l)
{
  return DMLocalToLocalBegin(dm, g, mode, l);
}
__attribute__((deprecated)) static inline PetscErrorCode DMDALocalToLocalEnd(DM dm, Vec g, InsertMode mode, Vec l)
{
  return DMLocalToLocalEnd(dm, g, mode, l);
}
extern __attribute__((visibility("default"))) PetscErrorCode DMDACreateNaturalVector(DM, Vec *);

extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetCorners(DM, PetscInt *, PetscInt *, PetscInt *, PetscInt *, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetGhostCorners(DM, PetscInt *, PetscInt *, PetscInt *, PetscInt *, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetInfo(DM, PetscInt *, PetscInt *, PetscInt *, PetscInt *, PetscInt *, PetscInt *, PetscInt *, PetscInt *, PetscInt *, DMBoundaryType *, DMBoundaryType *, DMBoundaryType *, DMDAStencilType *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetProcessorSubset(DM, DMDirection, PetscInt, MPI_Comm *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetProcessorSubsets(DM, DMDirection, MPI_Comm *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetRay(DM, DMDirection, PetscInt, Vec *, VecScatter *);

extern __attribute__((visibility("default"))) PetscErrorCode DMDAGlobalToNaturalAllCreate(DM, VecScatter *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDANaturalAllToGlobalCreate(DM, VecScatter *);

extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetScatter(DM, VecScatter *, VecScatter *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetNeighbors(DM, const PetscMPIInt **);

extern __attribute__((visibility("default"))) PetscErrorCode DMDASetAOType(DM, AOType);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetAO(DM, AO *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDASetUniformCoordinates(DM, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode DMDASetGLLCoordinates(DM, PetscInt, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetCoordinateArray(DM, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDARestoreCoordinateArray(DM, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetLogicalCoordinate(DM, PetscScalar, PetscScalar, PetscScalar, PetscInt *, PetscInt *, PetscInt *, PetscScalar *, PetscScalar *, PetscScalar *);
 
extern __attribute__((visibility("default"))) PetscErrorCode DMDAMapCoordsToPeriodicDomain(DM, PetscScalar *, PetscScalar *);

extern __attribute__((visibility("default"))) PetscErrorCode DMDACreateCompatibleDMDA(DM, PetscInt, DM *);
extern __attribute__((visibility("default")))                __attribute__((deprecated)) PetscErrorCode DMDAGetReducedDMDA(DM, PetscInt, DM *);

extern __attribute__((visibility("default"))) PetscErrorCode DMDASetFieldName(DM, PetscInt, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetFieldName(DM, PetscInt, const char **);
extern __attribute__((visibility("default"))) PetscErrorCode DMDASetFieldNames(DM, const char *const *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetFieldNames(DM, const char *const **);
extern __attribute__((visibility("default"))) PetscErrorCode DMDASetCoordinateName(DM, PetscInt, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetCoordinateName(DM, PetscInt, const char **);

extern __attribute__((visibility("default"))) PetscErrorCode DMDASetBoundaryType(DM, DMBoundaryType, DMBoundaryType, DMBoundaryType);
extern __attribute__((visibility("default"))) PetscErrorCode DMDASetDof(DM, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetDof(DM, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDASetOverlap(DM, PetscInt, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetOverlap(DM, PetscInt *, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDASetNumLocalSubDomains(DM, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetNumLocalSubDomains(DM, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetOffset(DM, PetscInt *, PetscInt *, PetscInt *, PetscInt *, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDASetOffset(DM, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetNonOverlappingRegion(DM, PetscInt *, PetscInt *, PetscInt *, PetscInt *, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDASetNonOverlappingRegion(DM, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMDASetStencilWidth(DM, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetStencilWidth(DM, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAMapMatStencilToGlobal(DM, PetscInt, const MatStencil[], PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMDASetOwnershipRanges(DM, const PetscInt[], const PetscInt[], const PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetOwnershipRanges(DM, const PetscInt **, const PetscInt **, const PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode DMDASetNumProcs(DM, PetscInt, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMDASetStencilType(DM, DMDAStencilType);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetStencilType(DM, DMDAStencilType *);

extern __attribute__((visibility("default"))) PetscErrorCode DMDAVecGetArray(DM, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAVecRestoreArray(DM, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAVecGetArrayWrite(DM, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAVecRestoreArrayWrite(DM, Vec, void *);

extern __attribute__((visibility("default"))) PetscErrorCode DMDAVecGetArrayDOF(DM, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAVecRestoreArrayDOF(DM, Vec, void *);

extern __attribute__((visibility("default"))) PetscErrorCode DMDAVecGetArrayRead(DM, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAVecRestoreArrayRead(DM, Vec, void *);

extern __attribute__((visibility("default"))) PetscErrorCode DMDAVecGetArrayDOFRead(DM, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAVecRestoreArrayDOFRead(DM, Vec, void *);

extern __attribute__((visibility("default"))) PetscErrorCode DMDAVecGetArrayDOFWrite(DM, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAVecRestoreArrayDOFWrite(DM, Vec, void *);

extern __attribute__((visibility("default"))) PetscErrorCode DMDACreatePatchIS(DM, MatStencil *, MatStencil *, IS *, PetscBool);


























 
typedef struct {
  PetscScalar x, y;
} DMDACoor2d;




























 
typedef struct {
  PetscScalar x, y, z;
} DMDACoor3d;

extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetLocalInfo(DM, DMDALocalInfo *);

extern __attribute__((visibility("default"))) PetscErrorCode MatRegisterDAAD(void);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateDAAD(DM, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateSeqUSFFT(Vec, DM, Mat *);

extern __attribute__((visibility("default"))) PetscErrorCode DMDASetGetMatrix(DM, PetscErrorCode (*)(DM, Mat *));
extern __attribute__((visibility("default"))) PetscErrorCode DMDASetBlockFills(DM, const PetscInt *, const PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDASetBlockFillsSparse(DM, const PetscInt *, const PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDASetRefinementFactor(DM, PetscInt, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetRefinementFactor(DM, PetscInt *, PetscInt *, PetscInt *);

extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetArray(DM, PetscBool, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDARestoreArray(DM, PetscBool, void *);

extern __attribute__((visibility("default"))) PetscErrorCode DMDACreatePF(DM, PF *);

 
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetNumCells(DM, PetscInt *, PetscInt *, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetCellPoint(DM, PetscInt, PetscInt, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetNumVertices(DM, PetscInt *, PetscInt *, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetNumFaces(DM, PetscInt *, PetscInt *, PetscInt *, PetscInt *, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetHeightStratum(DM, PetscInt, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetDepthStratum(DM, PetscInt, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAComputeCellGeometryFEM(DM, PetscInt, PetscQuadrature, PetscReal[], PetscReal[], PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetTransitiveClosure(DM, PetscInt, PetscBool, PetscInt *, PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode DMDARestoreTransitiveClosure(DM, PetscInt, PetscBool, PetscInt *, PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAConvertToCell(DM, MatStencil, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDASetVertexCoordinates(DM, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode DMDASetPreallocationCenterDimension(DM, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMDAGetPreallocationCenterDimension(DM, PetscInt *);

# 16 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdmcomposite.h" 1
 





extern __attribute__((visibility("default"))) PetscErrorCode DMCompositeCreate(MPI_Comm, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMCompositeAddDM(DM, DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMCompositeSetCoupling(DM, PetscErrorCode (*)(DM, Mat, PetscInt *, PetscInt *, PetscInt, PetscInt, PetscInt, PetscInt));
extern __attribute__((visibility("default"))) PetscErrorCode DMCompositeAddVecScatter(DM, VecScatter);
extern __attribute__((visibility("default"))) PetscErrorCode DMCompositeScatter(DM, Vec, ...);
extern __attribute__((visibility("default"))) PetscErrorCode DMCompositeScatterArray(DM, Vec, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMCompositeGather(DM, InsertMode, Vec, ...);
extern __attribute__((visibility("default"))) PetscErrorCode DMCompositeGatherArray(DM, InsertMode, Vec, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMCompositeGetNumberDM(DM, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMCompositeGetAccess(DM, Vec, ...);
extern __attribute__((visibility("default"))) PetscErrorCode DMCompositeRestoreAccess(DM, Vec, ...);
extern __attribute__((visibility("default"))) PetscErrorCode DMCompositeGetAccessArray(DM, Vec, PetscInt, const PetscInt *, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMCompositeRestoreAccessArray(DM, Vec, PetscInt, const PetscInt *, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMCompositeGetLocalAccessArray(DM, Vec, PetscInt, const PetscInt *, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMCompositeRestoreLocalAccessArray(DM, Vec, PetscInt, const PetscInt *, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMCompositeGetLocalVectors(DM, ...);
extern __attribute__((visibility("default"))) PetscErrorCode DMCompositeGetEntries(DM, ...);
extern __attribute__((visibility("default"))) PetscErrorCode DMCompositeGetEntriesArray(DM, DM[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMCompositeRestoreLocalVectors(DM, ...);
extern __attribute__((visibility("default"))) PetscErrorCode DMCompositeGetGlobalISs(DM, IS *[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMCompositeGetLocalISs(DM, IS **);
extern __attribute__((visibility("default"))) PetscErrorCode DMCompositeGetISLocalToGlobalMappings(DM, ISLocalToGlobalMapping **);

# 17 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdmpatch.h" 1


 





 








 
extern __attribute__((visibility("default"))) PetscErrorCode DMPatchCreate(MPI_Comm, DM *);

extern __attribute__((visibility("default"))) PetscErrorCode DMPatchZoom(DM, MatStencil, MatStencil, MPI_Comm, DM *, PetscSF *, PetscSF *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPatchSolve(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMPatchGetPatchSize(DM, MatStencil *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPatchSetPatchSize(DM, MatStencil);
extern __attribute__((visibility("default"))) PetscErrorCode DMPatchGetCommSize(DM, MatStencil *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPatchSetCommSize(DM, MatStencil);
extern __attribute__((visibility("default"))) PetscErrorCode DMPatchGetCoarse(DM, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPatchCreateGrid(MPI_Comm, PetscInt, MatStencil, MatStencil, MatStencil, DM *);












 

# 18 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdmplex.h" 1


 



# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscpartitioner.h" 1





 







 
typedef struct _p_PetscPartitioner *PetscPartitioner;

extern __attribute__((visibility("default"))) PetscClassId   PETSCPARTITIONER_CLASSID;
extern __attribute__((visibility("default"))) PetscErrorCode PetscPartitionerInitializePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPartitionerFinalizePackage(void);







 
typedef const char *PetscPartitionerType;
# 35 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscpartitioner.h"

extern __attribute__((visibility("default"))) PetscFunctionList PetscPartitionerList;
extern __attribute__((visibility("default"))) PetscErrorCode    PetscPartitionerRegister(const char[], PetscErrorCode (*)(PetscPartitioner));

extern __attribute__((visibility("default"))) PetscErrorCode PetscPartitionerCreate(MPI_Comm, PetscPartitioner *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPartitionerDestroy(PetscPartitioner *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPartitionerSetType(PetscPartitioner, PetscPartitionerType);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPartitionerGetType(PetscPartitioner, PetscPartitionerType *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPartitionerSetUp(PetscPartitioner);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPartitionerReset(PetscPartitioner);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPartitionerSetFromOptions(PetscPartitioner);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPartitionerViewFromOptions(PetscPartitioner, PetscObject, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPartitionerView(PetscPartitioner, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPartitionerPartition(PetscPartitioner, PetscInt, PetscInt, PetscInt[], PetscInt[], PetscSection, PetscSection, PetscSection, IS *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscPartitionerShellSetPartition(PetscPartitioner, PetscInt, const PetscInt[], const PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPartitionerShellSetRandom(PetscPartitioner, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscPartitionerShellGetRandom(PetscPartitioner, PetscBool *);

 


extern __attribute__((visibility("default"))) PetscErrorCode PetscPartitionerMatPartitioningGetMatPartitioning(PetscPartitioner, MatPartitioning *);

# 9 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdmplex.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdmplextypes.h" 1



 


















 
typedef enum {
  DM_SHAPE_BOX,
  DM_SHAPE_BOX_SURFACE,
  DM_SHAPE_BALL,
  DM_SHAPE_SPHERE,
  DM_SHAPE_CYLINDER,
  DM_SHAPE_SCHWARZ_P,
  DM_SHAPE_GYROID,
  DM_SHAPE_DOUBLET,
  DM_SHAPE_ANNULUS,
  DM_SHAPE_UNKNOWN
} DMPlexShape;
extern __attribute__((visibility("default"))) const char *const DMPlexShapes[];












 
typedef enum {
  DM_PLEX_CSR_MAT,
  DM_PLEX_CSR_GRAPH,
  DM_PLEX_CSR_OVERLAP
} DMPlexCSRAlgorithm;
extern __attribute__((visibility("default"))) const char *const DMPlexCSRAlgorithms[];

typedef struct _p_DMPlexPointQueue *DMPlexPointQueue;
struct _p_DMPlexPointQueue {
  PetscInt  size;    
  PetscInt *points;  
  PetscInt  front;   
  PetscInt  back;    
  PetscInt  num;     
};

# 11 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdmplex.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscfv.h" 1


 



# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscfvtypes.h" 1



 







 
typedef struct _p_PetscLimiter *PetscLimiter;







 
typedef struct _p_PetscFV *PetscFV;












 
typedef struct {
  PetscReal   normal[3];    
  PetscReal   centroid[3];  
  PetscScalar grad[2][3];   
} PetscFVFaceGeom;











 
typedef struct {
  PetscReal centroid[3];
  PetscReal volume;
} PetscFVCellGeom;

# 10 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscfv.h" 2


 

extern __attribute__((visibility("default"))) PetscClassId PETSCLIMITER_CLASSID;







 
typedef const char *PetscLimiterType;
# 32 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscfv.h"

extern __attribute__((visibility("default"))) PetscFunctionList PetscLimiterList;
extern __attribute__((visibility("default"))) PetscErrorCode    PetscLimiterCreate(MPI_Comm, PetscLimiter *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscLimiterDestroy(PetscLimiter *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscLimiterSetType(PetscLimiter, PetscLimiterType);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscLimiterGetType(PetscLimiter, PetscLimiterType *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscLimiterSetUp(PetscLimiter);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscLimiterSetFromOptions(PetscLimiter);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscLimiterViewFromOptions(PetscLimiter, PetscObject, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscLimiterView(PetscLimiter, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscLimiterRegister(const char[], PetscErrorCode (*)(PetscLimiter));
extern __attribute__((visibility("default"))) PetscErrorCode    PetscLimiterRegisterDestroy(void);

extern __attribute__((visibility("default"))) PetscErrorCode PetscLimiterLimit(PetscLimiter, PetscReal, PetscReal *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscFVInitializePackage(void);

extern __attribute__((visibility("default"))) PetscClassId PETSCFV_CLASSID;







 
typedef const char *PetscFVType;



extern __attribute__((visibility("default"))) PetscFunctionList PetscFVList;
extern __attribute__((visibility("default"))) PetscErrorCode    PetscFVCreate(MPI_Comm, PetscFV *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscFVDestroy(PetscFV *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscFVSetType(PetscFV, PetscFVType);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscFVGetType(PetscFV, PetscFVType *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscFVSetUp(PetscFV);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscFVSetFromOptions(PetscFV);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscFVViewFromOptions(PetscFV, PetscObject, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscFVView(PetscFV, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscFVRegister(const char[], PetscErrorCode (*)(PetscFV));
extern __attribute__((visibility("default"))) PetscErrorCode    PetscFVRegisterDestroy(void);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscFVSetComponentName(PetscFV, PetscInt, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscFVGetComponentName(PetscFV, PetscInt, const char *[]);

extern __attribute__((visibility("default"))) PetscErrorCode PetscFVSetLimiter(PetscFV, PetscLimiter);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFVGetLimiter(PetscFV, PetscLimiter *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFVSetNumComponents(PetscFV, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFVGetNumComponents(PetscFV, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFVSetSpatialDimension(PetscFV, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFVGetSpatialDimension(PetscFV, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFVSetComputeGradients(PetscFV, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFVGetComputeGradients(PetscFV, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFVSetQuadrature(PetscFV, PetscQuadrature);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFVGetQuadrature(PetscFV, PetscQuadrature *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFVSetDualSpace(PetscFV, PetscDualSpace);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFVGetDualSpace(PetscFV, PetscDualSpace *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscFVRefine(PetscFV, PetscFV *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscFVGetCellTabulation(PetscFV, PetscTabulation *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFVCreateTabulation(PetscFV, PetscInt, PetscInt, const PetscReal[], PetscInt, PetscTabulation *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscFVComputeGradient(PetscFV, PetscInt, PetscScalar[], PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFVIntegrateRHSFunction(PetscFV, PetscDS, PetscInt, PetscInt, PetscFVFaceGeom *, PetscReal *, PetscScalar[], PetscScalar[], PetscScalar[], PetscScalar[]);

extern __attribute__((visibility("default"))) PetscErrorCode PetscFVLeastSquaresSetMaxFaces(PetscFV, PetscInt);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDualSpaceApplyFVM(PetscDualSpace, PetscInt, PetscReal, PetscFVCellGeom *, PetscInt, PetscErrorCode (*)(PetscInt, PetscReal, const PetscReal[], PetscInt, PetscScalar *, void *), void *, PetscScalar *);

# 14 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdmplex.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdmfield.h" 1







 

extern __attribute__((visibility("default"))) PetscErrorCode DMFieldInitializePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode DMFieldFinalizePackage(void);

extern __attribute__((visibility("default"))) PetscClassId DMFIELD_CLASSID;







 
typedef const char *DMFieldType;




extern __attribute__((visibility("default"))) PetscFunctionList DMFieldList;
extern __attribute__((visibility("default"))) PetscErrorCode    DMFieldSetType(DMField, DMFieldType);
extern __attribute__((visibility("default"))) PetscErrorCode    DMFieldGetType(DMField, DMFieldType *);
extern __attribute__((visibility("default"))) PetscErrorCode    DMFieldRegister(const char[], PetscErrorCode (*)(DMField));

typedef enum {
  DMFIELD_VERTEX,
  DMFIELD_EDGE,
  DMFIELD_FACET,
  DMFIELD_CELL
} DMFieldContinuity;
extern __attribute__((visibility("default"))) const char *const DMFieldContinuities[];

extern __attribute__((visibility("default"))) PetscErrorCode DMFieldDestroy(DMField *);
extern __attribute__((visibility("default"))) PetscErrorCode DMFieldView(DMField, PetscViewer);

extern __attribute__((visibility("default"))) PetscErrorCode DMFieldGetDM(DMField, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMFieldGetNumComponents(DMField, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMFieldGetContinuity(DMField, DMFieldContinuity *);

extern __attribute__((visibility("default"))) PetscErrorCode DMFieldEvaluate(DMField, Vec, PetscDataType, void *, void *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMFieldEvaluateFE(DMField, IS, PetscQuadrature, PetscDataType, void *, void *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMFieldEvaluateFV(DMField, IS, PetscDataType, void *, void *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMFieldCreateFEGeom(DMField, IS, PetscQuadrature, PetscBool, PetscFEGeom **);

extern __attribute__((visibility("default"))) PetscErrorCode DMFieldCreateDefaultQuadrature(DMField, IS, PetscQuadrature *);

extern __attribute__((visibility("default"))) PetscErrorCode DMFieldGetDegree(DMField, IS, PetscInt *, PetscInt *);

extern __attribute__((visibility("default"))) PetscErrorCode DMFieldCreateDA(DM, PetscInt, const PetscScalar *, DMField *);
extern __attribute__((visibility("default"))) PetscErrorCode DMFieldCreateDS(DM, PetscInt, Vec, DMField *);
extern __attribute__((visibility("default"))) PetscErrorCode DMFieldCreateDSWithDG(DM, DM, PetscInt, Vec, Vec, DMField *);

extern __attribute__((visibility("default"))) PetscErrorCode DMFieldCreateShell(DM, PetscInt, DMFieldContinuity, void *, DMField *);
extern __attribute__((visibility("default"))) PetscErrorCode DMFieldShellSetDestroy(DMField, PetscErrorCode (*)(DMField));
extern __attribute__((visibility("default"))) PetscErrorCode DMFieldShellGetContext(DMField, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMFieldShellSetEvaluate(DMField, PetscErrorCode (*)(DMField, Vec, PetscDataType, void *, void *, void *));
extern __attribute__((visibility("default"))) PetscErrorCode DMFieldShellSetEvaluateFE(DMField, PetscErrorCode (*)(DMField, IS, PetscQuadrature, PetscDataType, void *, void *, void *));
extern __attribute__((visibility("default"))) PetscErrorCode DMFieldShellEvaluateFEDefault(DMField, IS, PetscQuadrature, PetscDataType, void *, void *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMFieldShellSetEvaluateFV(DMField, PetscErrorCode (*)(DMField, IS, PetscDataType, void *, void *, void *));
extern __attribute__((visibility("default"))) PetscErrorCode DMFieldShellEvaluateFVDefault(DMField, IS, PetscDataType, void *, void *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMFieldShellSetGetDegree(DMField, PetscErrorCode (*)(DMField, IS, PetscInt *, PetscInt *));
extern __attribute__((visibility("default"))) PetscErrorCode DMFieldShellSetCreateDefaultQuadrature(DMField, PetscErrorCode (*)(DMField, IS, PetscQuadrature *));

# 16 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdmplex.h" 2


 

extern __attribute__((visibility("default"))) PetscErrorCode PetscPartitionerDMPlexPartition(PetscPartitioner, DM, PetscSection, PetscSection, IS *);

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexBuildFromCellList(DM, PetscInt, PetscInt, PetscInt, const PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexBuildFromCellListParallel(DM, PetscInt, PetscInt, PetscInt, PetscInt, const PetscInt[], PetscSF *, PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexBuildCoordinatesFromCellList(DM, PetscInt, const PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexBuildCoordinatesFromCellListParallel(DM, PetscInt, PetscSF, const PetscReal[]);

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreate(MPI_Comm, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateCohesiveSubmesh(DM, PetscBool, const char[], PetscInt, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateFromCellListPetsc(MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscBool, const PetscInt[], PetscInt, const PetscReal[], DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateFromCellListParallelPetsc(MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscBool, const PetscInt[], PetscInt, const PetscReal[], PetscSF *, PetscInt **, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateFromDAG(DM, PetscInt, const PetscInt[], const PetscInt[], const PetscInt[], const PetscInt[], const PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateReferenceCell(MPI_Comm, DMPolytopeType, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetOptionsPrefix(DM, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetChart(DM, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetChart(DM, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetConeSize(DM, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetConeSize(DM, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexAddConeSize(DM, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetCone(DM, PetscInt, const PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetConeTuple(DM, IS, PetscSection *, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetConeRecursive(DM, IS, PetscInt *, IS *[], PetscSection *[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexRestoreConeRecursive(DM, IS, PetscInt *, IS *[], PetscSection *[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetConeRecursiveVertices(DM, IS, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetCone(DM, PetscInt, const PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexInsertCone(DM, PetscInt, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexInsertConeOrientation(DM, PetscInt, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetConeOrientation(DM, PetscInt, const PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetConeOrientation(DM, PetscInt, const PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetSupportSize(DM, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetSupportSize(DM, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetSupport(DM, PetscInt, const PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetSupport(DM, PetscInt, const PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexInsertSupport(DM, PetscInt, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetConeSection(DM, PetscSection *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetSupportSection(DM, PetscSection *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetCones(DM, PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetConeOrientations(DM, PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetMaxSizes(DM, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSymmetrize(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexStratify(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexEqual(DM, DM, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexOrientPoint(DM, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexOrient(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexPreallocateOperator(DM, PetscInt, PetscInt[], PetscInt[], PetscInt[], PetscInt[], Mat, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetPointLocal(DM, PetscInt, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexPointLocalRead(DM, PetscInt, const PetscScalar *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexPointLocalRef(DM, PetscInt, PetscScalar *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetPointLocalField(DM, PetscInt, PetscInt, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexPointLocalFieldRef(DM, PetscInt, PetscInt, PetscScalar *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexPointLocalFieldRead(DM, PetscInt, PetscInt, const PetscScalar *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetPointGlobal(DM, PetscInt, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexPointGlobalRead(DM, PetscInt, const PetscScalar *, const void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexPointGlobalRef(DM, PetscInt, PetscScalar *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetPointGlobalField(DM, PetscInt, PetscInt, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexPointGlobalFieldRef(DM, PetscInt, PetscInt, PetscScalar *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexPointGlobalFieldRead(DM, PetscInt, PetscInt, const PetscScalar *, void *);

 
extern __attribute__((visibility("default"))) const char *const DMPlexInterpolatedFlags[];





















 
typedef enum {
  DMPLEX_INTERPOLATED_INVALID = -1,
  DMPLEX_INTERPOLATED_NONE    = 0,
  DMPLEX_INTERPOLATED_PARTIAL,
  DMPLEX_INTERPOLATED_MIXED,
  DMPLEX_INTERPOLATED_FULL
} DMPlexInterpolatedFlag;

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexInterpolate(DM, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexUninterpolate(DM, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexInterpolatePointSF(DM, PetscSF);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexIsInterpolated(DM, DMPlexInterpolatedFlag *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexIsInterpolatedCollective(DM, DMPlexInterpolatedFlag *);

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexFilter(DM, DMLabel, PetscInt, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetCellNumbering(DM, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetVertexNumbering(DM, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreatePointNumbering(DM, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateRankField(DM, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateLabelField(DM, DMLabel, Vec *);

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetDepth(DM, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetDepthLabel(DM, DMLabel *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetDepthStratum(DM, PetscInt, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetHeightStratum(DM, PetscInt, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetPointDepth(DM, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetPointHeight(DM, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetCellTypeLabel(DM, DMLabel *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetCellType(DM, PetscInt, DMPolytopeType *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetCellType(DM, PetscInt, DMPolytopeType);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeCellTypes(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexInvertCell(DMPolytopeType, PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexReorderCell(DM, PetscInt, PetscInt[]);

 
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetMeet(DM, PetscInt, const PetscInt[], PetscInt *, const PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetFullMeet(DM, PetscInt, const PetscInt[], PetscInt *, const PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexRestoreMeet(DM, PetscInt, const PetscInt[], PetscInt *, const PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetJoin(DM, PetscInt, const PetscInt[], PetscInt *, const PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetFullJoin(DM, PetscInt, const PetscInt[], PetscInt *, const PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexRestoreJoin(DM, PetscInt, const PetscInt[], PetscInt *, const PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetTransitiveClosure(DM, PetscInt, PetscBool, PetscInt *, PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexRestoreTransitiveClosure(DM, PetscInt, PetscBool, PetscInt *, PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetCompressedClosure(DM, PetscSection, PetscInt, PetscInt *, PetscInt **, PetscSection *, IS *, const PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexRestoreCompressedClosure(DM, PetscSection, PetscInt, PetscInt *, PetscInt **, PetscSection *, IS *, const PetscInt **);













 
typedef enum {
  DMPLEX_TPS_SCHWARZ_P,
  DMPLEX_TPS_GYROID
} DMPlexTPSType;
extern __attribute__((visibility("default"))) const char *const DMPlexTPSTypes[];

 
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGenerate(DM, const char[], PetscBool, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCopyCoordinates(DM, DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateCoordinateSpace(DM, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateDoublet(MPI_Comm, PetscInt, PetscBool, PetscBool, PetscReal, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateBoxMesh(MPI_Comm, PetscInt, PetscBool, const PetscInt[], const PetscReal[], const PetscReal[], const DMBoundaryType[], PetscBool, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateBoxSurfaceMesh(MPI_Comm, PetscInt, const PetscInt[], const PetscReal[], const PetscReal[], PetscBool, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateSphereMesh(MPI_Comm, PetscInt, PetscBool, PetscReal, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateBallMesh(MPI_Comm, PetscInt, PetscReal, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateHexCylinderMesh(MPI_Comm, DMBoundaryType, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateTPSMesh(MPI_Comm, DMPlexTPSType, const PetscInt[], const DMBoundaryType[], PetscBool, PetscInt, PetscInt, PetscReal, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateWedgeCylinderMesh(MPI_Comm, PetscInt, PetscBool, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateWedgeBoxMesh(MPI_Comm, const PetscInt[], const PetscReal[], const PetscReal[], const DMBoundaryType[], PetscBool, PetscBool, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexExtrude(DM, PetscInt, PetscReal, PetscBool, PetscBool, const PetscReal[], const PetscReal[], DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateConeSection(DM, PetscSection *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexInflateToGeomModel(DM);

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCheck(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCheckSymmetry(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCheckSkeleton(DM, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCheckFaces(DM, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCheckGeometry(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCheckPointSF(DM, PetscSF, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCheckInterfaceCones(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCheckCellShape(DM, PetscBool, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeOrthogonalQuality(DM, PetscFV, PetscReal, Vec *, DMLabel *);

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexTriangleSetOptions(DM, const char *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexTetgenSetOptions(DM, const char *);

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateFromFile(MPI_Comm, const char[], const char[], PetscBool, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateExodus(MPI_Comm, PetscInt, PetscBool, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateExodusFromFile(MPI_Comm, const char[], PetscBool, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateCGNS(MPI_Comm, PetscInt, PetscBool, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateCGNSFromFile(MPI_Comm, const char[], PetscBool, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateGmsh(MPI_Comm, PetscViewer, PetscBool, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateGmshFromFile(MPI_Comm, const char[], PetscBool, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateFluent(MPI_Comm, PetscViewer, PetscBool, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateFluentFromFile(MPI_Comm, const char[], PetscBool, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateMedFromFile(MPI_Comm, const char[], PetscBool, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreatePLYFromFile(MPI_Comm, const char[], PetscBool, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateEGADSFromFile(MPI_Comm, const char[], DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateEGADSLiteFromFile(MPI_Comm, const char[], DM *);

extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerExodusIIOpen(MPI_Comm comm, const char name[], PetscFileMode type, PetscViewer *exo);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerExodusIIGetId(PetscViewer, int *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerExodusIISetOrder(PetscViewer, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscViewerExodusIIGetOrder(PetscViewer, PetscInt *);

 


extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateNeighborCSR(DM, PetscInt, PetscInt *, PetscInt **, PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetPartitioner(DM, PetscPartitioner *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetPartitioner(DM, PetscPartitioner);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreatePartitionerGraph(DM, PetscInt, PetscInt *, PetscInt **, PetscInt **, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexPartitionLabelInvert(DM, DMLabel, PetscSF, DMLabel);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexPartitionLabelClosure(DM, DMLabel);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexPartitionLabelAdjacency(DM, DMLabel);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexPartitionLabelPropagate(DM, DMLabel);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexPartitionLabelCreateSF(DM, DMLabel, PetscSF *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetPartitionBalance(DM, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetPartitionBalance(DM, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexIsDistributed(DM, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexDistribute(DM, PetscInt, PetscSF *, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexDistributeOverlap(DM, PetscInt, PetscSF *, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetOverlap(DM, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetOverlap(DM, DM, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexDistributeGetDefault(DM, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexDistributeSetDefault(DM, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexDistributeField(DM, PetscSF, PetscSection, Vec, PetscSection, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexDistributeFieldIS(DM, PetscSF, PetscSection, IS, PetscSection, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexDistributeData(DM, PetscSF, PetscSection, MPI_Datatype, void *, PetscSection, void **)  ;
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexRebalanceSharedPoints(DM, PetscInt, PetscBool, PetscBool, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMigrate(DM, PetscSF, DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetGatherDM(DM, PetscSF *, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetRedundantDM(DM, PetscSF *, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetAdjacencyUser(DM, PetscErrorCode (*)(DM, PetscInt, PetscInt *, PetscInt[], void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetAdjacencyUser(DM, PetscErrorCode (**)(DM, PetscInt, PetscInt *, PetscInt[], void *), void **);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetAdjacencyUseAnchors(DM, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetAdjacencyUseAnchors(DM, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetAdjacency(DM, PetscInt, PetscInt *, PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetMigrationSF(DM, PetscSF);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetMigrationSF(DM, PetscSF *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexDistributionSetName(DM, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexDistributionGetName(DM, const char *[]);
















 
typedef enum {
  DMPLEX_REORDER_DEFAULT_NOTSET = -1,
  DMPLEX_REORDER_DEFAULT_FALSE  = 0,
  DMPLEX_REORDER_DEFAULT_TRUE
} DMPlexReorderDefaultFlag;
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetOrdering(DM, MatOrderingType, DMLabel, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetOrdering1D(DM, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexPermute(DM, IS, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexReorderGetDefault(DM, DMPlexReorderDefaultFlag *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexReorderSetDefault(DM, DMPlexReorderDefaultFlag);

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateProcessSF(DM, PetscSF, IS *, PetscSF *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateTwoSidedProcessSF(DM, PetscSF, PetscSection, IS, PetscSection, IS, IS *, PetscSF *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexDistributeOwnership(DM, PetscSection, IS *, PetscSection, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreatePointSF(DM, PetscSF, PetscBool, PetscSF *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateOverlapLabel(DM, PetscInt, PetscSection, IS, PetscSection, IS, DMLabel *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateOverlapLabelFromLabels(DM, PetscInt, const DMLabel[], const PetscInt[], PetscInt, const DMLabel[], const PetscInt[], PetscSection, IS, PetscSection, IS, DMLabel *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateOverlapMigrationSF(DM, PetscSF, PetscSF *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexStratifyMigrationSF(DM, PetscSF, PetscSF *);

 
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateSubmesh(DM, DMLabel, PetscInt, PetscBool, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateHybridMesh(DM, DMLabel, DMLabel, PetscInt, DMLabel *, DMLabel *, DM *, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetSubpointMap(DM, DMLabel *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetSubpointMap(DM, DMLabel);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetSubpointIS(DM, IS *);

extern __attribute__((visibility("default"))) PetscErrorCode DMGetEnclosureRelation(DM, DM, DMEnclosureType *);
extern __attribute__((visibility("default"))) PetscErrorCode DMGetEnclosurePoint(DM, DM, DMEnclosureType, PetscInt, PetscInt *);

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexLabelComplete(DM, DMLabel);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexLabelCohesiveComplete(DM, DMLabel, DMLabel, PetscInt, PetscBool, DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexLabelAddCells(DM, DMLabel);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexLabelAddFaceCells(DM, DMLabel);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexLabelClearCells(DM, DMLabel);

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetRefinementLimit(DM, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetRefinementLimit(DM, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetRefinementUniform(DM, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetRefinementUniform(DM, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetRefinementFunction(DM, PetscErrorCode (**)(const PetscReal[], PetscReal *));
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetRefinementFunction(DM, PetscErrorCode (*)(const PetscReal[], PetscReal *));
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateCoarsePointIS(DM, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetRegularRefinement(DM, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetRegularRefinement(DM, PetscBool);

 
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetNumFaceVertices(DM, PetscInt, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetOrientedFace(DM, PetscInt, PetscInt, const PetscInt[], PetscInt, PetscInt[], PetscInt[], PetscInt[], PetscBool *);

 
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetMinRadius(DM, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetMinRadius(DM, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeProjection2Dto1D(PetscScalar[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeProjection3Dto1D(PetscScalar[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeProjection3Dto2D(PetscInt, PetscScalar[], PetscReal[]);

 
typedef struct _PetscGridHash *PetscGridHash;
extern __attribute__((visibility("default"))) PetscErrorCode    PetscGridHashCreate(MPI_Comm, PetscInt, const PetscScalar[], PetscGridHash *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscGridHashEnlarge(PetscGridHash, const PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscGridHashSetGrid(PetscGridHash, const PetscInt[], const PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscGridHashGetEnclosingBox(PetscGridHash, PetscInt, const PetscScalar[], PetscInt[], PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscGridHashDestroy(PetscGridHash *);
extern __attribute__((visibility("default"))) PetscErrorCode    DMPlexFindVertices(DM, Vec, PetscReal, IS *);

 
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeCellGeometryFVM(DM, PetscInt, PetscReal *, PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeGeometryFVM(DM, Vec *, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeGradientFVM(DM, PetscFV, Vec, Vec, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetDataFVM(DM, PetscFV, Vec *, Vec *, DM *);

 
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeGeometryFEM(DM, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetGeometryFVM(DM, Vec *, Vec *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetGradientDM(DM, PetscFV, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexInsertBoundaryValues(DM, PetscBool, Vec, PetscReal, Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexInsertTimeDerivativeBoundaryValues(DM, PetscBool, Vec, PetscReal, Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexInsertBoundaryValuesEssential(DM, PetscReal, PetscInt, PetscInt, const PetscInt[], DMLabel, PetscInt, const PetscInt[], PetscErrorCode (*)(PetscInt, PetscReal, const PetscReal[], PetscInt, PetscScalar *, void *), void *, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexInsertBoundaryValuesEssentialField(DM, PetscReal, Vec, PetscInt, PetscInt, const PetscInt[], DMLabel, PetscInt, const PetscInt[], void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void *, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexInsertBoundaryValuesEssentialBdField(DM, PetscReal, Vec, PetscInt, PetscInt, const PetscInt[], DMLabel, PetscInt, const PetscInt[], void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void *, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexInsertBoundaryValuesRiemann(DM, PetscReal, Vec, Vec, Vec, PetscInt, PetscInt, const PetscInt[], DMLabel, PetscInt, const PetscInt[], PetscErrorCode (*)(PetscReal, const PetscReal *, const PetscReal *, const PetscScalar *, PetscScalar *, void *), void *, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMarkBoundaryFaces(DM, PetscInt, DMLabel);

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateSection(DM, DMLabel[], const PetscInt[], const PetscInt[], PetscInt, const PetscInt[], const IS[], const IS[], IS, PetscSection *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetSubdomainSection(DM, PetscSection *);

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeCellGeometryAffineFEM(DM, PetscInt, PetscReal *, PetscReal *, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeCellGeometryFEM(DM, PetscInt, PetscQuadrature, PetscReal *, PetscReal *, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetCellCoordinates(DM, PetscInt, PetscBool *, PetscInt *, const PetscScalar *[], PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexRestoreCellCoordinates(DM, PetscInt, PetscBool *, PetscInt *, const PetscScalar *[], PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCoordinatesToReference(DM, PetscInt, PetscInt, const PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexReferenceToCoordinates(DM, PetscInt, PetscInt, const PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexShearGeometry(DM, DMDirection, PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexRemapGeometry(DM, PetscReal, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexVecGetClosure(DM, PetscSection, Vec, PetscInt, PetscInt *, PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexVecRestoreClosure(DM, PetscSection, Vec, PetscInt, PetscInt *, PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexVecSetClosure(DM, PetscSection, Vec, PetscInt, const PetscScalar[], InsertMode);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMatSetClosure(DM, PetscSection, PetscSection, Mat, PetscInt, const PetscScalar[], InsertMode);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMatSetClosureGeneral(DM, PetscSection, PetscSection, DM, PetscSection, PetscSection, Mat, PetscInt, const PetscScalar[], InsertMode);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetClosureIndices(DM, PetscSection, PetscSection, PetscInt, PetscBool, PetscInt *, PetscInt *[], PetscInt *, PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexRestoreClosureIndices(DM, PetscSection, PetscSection, PetscInt, PetscBool, PetscInt *, PetscInt *[], PetscInt *, PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMatSetClosureRefined(DM, PetscSection, PetscSection, DM, PetscSection, PetscSection, Mat, PetscInt, const PetscScalar[], InsertMode);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMatGetClosureIndicesRefined(DM, PetscSection, PetscSection, DM, PetscSection, PetscSection, PetscInt, PetscInt[], PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateClosureIndex(DM, PetscSection);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetClosurePermutationTensor(DM, PetscInt, PetscSection);

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexConstructGhostCells(DM, const char[], PetscInt *, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexConstructCohesiveCells(DM, DMLabel, DMLabel, DM *);

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetVTKCellHeight(DM, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetVTKCellHeight(DM, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexVTKWriteAll(PetscObject, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetGhostCellStratum(DM, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetSimplexOrBoxCells(DM, PetscInt, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexIsSimplex(DM, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetCellFields(DM, IS, Vec, Vec, Vec, PetscScalar **, PetscScalar **, PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexRestoreCellFields(DM, IS, Vec, Vec, Vec, PetscScalar **, PetscScalar **, PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetFaceFields(DM, PetscInt, PetscInt, Vec, Vec, Vec, Vec, Vec, PetscInt *, PetscScalar **, PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexRestoreFaceFields(DM, PetscInt, PetscInt, Vec, Vec, Vec, Vec, Vec, PetscInt *, PetscScalar **, PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetFaceGeometry(DM, PetscInt, PetscInt, Vec, Vec, PetscInt *, PetscFVFaceGeom **, PetscReal **);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexRestoreFaceGeometry(DM, PetscInt, PetscInt, Vec, Vec, PetscInt *, PetscFVFaceGeom **, PetscReal **);

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetScale(DM, PetscUnit, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetScale(DM, PetscUnit, PetscReal);

typedef struct {
  DM    dm;
  Vec   u;  
  Mat   J;  
  void *user;
} JacActionCtx;

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetMaxProjectionHeight(DM, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetMaxProjectionHeight(DM, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetActivePoint(DM, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetActivePoint(DM, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexProjectFieldLocal(DM, Vec, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscScalar[]), InsertMode, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeL2DiffLocal(DM, PetscReal, PetscErrorCode (**)(PetscInt, PetscReal, const PetscReal[], PetscInt, PetscScalar *, void *), void **, Vec, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeL2FieldDiff(DM, PetscReal, PetscErrorCode (**)(PetscInt, PetscReal, const PetscReal[], PetscInt, PetscScalar *, void *), void **, Vec, PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeL2DiffVec(DM, PetscReal, PetscErrorCode (**)(PetscInt, PetscReal, const PetscReal[], PetscInt, PetscScalar *, void *), void **, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeCellwiseIntegralFEM(DM, Vec, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeIntegralFEM(DM, Vec, PetscScalar *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeBdIntegral(DM, Vec, DMLabel, PetscInt, const PetscInt[], void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscScalar *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeInterpolatorNested(DM, DM, PetscBool, Mat, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeInterpolatorGeneral(DM, DM, Mat, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeClementInterpolant(DM, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeGradientClementInterpolant(DM, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeInjectorFEM(DM, DM, VecScatter *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeMassMatrixNested(DM, DM, Mat, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeMassMatrixGeneral(DM, DM, Mat, void *);

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateRigidBody(DM, PetscInt, MatNullSpace *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateRigidBodies(DM, PetscInt, DMLabel, const PetscInt[], const PetscInt[], MatNullSpace *);

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetSNESLocalFEM(DM, void *, void *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSNESComputeBoundaryFEM(DM, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSNESComputeResidualFEM(DM, Vec, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSNESComputeJacobianFEM(DM, Vec, Mat, Mat, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeBdResidualSingle(DM, PetscReal, PetscWeakForm, PetscFormKey, Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeBdJacobianSingle(DM, PetscReal, PetscWeakForm, DMLabel, PetscInt, const PetscInt[], PetscInt, Vec, Vec, PetscReal, Mat, Mat);

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexTSComputeBoundary(DM, PetscReal, Vec, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexTSComputeRHSFunctionFVM(DM, PetscReal, Vec, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexTSComputeIFunctionFEM(DM, PetscReal, Vec, Vec, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexTSComputeIJacobianFEM(DM, PetscReal, Vec, Vec, PetscReal, Mat, Mat, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexTSComputeRHSFunctionFEM(DM, PetscReal, Vec, Vec, void *);

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeRHSFunctionFVM(DM, PetscReal, Vec, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexReconstructGradientsFVM(DM, Vec, Vec);

 
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetAnchors(DM, PetscSection *, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetAnchors(DM, PetscSection, IS);
 
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetReferenceTree(DM, DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetReferenceTree(DM, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexReferenceTreeGetChildSymmetry(DM, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateDefaultReferenceTree(MPI_Comm, PetscInt, PetscBool, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetTree(DM, PetscSection, PetscInt[], PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetTree(DM, PetscSection *, PetscInt *[], PetscInt *[], PetscSection *, PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetTreeParent(DM, PetscInt, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetTreeChildren(DM, PetscInt, PetscInt *, const PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexTreeRefineCell(DM, PetscInt, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexComputeInjectorReferenceTree(DM, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexTransferVecTree(DM, Vec, DM, Vec, PetscSF, PetscSF, PetscInt *, PetscInt *, PetscBool, PetscReal);

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMonitorThroughput(DM, void *);

 
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateGlobalToNaturalSF(DM, PetscSection, PetscSF, PetscSF *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSetGlobalToNaturalSF(DM, PetscSF);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetGlobalToNaturalSF(DM, PetscSF *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGlobalToNaturalBegin(DM, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGlobalToNaturalEnd(DM, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexNaturalToGlobalBegin(DM, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexNaturalToGlobalEnd(DM, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateNaturalVector(DM, Vec *);

 
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexAdapt(DM, Vec, const char[], DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSnapToGeomModel(DM, PetscInt, PetscInt, const PetscScalar[], PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricSetFromOptions(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricSetIsotropic(DM, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricIsIsotropic(DM, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricSetUniform(DM, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricIsUniform(DM, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricSetRestrictAnisotropyFirst(DM, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricRestrictAnisotropyFirst(DM, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricSetNoInsertion(DM, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricNoInsertion(DM, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricSetNoSwapping(DM, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricNoSwapping(DM, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricSetNoMovement(DM, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricNoMovement(DM, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricSetNoSurf(DM, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricNoSurf(DM, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricSetMinimumMagnitude(DM, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricGetMinimumMagnitude(DM, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricSetMaximumMagnitude(DM, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricGetMaximumMagnitude(DM, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricSetMaximumAnisotropy(DM, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricGetMaximumAnisotropy(DM, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricSetTargetComplexity(DM, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricGetTargetComplexity(DM, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricSetNormalizationOrder(DM, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricGetNormalizationOrder(DM, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricSetGradationFactor(DM, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricGetGradationFactor(DM, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricSetHausdorffNumber(DM, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricGetHausdorffNumber(DM, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricSetVerbosity(DM, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricGetVerbosity(DM, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricSetNumIterations(DM, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricGetNumIterations(DM, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricCreate(DM, PetscInt, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricCreateUniform(DM, PetscInt, PetscReal, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricCreateIsotropic(DM, PetscInt, Vec, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricDeterminantCreate(DM, PetscInt, Vec *, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricEnforceSPD(DM, Vec, PetscBool, PetscBool, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricNormalize(DM, Vec, PetscBool, PetscBool, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricAverage(DM, PetscInt, PetscReal[], Vec[], Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricAverage2(DM, Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricAverage3(DM, Vec, Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricIntersection(DM, PetscInt, Vec[], Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricIntersection2(DM, Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexMetricIntersection3(DM, Vec, Vec, Vec, Vec);

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGlobalToLocalBasis(DM, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexLocalToGlobalBasis(DM, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCreateBasisRotation(DM, PetscReal, PetscReal, PetscReal);

 



extern __attribute__((visibility("default"))) PetscErrorCode DMPlexTopologyView(DM, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCoordinatesView(DM, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexLabelsView(DM, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSectionView(DM, PetscViewer, DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGlobalVectorView(DM, PetscViewer, DM, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexLocalVectorView(DM, PetscViewer, DM, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexVecView1D(DM, PetscInt, Vec[], PetscViewer);

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexTopologyLoad(DM, PetscViewer, PetscSF *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexCoordinatesLoad(DM, PetscViewer, PetscSF);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexLabelsLoad(DM, PetscViewer, PetscSF);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexSectionLoad(DM, PetscViewer, DM, PetscSF, PetscSF *, PetscSF *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGlobalVectorLoad(DM, PetscViewer, DM, PetscSF, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexLocalVectorLoad(DM, PetscViewer, DM, PetscSF, Vec);

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexGetLocalOffsets(DM, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt *, PetscInt *, PetscInt *, PetscInt *, PetscInt **);

 
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexPointQueueCreate(PetscInt, DMPlexPointQueue *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexPointQueueDestroy(DMPlexPointQueue *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexPointQueueEnsureSize(DMPlexPointQueue);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexPointQueueEnqueue(DMPlexPointQueue, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexPointQueueDequeue(DMPlexPointQueue, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexPointQueueFront(DMPlexPointQueue, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexPointQueueBack(DMPlexPointQueue, PetscInt *);
extern __attribute__((visibility("default"))) PetscBool      DMPlexPointQueueEmpty(DMPlexPointQueue);
extern __attribute__((visibility("default"))) PetscErrorCode DMPlexPointQueueEmptyCollective(PetscObject, DMPlexPointQueue, PetscBool *);

# 19 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdmredundant.h" 1
 





extern __attribute__((visibility("default"))) PetscErrorCode DMRedundantCreate(MPI_Comm, PetscMPIInt, PetscInt, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMRedundantSetSize(DM, PetscMPIInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMRedundantGetSize(DM, PetscMPIInt *, PetscInt *);

# 20 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdmshell.h" 1





extern __attribute__((visibility("default"))) PetscErrorCode DMShellCreate(MPI_Comm, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMShellSetContext(DM, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMShellGetContext(DM, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMShellSetDestroyContext(DM, PetscErrorCode (*)(void *));
extern __attribute__((visibility("default"))) PetscErrorCode DMShellSetMatrix(DM, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode DMShellSetGlobalVector(DM, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMShellGetGlobalVector(DM, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMShellSetLocalVector(DM, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMShellSetCreateGlobalVector(DM, PetscErrorCode (*)(DM, Vec *));
extern __attribute__((visibility("default"))) PetscErrorCode DMShellSetCreateLocalVector(DM, PetscErrorCode (*)(DM, Vec *));
extern __attribute__((visibility("default"))) PetscErrorCode DMShellSetGlobalToLocal(DM, PetscErrorCode (*)(DM, Vec, InsertMode, Vec), PetscErrorCode (*)(DM, Vec, InsertMode, Vec));
extern __attribute__((visibility("default"))) PetscErrorCode DMShellSetGlobalToLocalVecScatter(DM, VecScatter);
extern __attribute__((visibility("default"))) PetscErrorCode DMShellSetLocalToGlobal(DM, PetscErrorCode (*)(DM, Vec, InsertMode, Vec), PetscErrorCode (*)(DM, Vec, InsertMode, Vec));
extern __attribute__((visibility("default"))) PetscErrorCode DMShellSetLocalToGlobalVecScatter(DM, VecScatter);
extern __attribute__((visibility("default"))) PetscErrorCode DMShellSetLocalToLocal(DM, PetscErrorCode (*)(DM, Vec, InsertMode, Vec), PetscErrorCode (*)(DM, Vec, InsertMode, Vec));
extern __attribute__((visibility("default"))) PetscErrorCode DMShellSetLocalToLocalVecScatter(DM, VecScatter);
extern __attribute__((visibility("default"))) PetscErrorCode DMShellSetCreateMatrix(DM, PetscErrorCode (*)(DM, Mat *));
extern __attribute__((visibility("default"))) PetscErrorCode DMShellSetCoarsen(DM, PetscErrorCode (*)(DM, MPI_Comm, DM *));
extern __attribute__((visibility("default"))) PetscErrorCode DMShellGetCoarsen(DM, PetscErrorCode (**)(DM, MPI_Comm, DM *));
extern __attribute__((visibility("default"))) PetscErrorCode DMShellSetRefine(DM, PetscErrorCode (*)(DM, MPI_Comm, DM *));
extern __attribute__((visibility("default"))) PetscErrorCode DMShellGetRefine(DM, PetscErrorCode (**)(DM, MPI_Comm, DM *));
extern __attribute__((visibility("default"))) PetscErrorCode DMShellSetCreateInterpolation(DM, PetscErrorCode (*)(DM, DM, Mat *, Vec *));
extern __attribute__((visibility("default"))) PetscErrorCode DMShellGetCreateInterpolation(DM, PetscErrorCode (**)(DM, DM, Mat *, Vec *));
extern __attribute__((visibility("default"))) PetscErrorCode DMShellSetCreateRestriction(DM, PetscErrorCode (*)(DM, DM, Mat *));
extern __attribute__((visibility("default"))) PetscErrorCode DMShellGetCreateRestriction(DM, PetscErrorCode (**)(DM, DM, Mat *));
extern __attribute__((visibility("default"))) PetscErrorCode DMShellSetCreateInjection(DM, PetscErrorCode (*)(DM, DM, Mat *));
extern __attribute__((visibility("default"))) PetscErrorCode DMShellGetCreateInjection(DM, PetscErrorCode (**)(DM, DM, Mat *));
extern __attribute__((visibility("default"))) PetscErrorCode DMShellSetCreateFieldDecomposition(DM, PetscErrorCode (*)(DM, PetscInt *, char ***, IS **, DM **));
extern __attribute__((visibility("default"))) PetscErrorCode DMShellSetCreateDomainDecomposition(DM, PetscErrorCode (*)(DM, PetscInt *, char ***, IS **, IS **, DM **));
extern __attribute__((visibility("default"))) PetscErrorCode DMShellSetCreateDomainDecompositionScatters(DM, PetscErrorCode (*)(DM, PetscInt, DM *, VecScatter **, VecScatter **, VecScatter **));
extern __attribute__((visibility("default"))) PetscErrorCode DMShellSetCreateSubDM(DM, PetscErrorCode (*)(DM, PetscInt, const PetscInt[], IS *, DM *));
extern __attribute__((visibility("default"))) PetscErrorCode DMShellGetCreateSubDM(DM, PetscErrorCode (**)(DM, PetscInt, const PetscInt[], IS *, DM *));
extern __attribute__((visibility("default"))) PetscErrorCode DMGlobalToLocalBeginDefaultShell(DM, Vec, InsertMode, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMGlobalToLocalEndDefaultShell(DM, Vec, InsertMode, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMLocalToGlobalBeginDefaultShell(DM, Vec, InsertMode, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMLocalToGlobalEndDefaultShell(DM, Vec, InsertMode, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMLocalToLocalBeginDefaultShell(DM, Vec, InsertMode, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMLocalToLocalEndDefaultShell(DM, Vec, InsertMode, Vec);

# 21 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdmsliced.h" 1
 





extern __attribute__((visibility("default"))) PetscErrorCode DMSlicedCreate(MPI_Comm, PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscInt[], DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSlicedSetPreallocation(DM, PetscInt, const PetscInt[], PetscInt, const PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMSlicedSetBlockFills(DM, const PetscInt *, const PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSlicedSetGhosts(DM, PetscInt, PetscInt, PetscInt, const PetscInt[]);

# 22 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdmswarm.h" 1






 














 
typedef enum {
  DMSWARM_BASIC = 0,
  DMSWARM_PIC
} DMSwarmType;

typedef enum {
  DMSWARM_MIGRATE_BASIC = 0,
  DMSWARM_MIGRATE_DMCELLNSCATTER,
  DMSWARM_MIGRATE_DMCELLEXACT,
  DMSWARM_MIGRATE_USER
} DMSwarmMigrateType;

typedef enum {
  DMSWARM_COLLECT_BASIC = 0,
  DMSWARM_COLLECT_DMDABOUNDINGBOX,
  DMSWARM_COLLECT_GENERAL,
  DMSWARM_COLLECT_USER
} DMSwarmCollectType;
















 
typedef enum {
  DMSWARMPIC_LAYOUT_REGULAR = 0,
  DMSWARMPIC_LAYOUT_GAUSS,
  DMSWARMPIC_LAYOUT_SUBDIVISION
} DMSwarmPICLayoutType;

extern __attribute__((visibility("default"))) const char *DMSwarmTypeNames[];
extern __attribute__((visibility("default"))) const char *DMSwarmMigrateTypeNames[];
extern __attribute__((visibility("default"))) const char *DMSwarmCollectTypeNames[];

extern __attribute__((visibility("default"))) const char DMSwarmField_pid[];
extern __attribute__((visibility("default"))) const char DMSwarmField_rank[];
extern __attribute__((visibility("default"))) const char DMSwarmPICField_coor[];
extern __attribute__((visibility("default"))) const char DMSwarmPICField_cellid[];

extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmCreateGlobalVectorFromField(DM, const char[], Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmDestroyGlobalVectorFromField(DM, const char[], Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmCreateLocalVectorFromField(DM, const char[], Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmDestroyLocalVectorFromField(DM, const char[], Vec *);

extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmInitializeFieldRegister(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmFinalizeFieldRegister(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmSetLocalSizes(DM, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmRegisterPetscDatatypeField(DM, const char[], PetscInt, PetscDataType);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmRegisterUserStructField(DM, const char[], size_t);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmRegisterUserDatatypeField(DM, const char[], size_t, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmGetField(DM, const char[], PetscInt *, PetscDataType *, void **);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmRestoreField(DM, const char[], PetscInt *, PetscDataType *, void **);

extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmVectorDefineField(DM, const char[]);

extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmAddPoint(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmAddNPoints(DM, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmRemovePoint(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmRemovePointAtIndex(DM, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmCopyPoint(DM dm, PetscInt, PetscInt);

extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmGetLocalSize(DM, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmGetSize(DM, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmMigrate(DM, PetscBool);

extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmCollectViewCreate(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmCollectViewDestroy(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmSetCellDM(DM, DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmGetCellDM(DM, DM *);

extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmSetType(DM, DMSwarmType);

extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmSetPointsUniformCoordinates(DM, PetscReal *, PetscReal *, PetscInt *, InsertMode);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmSetPointCoordinates(DM, PetscInt, PetscReal *, PetscBool, InsertMode);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmInsertPointsUsingCellDM(DM, DMSwarmPICLayoutType, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmSetPointCoordinatesCellwise(DM, PetscInt, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmSetPointCoordinatesRandom(DM, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmViewFieldsXDMF(DM, const char *, PetscInt, const char **);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmViewXDMF(DM, const char *);

extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmSortGetAccess(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmSortRestoreAccess(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmSortGetPointsPerCell(DM, PetscInt, PetscInt *, PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmSortGetNumberOfPointsPerCell(DM, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmSortGetIsValid(DM, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmSortGetSizes(DM, PetscInt *, PetscInt *);

extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmProjectFields(DM, PetscInt, const char **, Vec **, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmCreateMassMatrixSquare(DM, DM, Mat *);

extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmGetCellSwarm(DM, PetscInt, DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmRestoreCellSwarm(DM, PetscInt, DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmGetNumSpecies(DM, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmSetNumSpecies(DM, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmGetCoordinateFunction(DM, PetscErrorCode (**)(PetscInt, PetscReal, const PetscReal[], PetscInt, PetscScalar[], void *));
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmSetCoordinateFunction(DM, PetscErrorCode (*)(PetscInt, PetscReal, const PetscReal[], PetscInt, PetscScalar[], void *));
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmGetVelocityFunction(DM, PetscErrorCode (**)(PetscInt, PetscReal, const PetscReal[], PetscInt, PetscScalar[], void *));
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmSetVelocityFunction(DM, PetscErrorCode (*)(PetscInt, PetscReal, const PetscReal[], PetscInt, PetscScalar[], void *));
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmComputeLocalSize(DM, PetscInt, PetscProbFunc);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmComputeLocalSizeFromOptions(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmInitializeCoordinates(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmInitializeVelocities(DM, PetscProbFunc, const PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMSwarmInitializeVelocitiesFromOptions(DM, const PetscReal[]);

# 23 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdmstag.h" 1



# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdmproduct.h" 1





extern __attribute__((visibility("default"))) PetscErrorCode DMCreate_Product(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMProductGetDM(DM, PetscInt, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMProductSetDimensionIndex(DM, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMProductSetDM(DM, PetscInt, DM);

# 6 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscdmstag.h" 2

 









 


 
typedef enum {
  DMSTAG_NULL_LOCATION = 0,
  DMSTAG_BACK_DOWN_LEFT,
  DMSTAG_BACK_DOWN,
  DMSTAG_BACK_DOWN_RIGHT,
  DMSTAG_BACK_LEFT,
  DMSTAG_BACK,
  DMSTAG_BACK_RIGHT,
  DMSTAG_BACK_UP_LEFT,
  DMSTAG_BACK_UP,
  DMSTAG_BACK_UP_RIGHT,
  DMSTAG_DOWN_LEFT,
  DMSTAG_DOWN,
  DMSTAG_DOWN_RIGHT,
  DMSTAG_LEFT,
  DMSTAG_ELEMENT,
  DMSTAG_RIGHT,
  DMSTAG_UP_LEFT,
  DMSTAG_UP,
  DMSTAG_UP_RIGHT,
  DMSTAG_FRONT_DOWN_LEFT,
  DMSTAG_FRONT_DOWN,
  DMSTAG_FRONT_DOWN_RIGHT,
  DMSTAG_FRONT_LEFT,
  DMSTAG_FRONT,
  DMSTAG_FRONT_RIGHT,
  DMSTAG_FRONT_UP_LEFT,
  DMSTAG_FRONT_UP,
  DMSTAG_FRONT_UP_RIGHT
} DMStagStencilLocation;
extern __attribute__((visibility("default"))) const char *const DMStagStencilLocations[];  














 
typedef struct {
  DMStagStencilLocation loc;
  PetscInt              i, j, k, c;
} DMStagStencil;







 

typedef enum {
  DMSTAG_STENCIL_NONE = 0,
  DMSTAG_STENCIL_STAR,
  DMSTAG_STENCIL_BOX
} DMStagStencilType;
extern __attribute__((visibility("default"))) const char *const DMStagStencilTypes[];  

extern __attribute__((visibility("default"))) PetscErrorCode DMCreate_Stag(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagCreate1d(MPI_Comm, DMBoundaryType, PetscInt, PetscInt, PetscInt, DMStagStencilType, PetscInt, const PetscInt[], DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagCreate2d(MPI_Comm, DMBoundaryType, DMBoundaryType, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, DMStagStencilType, PetscInt, const PetscInt[], const PetscInt[], DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagCreate3d(MPI_Comm, DMBoundaryType, DMBoundaryType, DMBoundaryType, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, DMStagStencilType, PetscInt, const PetscInt[], const PetscInt[], const PetscInt[], DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagCreateCompatibleDMStag(DM, PetscInt, PetscInt, PetscInt, PetscInt, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagCreateISFromStencils(DM, PetscInt, DMStagStencil *, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagGetBoundaryTypes(DM, DMBoundaryType *, DMBoundaryType *, DMBoundaryType *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagGetCorners(DM, PetscInt *, PetscInt *, PetscInt *, PetscInt *, PetscInt *, PetscInt *, PetscInt *, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagGetDOF(DM, PetscInt *, PetscInt *, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagGetEntries(DM, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagGetEntriesLocal(DM, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagGetEntriesPerElement(DM, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagGetGhostCorners(DM, PetscInt *, PetscInt *, PetscInt *, PetscInt *, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagGetGlobalSizes(DM, PetscInt *, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagGetIsFirstRank(DM, PetscBool *, PetscBool *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagGetIsLastRank(DM, PetscBool *, PetscBool *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagGetLocalSizes(DM, PetscInt *, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagGetLocationDOF(DM, DMStagStencilLocation, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagGetLocationSlot(DM, DMStagStencilLocation, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagGetNumRanks(DM, PetscInt *, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagGetOwnershipRanges(DM, const PetscInt **, const PetscInt **, const PetscInt **);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagGetProductCoordinateArrays(DM, void *, void *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagGetProductCoordinateArraysRead(DM, void *, void *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagGetProductCoordinateLocationSlot(DM, DMStagStencilLocation, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagGetStencilType(DM, DMStagStencilType *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagGetStencilWidth(DM, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagMatGetValuesStencil(DM, Mat, PetscInt, const DMStagStencil *, PetscInt, const DMStagStencil *, PetscScalar *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagMatSetValuesStencil(DM, Mat, PetscInt, const DMStagStencil *, PetscInt, const DMStagStencil *, const PetscScalar *, InsertMode);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagMigrateVec(DM, Vec, DM, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagPopulateLocalToGlobalInjective(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagRestoreProductCoordinateArrays(DM, void *, void *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagRestoreProductCoordinateArraysRead(DM, void *, void *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagRestrictSimple(DM, Vec, DM, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagSetBoundaryTypes(DM, DMBoundaryType, DMBoundaryType, DMBoundaryType);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagSetCoordinateDMType(DM, DMType);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagSetDOF(DM, PetscInt, PetscInt, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagSetGlobalSizes(DM, PetscInt, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagSetNumRanks(DM, PetscInt, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagSetOwnershipRanges(DM, PetscInt const *, PetscInt const *, PetscInt const *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagSetStencilType(DM, DMStagStencilType);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagSetStencilWidth(DM, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagSetUniformCoordinates(DM, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagSetUniformCoordinatesExplicit(DM, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagSetUniformCoordinatesProduct(DM, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagStencilToIndexLocal(DM, PetscInt, PetscInt, const DMStagStencil *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagVecGetArray(DM, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagVecGetArrayRead(DM, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagVecGetValuesStencil(DM, Vec, PetscInt, const DMStagStencil *, PetscScalar *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagVecRestoreArray(DM, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagVecRestoreArrayRead(DM, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagVecSetValuesStencil(DM, Vec, PetscInt, const DMStagStencil *, const PetscScalar *, InsertMode);
extern __attribute__((visibility("default"))) PetscErrorCode DMStagVecSplitToDMDA(DM, Vec, DMStagStencilLocation, PetscInt, DM *, Vec *);

__attribute__((deprecated)) static inline PetscErrorCode DMStagGet1dCoordinateArraysDOFRead(DM dm, void *ax, void *ay, void *az)
{
  return DMStagGetProductCoordinateArraysRead(dm, ax, ay, az);
}
__attribute__((deprecated)) static inline PetscErrorCode DMStagGet1dCoordinateLocationSlot(DM dm, DMStagStencilLocation loc, PetscInt *s)
{
  return DMStagGetProductCoordinateLocationSlot(dm, loc, s);
}
__attribute__((deprecated)) static inline PetscErrorCode DMStagGetGhostType(DM dm, DMStagStencilType *s)
{
  return DMStagGetStencilType(dm, s);
}
__attribute__((deprecated)) static inline PetscErrorCode DMStagRestore1dCoordinateArraysDOFRead(DM dm, void *ax, void *ay, void *az)
{
  return DMStagRestoreProductCoordinateArraysRead(dm, ax, ay, az);
}
__attribute__((deprecated)) static inline PetscErrorCode DMStagSetGhostType(DM dm, DMStagStencilType *s)
{
  return DMStagGetStencilType(dm, s);
}
__attribute__((deprecated)) static inline PetscErrorCode DMStagVecGetArrayDOF(DM dm, Vec v, void *a)
{
  return DMStagVecGetArray(dm, v, a);
}
__attribute__((deprecated)) static inline PetscErrorCode DMStagVecGetArrayDOFRead(DM dm, Vec v, void *a)
{
  return DMStagVecGetArrayRead(dm, v, a);
}
__attribute__((deprecated)) static inline PetscErrorCode DMStagVecRestoreArrayDOF(DM dm, Vec v, void *a)
{
  return DMStagVecRestoreArray(dm, v, a);
}
__attribute__((deprecated)) static inline PetscErrorCode DMStagVecRestoreArrayDOFRead(DM dm, Vec v, void *a)
{
  return DMStagVecRestoreArrayRead(dm, v, a);
}

# 24 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 2

# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscds.h" 1


 







 

extern __attribute__((visibility("default"))) PetscClassId PETSCWEAKFORM_CLASSID;

extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormCreate(MPI_Comm, PetscWeakForm *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormDestroy(PetscWeakForm *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormView(PetscWeakForm, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormCopy(PetscWeakForm, PetscWeakForm);
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormClear(PetscWeakForm);
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormGetNumFields(PetscWeakForm, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormSetNumFields(PetscWeakForm, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscFormKeySort(PetscInt, PetscFormKey[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormRewriteKeys(PetscWeakForm, DMLabel, PetscInt, const PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormReplaceLabel(PetscWeakForm, DMLabel);
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormClearIndex(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscWeakFormKind, PetscInt);

extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormGetObjective(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt *, void (***)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormAddObjective(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormSetObjective(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormGetIndexObjective(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormSetIndexObjective(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormGetResidual(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt *, void (***)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt *, void (***)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormAddResidual(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormSetResidual(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormSetIndexResidual(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormHasJacobian(PetscWeakForm, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormGetJacobian(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt *, void (***)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt *, void (***)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt *, void (***)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt *, void (***)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormAddJacobian(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormSetJacobian(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormSetIndexJacobian(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormHasJacobianPreconditioner(PetscWeakForm, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormGetJacobianPreconditioner(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt *, void (***)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt *, void (***)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt *, void (***)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt *, void (***)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormAddJacobianPreconditioner(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormSetJacobianPreconditioner(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormSetIndexJacobianPreconditioner(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormHasDynamicJacobian(PetscWeakForm, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormGetDynamicJacobian(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt *, void (***)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt *, void (***)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt *, void (***)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt *, void (***)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormAddDynamicJacobian(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormSetDynamicJacobian(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormSetIndexDynamicJacobian(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormGetBdResidual(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt *, void (***)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt *, void (***)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormAddBdResidual(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormSetBdResidual(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormSetIndexBdResidual(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormHasBdJacobian(PetscWeakForm, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormGetBdJacobian(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt *, void (***)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt *, void (***)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt *, void (***)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt *, void (***)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormAddBdJacobian(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormSetBdJacobian(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormSetIndexBdJacobian(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormHasBdJacobianPreconditioner(PetscWeakForm, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormGetBdJacobianPreconditioner(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt *, void (***)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt *, void (***)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt *, void (***)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt *, void (***)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormAddBdJacobianPreconditioner(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormSetBdJacobianPreconditioner(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormSetIndexBdJacobianPreconditioner(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormGetRiemannSolver(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt *, void (***)(PetscInt, PetscInt, const PetscReal[], const PetscReal[], const PetscScalar[], const PetscScalar[], PetscInt, const PetscScalar[], PetscScalar[], void *));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormSetRiemannSolver(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, void (**)(PetscInt, PetscInt, const PetscReal[], const PetscReal[], const PetscScalar[], const PetscScalar[], PetscInt, const PetscScalar[], PetscScalar[], void *));
extern __attribute__((visibility("default"))) PetscErrorCode PetscWeakFormSetIndexRiemannSolver(PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, void (*)(PetscInt, PetscInt, const PetscReal[], const PetscReal[], const PetscScalar[], const PetscScalar[], PetscInt, const PetscScalar[], PetscScalar[], void *));

extern __attribute__((visibility("default"))) PetscErrorCode PetscDSInitializePackage(void);

extern __attribute__((visibility("default"))) PetscClassId PETSCDS_CLASSID;







 
typedef const char *PetscDSType;


typedef enum {
  PETSC_DISC_NONE,
  PETSC_DISC_FE,
  PETSC_DISC_FV
} PetscDiscType;

typedef void (*PetscPointFunc)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]);
typedef void (*PetscPointJac)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]);
typedef void (*PetscBdPointFunc)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]);
typedef void (*PetscBdPointJac)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]);
typedef void (*PetscRiemannFunc)(PetscInt, PetscInt, const PetscReal[], const PetscReal[], const PetscScalar[], const PetscScalar[], PetscInt, const PetscScalar[], PetscScalar[], void *);
typedef PetscErrorCode (*PetscSimplePointFunc)(PetscInt, PetscReal, const PetscReal[], PetscInt, PetscScalar[], void *);

extern __attribute__((visibility("default"))) PetscFunctionList PetscDSList;
extern __attribute__((visibility("default"))) PetscErrorCode    PetscDSCreate(MPI_Comm, PetscDS *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscDSDestroy(PetscDS *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscDSSetType(PetscDS, PetscDSType);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscDSGetType(PetscDS, PetscDSType *);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscDSSetUp(PetscDS);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscDSSetFromOptions(PetscDS);
extern __attribute__((visibility("default"))) PetscErrorCode    PetscDSViewFromOptions(PetscDS, PetscObject, const char[]);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDSView(PetscDS, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSRegister(const char[], PetscErrorCode (*)(PetscDS));
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSRegisterDestroy(void);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetHeightSubspace(PetscDS, PetscInt, PetscDS *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetSpatialDimension(PetscDS, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetCoordinateDimension(PetscDS, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSSetCoordinateDimension(PetscDS, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSIsCohesive(PetscDS, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetNumCohesive(PetscDS, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetCohesive(PetscDS, PetscInt, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSSetCohesive(PetscDS, PetscInt, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetNumFields(PetscDS, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetTotalDimension(PetscDS, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetTotalComponents(PetscDS, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetFieldIndex(PetscDS, PetscObject, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetFieldSize(PetscDS, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetFieldOffset(PetscDS, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetFieldOffsetCohesive(PetscDS, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetDimensions(PetscDS, PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetComponents(PetscDS, PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetComponentOffset(PetscDS, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetComponentOffsets(PetscDS, PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetComponentDerivativeOffsets(PetscDS, PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetComponentOffsetsCohesive(PetscDS, PetscInt, PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetComponentDerivativeOffsetsCohesive(PetscDS, PetscInt, PetscInt *[]);

extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetWeakForm(PetscDS, PetscWeakForm *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSSetWeakForm(PetscDS, PetscWeakForm);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetDiscretization(PetscDS, PetscInt, PetscObject *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSSetDiscretization(PetscDS, PetscInt, PetscObject);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSAddDiscretization(PetscDS, PetscObject);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetQuadrature(PetscDS, PetscQuadrature *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetImplicit(PetscDS, PetscInt, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSSetImplicit(PetscDS, PetscInt, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetJetDegree(PetscDS, PetscInt, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSSetJetDegree(PetscDS, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetConstants(PetscDS, PetscInt *, const PetscScalar *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSSetConstants(PetscDS, PetscInt, PetscScalar[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetObjective(PetscDS, PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSSetObjective(PetscDS, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetResidual(PetscDS, PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSSetResidual(PetscDS, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetRHSResidual(PetscDS, PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSSetRHSResidual(PetscDS, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSHasJacobian(PetscDS, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetJacobian(PetscDS, PetscInt, PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSSetJacobian(PetscDS, PetscInt, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSUseJacobianPreconditioner(PetscDS, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSHasJacobianPreconditioner(PetscDS, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetJacobianPreconditioner(PetscDS, PetscInt, PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSSetJacobianPreconditioner(PetscDS, PetscInt, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSHasDynamicJacobian(PetscDS, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetDynamicJacobian(PetscDS, PetscInt, PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSSetDynamicJacobian(PetscDS, PetscInt, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetRiemannSolver(PetscDS, PetscInt, void (**)(PetscInt, PetscInt, const PetscReal[], const PetscReal[], const PetscScalar[], const PetscScalar[], PetscInt, const PetscScalar[], PetscScalar[], void *));
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSSetRiemannSolver(PetscDS, PetscInt, void (*)(PetscInt, PetscInt, const PetscReal[], const PetscReal[], const PetscScalar[], const PetscScalar[], PetscInt, const PetscScalar[], PetscScalar[], void *));
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetUpdate(PetscDS, PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSSetUpdate(PetscDS, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetContext(PetscDS, PetscInt, void *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSSetContext(PetscDS, PetscInt, void *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetBdResidual(PetscDS, PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSSetBdResidual(PetscDS, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSHasBdJacobian(PetscDS, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetBdJacobian(PetscDS, PetscInt, PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSSetBdJacobian(PetscDS, PetscInt, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSHasBdJacobianPreconditioner(PetscDS, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetBdJacobianPreconditioner(PetscDS, PetscInt, PetscInt, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSSetBdJacobianPreconditioner(PetscDS, PetscInt, PetscInt, void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), void (*)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, PetscReal, const PetscReal[], const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]));
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetExactSolution(PetscDS, PetscInt, PetscErrorCode (**)(PetscInt, PetscReal, const PetscReal[], PetscInt, PetscScalar[], void *), void **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSSetExactSolution(PetscDS, PetscInt, PetscErrorCode (*)(PetscInt, PetscReal, const PetscReal[], PetscInt, PetscScalar[], void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetExactSolutionTimeDerivative(PetscDS, PetscInt, PetscErrorCode (**)(PetscInt, PetscReal, const PetscReal[], PetscInt, PetscScalar[], void *), void **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSSetExactSolutionTimeDerivative(PetscDS, PetscInt, PetscErrorCode (*)(PetscInt, PetscReal, const PetscReal[], PetscInt, PetscScalar[], void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetTabulation(PetscDS, PetscTabulation *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetFaceTabulation(PetscDS, PetscTabulation *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetEvaluationArrays(PetscDS, PetscScalar **, PetscScalar **, PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetWeakFormArrays(PetscDS, PetscScalar **, PetscScalar **, PetscScalar **, PetscScalar **, PetscScalar **, PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetWorkspace(PetscDS, PetscReal **, PetscScalar **, PetscScalar **, PetscScalar **, PetscScalar **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSCopyConstants(PetscDS, PetscDS);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSCopyExactSolutions(PetscDS, PetscDS);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSCopyEquations(PetscDS, PetscDS);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSSelectDiscretizations(PetscDS, PetscInt, const PetscInt[], PetscDS);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSSelectEquations(PetscDS, PetscInt, const PetscInt[], PetscDS);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSAddBoundary(PetscDS, DMBoundaryConditionType, const char[], DMLabel, PetscInt, const PetscInt[], PetscInt, PetscInt, const PetscInt[], void (*)(void), void (*)(void), void *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSAddBoundaryByName(PetscDS, DMBoundaryConditionType, const char[], const char[], PetscInt, const PetscInt[], PetscInt, PetscInt, const PetscInt[], void (*)(void), void (*)(void), void *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSUpdateBoundary(PetscDS, PetscInt, DMBoundaryConditionType, const char[], DMLabel, PetscInt, const PetscInt[], PetscInt, PetscInt, const PetscInt[], void (*)(void), void (*)(void), void *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetNumBoundary(PetscDS, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSGetBoundary(PetscDS, PetscInt, PetscWeakForm *, DMBoundaryConditionType *, const char *[], DMLabel *, PetscInt *, const PetscInt *[], PetscInt *, PetscInt *, const PetscInt *[], void (**)(void), void (**)(void), void **);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSCopyBoundary(PetscDS, PetscInt, const PetscInt[], PetscDS);
extern __attribute__((visibility("default"))) PetscErrorCode PetscDSDestroyBoundary(PetscDS);

# 27 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 2

# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsccharacteristic.h" 1


 






 

extern __attribute__((visibility("default"))) PetscErrorCode CharacteristicInitializePackage(void);







 
typedef struct _p_Characteristic *Characteristic;







 

typedef const char *CharacteristicType;

extern __attribute__((visibility("default"))) PetscErrorCode CharacteristicCreate(MPI_Comm, Characteristic *);
extern __attribute__((visibility("default"))) PetscErrorCode CharacteristicSetType(Characteristic, CharacteristicType);
extern __attribute__((visibility("default"))) PetscErrorCode CharacteristicSetUp(Characteristic);
extern __attribute__((visibility("default"))) PetscErrorCode CharacteristicSetVelocityInterpolation(Characteristic, DM, Vec, Vec, PetscInt, PetscInt[], PetscErrorCode (*)(Vec, PetscReal[], PetscInt, PetscInt[], PetscScalar[], void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode CharacteristicSetVelocityInterpolationLocal(Characteristic, DM, Vec, Vec, PetscInt, PetscInt[], PetscErrorCode (*)(void *, PetscReal[], PetscInt, PetscInt[], PetscScalar[], void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode CharacteristicSetFieldInterpolation(Characteristic, DM, Vec, PetscInt, PetscInt[], PetscErrorCode (*)(Vec, PetscReal[], PetscInt, PetscInt[], PetscScalar[], void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode CharacteristicSetFieldInterpolationLocal(Characteristic, DM, Vec, PetscInt, PetscInt[], PetscErrorCode (*)(void *, PetscReal[], PetscInt, PetscInt[], PetscScalar[], void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode CharacteristicSolve(Characteristic, PetscReal, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode CharacteristicDestroy(Characteristic *);

extern __attribute__((visibility("default"))) PetscFunctionList CharacteristicList;

extern __attribute__((visibility("default"))) PetscErrorCode CharacteristicRegister(const char[], PetscErrorCode (*)(Characteristic));

# 29 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 2

# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscts.h" 1



 



# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsnes.h" 1


 



# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscksp.h" 1


 



# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscpc.h" 1


 



# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscpctypes.h" 1



 







 
typedef struct _p_PC *PC;










 
typedef const char *PCType;
# 80 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscpctypes.h"








 
typedef enum {
  PC_SIDE_DEFAULT = -1,
  PC_LEFT,
  PC_RIGHT,
  PC_SYMMETRIC
} PCSide;











 
typedef enum {
  PCRICHARDSON_CONVERGED_RTOL = 2,
  PCRICHARDSON_CONVERGED_ATOL = 3,
  PCRICHARDSON_CONVERGED_ITS  = 4,
  PCRICHARDSON_DIVERGED_DTOL  = -4
} PCRichardsonConvergedReason;












 
typedef enum {
  PC_JACOBI_DIAGONAL,
  PC_JACOBI_ROWMAX,
  PC_JACOBI_ROWSUM
} PCJacobiType;




















 
typedef enum {
  PC_ASM_BASIC       = 3,
  PC_ASM_RESTRICT    = 1,
  PC_ASM_INTERPOLATE = 2,
  PC_ASM_NONE        = 0
} PCASMType;





























 
typedef enum {
  PC_GASM_BASIC       = 3,
  PC_GASM_RESTRICT    = 1,
  PC_GASM_INTERPOLATE = 2,
  PC_GASM_NONE        = 0
} PCGASMType;



















 
typedef enum {
  PC_COMPOSITE_ADDITIVE,
  PC_COMPOSITE_MULTIPLICATIVE,
  PC_COMPOSITE_SYMMETRIC_MULTIPLICATIVE,
  PC_COMPOSITE_SPECIAL,
  PC_COMPOSITE_SCHUR,
  PC_COMPOSITE_GKB
} PCCompositeType;







 
typedef enum {
  PC_FIELDSPLIT_SCHUR_PRE_SELF,
  PC_FIELDSPLIT_SCHUR_PRE_SELFP,
  PC_FIELDSPLIT_SCHUR_PRE_A11,
  PC_FIELDSPLIT_SCHUR_PRE_USER,
  PC_FIELDSPLIT_SCHUR_PRE_FULL
} PCFieldSplitSchurPreType;







 
typedef enum {
  PC_FIELDSPLIT_SCHUR_FACT_DIAG,
  PC_FIELDSPLIT_SCHUR_FACT_LOWER,
  PC_FIELDSPLIT_SCHUR_FACT_UPPER,
  PC_FIELDSPLIT_SCHUR_FACT_FULL
} PCFieldSplitSchurFactType;







 
typedef enum {
  PC_PARMS_GLOBAL_RAS,
  PC_PARMS_GLOBAL_SCHUR,
  PC_PARMS_GLOBAL_BJ
} PCPARMSGlobalType;







 
typedef enum {
  PC_PARMS_LOCAL_ILU0,
  PC_PARMS_LOCAL_ILUK,
  PC_PARMS_LOCAL_ILUT,
  PC_PARMS_LOCAL_ARMS
} PCPARMSLocalType;












 
typedef const char *PCGAMGType;




typedef const char *PCGAMGClassicalType;






















 
typedef enum {
  PC_MG_MULTIPLICATIVE,
  PC_MG_ADDITIVE,
  PC_MG_FULL,
  PC_MG_KASKADE
} PCMGType;












 
typedef enum {
  PC_MG_CYCLE_V = 1,
  PC_MG_CYCLE_W = 2
} PCMGCycleType;
















 
typedef enum {
  PC_MG_GALERKIN_BOTH,
  PC_MG_GALERKIN_PMAT,
  PC_MG_GALERKIN_MAT,
  PC_MG_GALERKIN_NONE,
  PC_MG_GALERKIN_EXTERNAL
} PCMGGalerkinType;







 
typedef enum {
  PC_EXOTIC_FACE,
  PC_EXOTIC_WIREBASKET
} PCExoticType;











 
typedef enum {
  PC_BDDC_INTERFACE_EXT_DIRICHLET,
  PC_BDDC_INTERFACE_EXT_LUMP
} PCBDDCInterfaceExtType;







 
typedef enum {
  PCMG_ADAPT_NONE,
  PCMG_ADAPT_POLYNOMIAL,
  PCMG_ADAPT_HARMONIC,
  PCMG_ADAPT_EIGENVECTOR,
  PCMG_ADAPT_GENERALIZED_EIGENVECTOR,
  PCMG_ADAPT_GDSW
} PCMGCoarseSpaceType;







 
typedef enum {
  PC_PATCH_STAR,
  PC_PATCH_VANKA,
  PC_PATCH_PARDECOMP,
  PC_PATCH_USER,
  PC_PATCH_PYTHON
} PCPatchConstructType;





















 
typedef enum {
  PC_DEFLATION_SPACE_HAAR,
  PC_DEFLATION_SPACE_DB2,
  PC_DEFLATION_SPACE_DB4,
  PC_DEFLATION_SPACE_DB8,
  PC_DEFLATION_SPACE_DB16,
  PC_DEFLATION_SPACE_BIORTH22,
  PC_DEFLATION_SPACE_MEYER,
  PC_DEFLATION_SPACE_AGGREGATION,
  PC_DEFLATION_SPACE_USER
} PCDeflationSpaceType;












 
typedef enum {
  PC_HPDDM_COARSE_CORRECTION_DEFLATED,
  PC_HPDDM_COARSE_CORRECTION_ADDITIVE,
  PC_HPDDM_COARSE_CORRECTION_BALANCED
} PCHPDDMCoarseCorrectionType;










 
typedef enum {
  PC_SETUP_ERROR = -1,
  PC_NOERROR,
  PC_FACTOR_STRUCT_ZEROPIVOT,
  PC_FACTOR_NUMERIC_ZEROPIVOT,
  PC_FACTOR_OUTMEMORY,
  PC_FACTOR_OTHER,
  PC_INCONSISTENT_RHS,
  PC_SUBPC_ERROR
} PCFailedReason;










 
typedef enum {
  PCGAMG_LAYOUT_COMPACT,
  PCGAMG_LAYOUT_SPREAD
} PCGAMGLayoutType;

# 10 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscpc.h" 2

 

extern __attribute__((visibility("default"))) PetscErrorCode PCInitializePackage(void);




 
extern __attribute__((visibility("default"))) PetscFunctionList PCList;

 
extern __attribute__((visibility("default"))) PetscClassId PC_CLASSID;

 
extern __attribute__((visibility("default"))) const char *const *const PCSides;
extern __attribute__((visibility("default"))) const char *const        PCJacobiTypes[];
extern __attribute__((visibility("default"))) const char *const        PCASMTypes[];
extern __attribute__((visibility("default"))) const char *const        PCGASMTypes[];
extern __attribute__((visibility("default"))) const char *const        PCCompositeTypes[];
extern __attribute__((visibility("default"))) const char *const        PCFieldSplitSchurPreTypes[];
extern __attribute__((visibility("default"))) const char *const        PCFieldSplitSchurFactTypes[];
extern __attribute__((visibility("default"))) const char *const        PCPARMSGlobalTypes[];
extern __attribute__((visibility("default"))) const char *const        PCPARMSLocalTypes[];
extern __attribute__((visibility("default"))) const char *const        PCMGTypes[];
extern __attribute__((visibility("default"))) const char *const        PCMGCycleTypes[];
extern __attribute__((visibility("default"))) const char *const        PCMGGalerkinTypes[];
extern __attribute__((visibility("default"))) const char *const        PCMGCoarseSpaceTypes[];
extern __attribute__((visibility("default"))) const char *const        PCExoticTypes[];
extern __attribute__((visibility("default"))) const char *const        PCPatchConstructTypes[];
extern __attribute__((visibility("default"))) const char *const        PCDeflationTypes[];
extern __attribute__((visibility("default"))) const char *const *const PCFailedReasons;

extern __attribute__((visibility("default"))) PetscErrorCode PCCreate(MPI_Comm, PC *);
extern __attribute__((visibility("default"))) PetscErrorCode PCSetType(PC, PCType);
extern __attribute__((visibility("default"))) PetscErrorCode PCGetType(PC, PCType *);
extern __attribute__((visibility("default"))) PetscErrorCode PCSetUp(PC);

extern __attribute__((visibility("default"))) PetscErrorCode PCSetFailedReason(PC, PCFailedReason);
extern __attribute__((visibility("default"))) PetscErrorCode PCGetFailedReason(PC, PCFailedReason *);
__attribute__((deprecated)) static inline PetscErrorCode PCGetSetUpFailedReason(PC pc, PCFailedReason *reason)
{
  return PCGetFailedReason(pc, reason);
}
extern __attribute__((visibility("default"))) PetscErrorCode PCGetFailedReasonRank(PC, PCFailedReason *);

extern __attribute__((visibility("default"))) PetscErrorCode PCSetUpOnBlocks(PC);
extern __attribute__((visibility("default"))) PetscErrorCode PCApply(PC, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode PCMatApply(PC, Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode PCApplySymmetricLeft(PC, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode PCApplySymmetricRight(PC, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode PCApplyBAorAB(PC, PCSide, Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode PCApplyTranspose(PC, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode PCApplyTransposeExists(PC, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PCApplyBAorABTranspose(PC, PCSide, Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode PCSetReusePreconditioner(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCGetReusePreconditioner(PC, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PCSetErrorIfFailure(PC, PetscBool);



extern __attribute__((visibility("default"))) PetscErrorCode PCApplyRichardson(PC, Vec, Vec, Vec, PetscReal, PetscReal, PetscReal, PetscInt, PetscBool, PetscInt *, PCRichardsonConvergedReason *);
extern __attribute__((visibility("default"))) PetscErrorCode PCApplyRichardsonExists(PC, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PCSetUseAmat(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCGetUseAmat(PC, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode PCRegister(const char[], PetscErrorCode (*)(PC));

extern __attribute__((visibility("default"))) PetscErrorCode PCReset(PC);
extern __attribute__((visibility("default"))) PetscErrorCode PCDestroy(PC *);
extern __attribute__((visibility("default"))) PetscErrorCode PCSetFromOptions(PC);

extern __attribute__((visibility("default"))) PetscErrorCode PCFactorGetMatrix(PC, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode PCSetModifySubMatrices(PC, PetscErrorCode (*)(PC, PetscInt, const IS[], const IS[], Mat[], void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode PCModifySubMatrices(PC, PetscInt, const IS[], const IS[], Mat[], void *);

extern __attribute__((visibility("default"))) PetscErrorCode PCSetOperators(PC, Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode PCGetOperators(PC, Mat *, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode PCGetOperatorsSet(PC, PetscBool *, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode PCView(PC, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PCLoad(PC, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PCViewFromOptions(PC, PetscObject, const char[]);

extern __attribute__((visibility("default"))) PetscErrorCode PCSetOptionsPrefix(PC, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCAppendOptionsPrefix(PC, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCGetOptionsPrefix(PC, const char *[]);

extern __attribute__((visibility("default"))) PetscErrorCode PCComputeOperator(PC, MatType, Mat *);
__attribute__((deprecated)) static inline PetscErrorCode PCComputeExplicitOperator(PC A, Mat *B)
{
  return PCComputeOperator(A, ((void*)0), B);
}




 
extern __attribute__((visibility("default"))) PetscErrorCode PCGetDiagonalScale(PC, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PCDiagonalScaleLeft(PC, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode PCDiagonalScaleRight(PC, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode PCSetDiagonalScale(PC, Vec);

extern __attribute__((visibility("default"))) PetscErrorCode PCSetDM(PC, DM);
extern __attribute__((visibility("default"))) PetscErrorCode PCGetDM(PC, DM *);

extern __attribute__((visibility("default"))) PetscErrorCode PCGetInterpolations(PC, PetscInt *, Mat *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCGetCoarseOperators(PC pc, PetscInt *, Mat *[]);

extern __attribute__((visibility("default"))) PetscErrorCode PCSetCoordinates(PC, PetscInt, PetscInt, PetscReal *);

extern __attribute__((visibility("default"))) PetscErrorCode PCSetApplicationContext(PC, void *);
extern __attribute__((visibility("default"))) PetscErrorCode PCGetApplicationContext(PC, void *);

 

extern __attribute__((visibility("default"))) PetscErrorCode PCJacobiSetType(PC, PCJacobiType);
extern __attribute__((visibility("default"))) PetscErrorCode PCJacobiGetType(PC, PCJacobiType *);
extern __attribute__((visibility("default"))) PetscErrorCode PCJacobiSetUseAbs(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCJacobiGetUseAbs(PC, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PCJacobiSetFixDiagonal(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCJacobiGetFixDiagonal(PC, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PCSORSetSymmetric(PC, MatSORType);
extern __attribute__((visibility("default"))) PetscErrorCode PCSORGetSymmetric(PC, MatSORType *);
extern __attribute__((visibility("default"))) PetscErrorCode PCSORSetOmega(PC, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode PCSORGetOmega(PC, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PCSORSetIterations(PC, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCSORGetIterations(PC, PetscInt *, PetscInt *);

extern __attribute__((visibility("default"))) PetscErrorCode PCEisenstatSetOmega(PC, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode PCEisenstatGetOmega(PC, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PCEisenstatSetNoDiagonalScaling(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCEisenstatGetNoDiagonalScaling(PC, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode PCBJacobiSetTotalBlocks(PC, PetscInt, const PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCBJacobiGetTotalBlocks(PC, PetscInt *, const PetscInt *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCBJacobiSetLocalBlocks(PC, PetscInt, const PetscInt[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCBJacobiGetLocalBlocks(PC, PetscInt *, const PetscInt *[]);

extern __attribute__((visibility("default"))) PetscErrorCode PCShellSetApply(PC, PetscErrorCode (*)(PC, Vec, Vec));
extern __attribute__((visibility("default"))) PetscErrorCode PCShellSetMatApply(PC, PetscErrorCode (*)(PC, Mat, Mat));
extern __attribute__((visibility("default"))) PetscErrorCode PCShellSetApplySymmetricLeft(PC, PetscErrorCode (*)(PC, Vec, Vec));
extern __attribute__((visibility("default"))) PetscErrorCode PCShellSetApplySymmetricRight(PC, PetscErrorCode (*)(PC, Vec, Vec));
extern __attribute__((visibility("default"))) PetscErrorCode PCShellSetApplyBA(PC, PetscErrorCode (*)(PC, PCSide, Vec, Vec, Vec));
extern __attribute__((visibility("default"))) PetscErrorCode PCShellSetApplyTranspose(PC, PetscErrorCode (*)(PC, Vec, Vec));
extern __attribute__((visibility("default"))) PetscErrorCode PCShellSetSetUp(PC, PetscErrorCode (*)(PC));
extern __attribute__((visibility("default"))) PetscErrorCode PCShellSetApplyRichardson(PC, PetscErrorCode (*)(PC, Vec, Vec, Vec, PetscReal, PetscReal, PetscReal, PetscInt, PetscBool, PetscInt *, PCRichardsonConvergedReason *));
extern __attribute__((visibility("default"))) PetscErrorCode PCShellSetView(PC, PetscErrorCode (*)(PC, PetscViewer));
extern __attribute__((visibility("default"))) PetscErrorCode PCShellSetDestroy(PC, PetscErrorCode (*)(PC));
extern __attribute__((visibility("default"))) PetscErrorCode PCShellSetContext(PC, void *);
extern __attribute__((visibility("default"))) PetscErrorCode PCShellGetContext(PC, void *);
extern __attribute__((visibility("default"))) PetscErrorCode PCShellSetName(PC, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCShellGetName(PC, const char *[]);

extern __attribute__((visibility("default"))) PetscErrorCode PCFactorSetZeroPivot(PC, PetscReal);

extern __attribute__((visibility("default"))) PetscErrorCode PCFactorSetShiftType(PC, MatFactorShiftType);
extern __attribute__((visibility("default"))) PetscErrorCode PCFactorSetShiftAmount(PC, PetscReal);

extern __attribute__((visibility("default"))) PetscErrorCode PCFactorSetMatSolverType(PC, MatSolverType);
extern __attribute__((visibility("default"))) PetscErrorCode PCFactorGetMatSolverType(PC, MatSolverType *);
extern __attribute__((visibility("default"))) PetscErrorCode PCFactorSetUpMatSolverType(PC);
__attribute__((deprecated)) static inline PetscErrorCode PCFactorSetMatSolverPackage(PC pc, MatSolverType stype)
{
  return PCFactorSetMatSolverType(pc, stype);
}
__attribute__((deprecated)) static inline PetscErrorCode PCFactorGetMatSolverPackage(PC pc, MatSolverType *stype)
{
  return PCFactorGetMatSolverType(pc, stype);
}
__attribute__((deprecated)) static inline PetscErrorCode PCFactorSetUpMatSolverPackage(PC pc)
{
  return PCFactorSetUpMatSolverType(pc);
}

extern __attribute__((visibility("default"))) PetscErrorCode PCFactorSetFill(PC, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode PCFactorSetColumnPivot(PC, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode PCFactorReorderForNonzeroDiagonal(PC, PetscReal);

extern __attribute__((visibility("default"))) PetscErrorCode PCFactorSetMatOrderingType(PC, MatOrderingType);
extern __attribute__((visibility("default"))) PetscErrorCode PCFactorSetReuseOrdering(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCFactorSetReuseFill(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCFactorSetUseInPlace(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCFactorGetUseInPlace(PC, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PCFactorSetAllowDiagonalFill(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCFactorGetAllowDiagonalFill(PC, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PCFactorSetPivotInBlocks(PC, PetscBool);

extern __attribute__((visibility("default"))) PetscErrorCode PCFactorSetLevels(PC, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCFactorGetLevels(PC, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PCFactorSetDropTolerance(PC, PetscReal, PetscReal, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCFactorGetZeroPivot(PC, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PCFactorGetShiftAmount(PC, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode PCFactorGetShiftType(PC, MatFactorShiftType *);

extern __attribute__((visibility("default"))) PetscErrorCode PCASMSetLocalSubdomains(PC, PetscInt, IS[], IS[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCASMSetTotalSubdomains(PC, PetscInt, IS[], IS[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCASMSetOverlap(PC, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCASMSetDMSubdomains(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCASMGetDMSubdomains(PC, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PCASMSetSortIndices(PC, PetscBool);

extern __attribute__((visibility("default"))) PetscErrorCode PCASMSetType(PC, PCASMType);
extern __attribute__((visibility("default"))) PetscErrorCode PCASMGetType(PC, PCASMType *);
extern __attribute__((visibility("default"))) PetscErrorCode PCASMSetLocalType(PC, PCCompositeType);
extern __attribute__((visibility("default"))) PetscErrorCode PCASMGetLocalType(PC, PCCompositeType *);
extern __attribute__((visibility("default"))) PetscErrorCode PCASMCreateSubdomains(Mat, PetscInt, IS *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCASMDestroySubdomains(PetscInt, IS[], IS[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCASMCreateSubdomains2D(PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt *, IS **, IS **);
extern __attribute__((visibility("default"))) PetscErrorCode PCASMGetLocalSubdomains(PC, PetscInt *, IS *[], IS *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCASMGetLocalSubmatrices(PC, PetscInt *, Mat *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCASMGetSubMatType(PC, MatType *);
extern __attribute__((visibility("default"))) PetscErrorCode PCASMSetSubMatType(PC, MatType);

extern __attribute__((visibility("default"))) PetscErrorCode PCGASMSetTotalSubdomains(PC, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCGASMSetSubdomains(PC, PetscInt, IS[], IS[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCGASMSetOverlap(PC, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCGASMSetUseDMSubdomains(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCGASMGetUseDMSubdomains(PC, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PCGASMSetSortIndices(PC, PetscBool);

extern __attribute__((visibility("default"))) PetscErrorCode PCGASMSetType(PC, PCGASMType);
extern __attribute__((visibility("default"))) PetscErrorCode PCGASMCreateSubdomains(Mat, PetscInt, PetscInt *, IS *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCGASMDestroySubdomains(PetscInt, IS *[], IS *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCGASMCreateSubdomains2D(PC, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt *, IS **, IS **);
extern __attribute__((visibility("default"))) PetscErrorCode PCGASMGetSubdomains(PC, PetscInt *, IS *[], IS *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCGASMGetSubmatrices(PC, PetscInt *, Mat *[]);

extern __attribute__((visibility("default"))) PetscErrorCode PCCompositeSetType(PC, PCCompositeType);
extern __attribute__((visibility("default"))) PetscErrorCode PCCompositeGetType(PC, PCCompositeType *);
extern __attribute__((visibility("default"))) PetscErrorCode PCCompositeAddPCType(PC, PCType);
extern __attribute__((visibility("default"))) PetscErrorCode PCCompositeAddPC(PC, PC);
extern __attribute__((visibility("default"))) PetscErrorCode PCCompositeGetNumberPC(PC, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PCCompositeGetPC(PC, PetscInt, PC *);
extern __attribute__((visibility("default"))) PetscErrorCode PCCompositeSpecialSetAlpha(PC, PetscScalar);

extern __attribute__((visibility("default"))) PetscErrorCode PCRedundantSetNumber(PC, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCRedundantSetScatter(PC, VecScatter, VecScatter);
extern __attribute__((visibility("default"))) PetscErrorCode PCRedundantGetOperators(PC, Mat *, Mat *);

extern __attribute__((visibility("default"))) PetscErrorCode PCSPAISetEpsilon(PC, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode PCSPAISetNBSteps(PC, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCSPAISetMax(PC, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCSPAISetMaxNew(PC, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCSPAISetBlockSize(PC, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCSPAISetCacheSize(PC, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCSPAISetVerbose(PC, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCSPAISetSp(PC, PetscInt);

extern __attribute__((visibility("default"))) PetscErrorCode PCHYPRESetType(PC, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCHYPREGetType(PC, const char *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCHYPRESetDiscreteGradient(PC, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode PCHYPRESetDiscreteCurl(PC, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode PCHYPRESetInterpolations(PC, PetscInt, Mat, Mat[], Mat, Mat[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCHYPRESetEdgeConstantVectors(PC, Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode PCHYPREAMSSetInteriorNodes(PC, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode PCHYPRESetAlphaPoissonMatrix(PC, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode PCHYPRESetBetaPoissonMatrix(PC, Mat);

extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitSetFields(PC, const char[], PetscInt, const PetscInt *, const PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitSetType(PC, PCCompositeType);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitGetType(PC, PCCompositeType *);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitSetBlockSize(PC, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitSetIS(PC, const char[], IS);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitGetIS(PC, const char[], IS *);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitGetISByIndex(PC, PetscInt, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitRestrictIS(PC, IS);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitSetDMSplits(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitGetDMSplits(PC, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitSetDiagUseAmat(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitGetDiagUseAmat(PC, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitSetOffDiagUseAmat(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitGetOffDiagUseAmat(PC, PetscBool *);

extern __attribute__((visibility("default")))                __attribute__((deprecated)) PetscErrorCode PCFieldSplitSchurPrecondition(PC, PCFieldSplitSchurPreType, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitSetSchurPre(PC, PCFieldSplitSchurPreType, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitGetSchurPre(PC, PCFieldSplitSchurPreType *, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitSetSchurFactType(PC, PCFieldSplitSchurFactType);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitSetSchurScale(PC, PetscScalar);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitGetSchurBlocks(PC, Mat *, Mat *, Mat *, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitSchurGetS(PC, Mat *S);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitSchurRestoreS(PC, Mat *S);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitGetDetectSaddlePoint(PC, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitSetDetectSaddlePoint(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitSetGKBTol(PC, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitSetGKBNu(PC, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitSetGKBMaxit(PC, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitSetGKBDelay(PC, PetscInt);

extern __attribute__((visibility("default"))) PetscErrorCode PCGalerkinSetRestriction(PC, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode PCGalerkinSetInterpolation(PC, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode PCGalerkinSetComputeSubmatrix(PC, PetscErrorCode (*)(PC, Mat, Mat, Mat *, void *), void *);

extern __attribute__((visibility("default"))) PetscErrorCode PCPythonSetType(PC, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCPythonGetType(PC, const char *[]);

extern __attribute__((visibility("default"))) PetscErrorCode PCPARMSSetGlobal(PC, PCPARMSGlobalType);
extern __attribute__((visibility("default"))) PetscErrorCode PCPARMSSetLocal(PC, PCPARMSLocalType);
extern __attribute__((visibility("default"))) PetscErrorCode PCPARMSSetSolveTolerances(PC, PetscReal, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCPARMSSetSolveRestart(PC, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCPARMSSetNonsymPerm(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCPARMSSetFill(PC, PetscInt, PetscInt, PetscInt);

extern __attribute__((visibility("default"))) PetscErrorCode PCGAMGSetType(PC, PCGAMGType);
extern __attribute__((visibility("default"))) PetscErrorCode PCGAMGGetType(PC, PCGAMGType *);
extern __attribute__((visibility("default"))) PetscErrorCode PCGAMGSetProcEqLim(PC, PetscInt);

extern __attribute__((visibility("default"))) PetscErrorCode PCGAMGSetRepartition(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCGAMGSetUseSAEstEig(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCGAMGSetEigenvalues(PC, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode PCGAMGASMSetUseAggs(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCGAMGSetUseParallelCoarseGridSolve(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCGAMGSetCpuPinCoarseGrids(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCGAMGSetCoarseGridLayoutType(PC, PCGAMGLayoutType);
extern __attribute__((visibility("default"))) PetscErrorCode PCGAMGSetThreshold(PC, PetscReal[], PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCGAMGSetRankReductionFactors(PC, PetscInt[], PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCGAMGSetThresholdScale(PC, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode PCGAMGSetCoarseEqLim(PC, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCGAMGSetNlevels(PC, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCGAMGSetNSmooths(PC, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCGAMGSetSquareGraph(PC, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCGAMGSetAggressiveLevels(PC, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCGAMGSetReuseInterpolation(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCGAMGFinalizePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode PCGAMGInitializePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode PCGAMGRegister(PCGAMGType, PetscErrorCode (*)(PC));
extern __attribute__((visibility("default"))) PetscErrorCode PCGAMGCreateGraph(PC, Mat, Mat *);

extern __attribute__((visibility("default"))) PetscErrorCode PCGAMGClassicalSetType(PC, PCGAMGClassicalType);
extern __attribute__((visibility("default"))) PetscErrorCode PCGAMGClassicalGetType(PC, PCGAMGClassicalType *);

extern __attribute__((visibility("default"))) PetscErrorCode PCBDDCSetDiscreteGradient(PC, Mat, PetscInt, PetscInt, PetscBool, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCBDDCSetDivergenceMat(PC, Mat, PetscBool, IS);
extern __attribute__((visibility("default"))) PetscErrorCode PCBDDCSetChangeOfBasisMat(PC, Mat, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCBDDCSetPrimalVerticesIS(PC, IS);
extern __attribute__((visibility("default"))) PetscErrorCode PCBDDCSetPrimalVerticesLocalIS(PC, IS);
extern __attribute__((visibility("default"))) PetscErrorCode PCBDDCGetPrimalVerticesIS(PC, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode PCBDDCGetPrimalVerticesLocalIS(PC, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode PCBDDCSetCoarseningRatio(PC, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCBDDCSetLevels(PC, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCBDDCSetDirichletBoundaries(PC, IS);
extern __attribute__((visibility("default"))) PetscErrorCode PCBDDCSetDirichletBoundariesLocal(PC, IS);
extern __attribute__((visibility("default"))) PetscErrorCode PCBDDCGetDirichletBoundaries(PC, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode PCBDDCGetDirichletBoundariesLocal(PC, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode PCBDDCSetInterfaceExtType(PC, PCBDDCInterfaceExtType);
extern __attribute__((visibility("default"))) PetscErrorCode PCBDDCSetNeumannBoundaries(PC, IS);
extern __attribute__((visibility("default"))) PetscErrorCode PCBDDCSetNeumannBoundariesLocal(PC, IS);
extern __attribute__((visibility("default"))) PetscErrorCode PCBDDCGetNeumannBoundaries(PC, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode PCBDDCGetNeumannBoundariesLocal(PC, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode PCBDDCSetDofsSplitting(PC, PetscInt, IS[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCBDDCSetDofsSplittingLocal(PC, PetscInt, IS[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCBDDCSetLocalAdjacencyGraph(PC, PetscInt, const PetscInt[], const PetscInt[], PetscCopyMode);
extern __attribute__((visibility("default"))) PetscErrorCode PCBDDCCreateFETIDPOperators(PC, PetscBool, const char *, Mat *, PC *);
extern __attribute__((visibility("default"))) PetscErrorCode PCBDDCMatFETIDPGetRHS(Mat, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode PCBDDCMatFETIDPGetSolution(Mat, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode PCBDDCFinalizePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode PCBDDCInitializePackage(void);

extern __attribute__((visibility("default"))) PetscErrorCode PCISSetUseStiffnessScaling(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCISSetSubdomainScalingFactor(PC, PetscScalar);
extern __attribute__((visibility("default"))) PetscErrorCode PCISSetSubdomainDiagonalScaling(PC, Vec);

extern __attribute__((visibility("default"))) PetscInt       PetscMGLevelId;
extern __attribute__((visibility("default"))) PetscErrorCode PCMGSetType(PC, PCMGType);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGGetType(PC, PCMGType *);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGSetLevels(PC, PetscInt, MPI_Comm *);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGGetLevels(PC, PetscInt *);

extern __attribute__((visibility("default"))) PetscErrorCode PCMGSetDistinctSmoothUp(PC);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGSetNumberSmooth(PC, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGSetCycleType(PC, PCMGCycleType);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGSetCycleTypeOnLevel(PC, PetscInt, PCMGCycleType);
__attribute__((deprecated)) static inline PetscErrorCode PCMGSetCyclesOnLevel(PC pc, PetscInt l, PetscInt t)
{
  return PCMGSetCycleTypeOnLevel(pc, l, (PCMGCycleType)t);
}
extern __attribute__((visibility("default"))) PetscErrorCode PCMGMultiplicativeSetCycles(PC, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGSetGalerkin(PC, PCMGGalerkinType);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGGetGalerkin(PC, PCMGGalerkinType *);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGSetAdaptCoarseSpaceType(PC, PCMGCoarseSpaceType);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGGetAdaptCoarseSpaceType(PC, PCMGCoarseSpaceType *);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGSetAdaptCR(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGGetAdaptCR(PC, PetscBool *);
 
extern __attribute__((visibility("default"))) PetscErrorCode PCMGSetAdaptInterpolation(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGGetAdaptInterpolation(PC, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode PCMGSetRhs(PC, PetscInt, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGSetX(PC, PetscInt, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGSetR(PC, PetscInt, Vec);

extern __attribute__((visibility("default"))) PetscErrorCode PCMGSetRestriction(PC, PetscInt, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGGetRestriction(PC, PetscInt, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGSetInjection(PC, PetscInt, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGGetInjection(PC, PetscInt, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGSetInterpolation(PC, PetscInt, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGSetOperators(PC, PetscInt, Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGGetInterpolation(PC, PetscInt, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGSetRScale(PC, PetscInt, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGGetRScale(PC, PetscInt, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGSetResidual(PC, PetscInt, PetscErrorCode (*)(Mat, Vec, Vec, Vec), Mat);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGSetResidualTranspose(PC, PetscInt, PetscErrorCode (*)(Mat, Vec, Vec, Vec), Mat);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGResidualDefault(Mat, Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGResidualTransposeDefault(Mat, Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGMatResidualDefault(Mat, Mat, Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGMatResidualTransposeDefault(Mat, Mat, Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGGalerkinSetMatProductAlgorithm(PC, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGGalerkinGetMatProductAlgorithm(PC, const char *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGGetGridComplexity(PC, PetscReal *, PetscReal *);

extern __attribute__((visibility("default"))) PetscErrorCode PCHMGSetReuseInterpolation(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCHMGSetUseSubspaceCoarsening(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCHMGSetInnerPCType(PC, PCType);
extern __attribute__((visibility("default"))) PetscErrorCode PCHMGSetCoarseningComponent(PC, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCHMGUseMatMAIJ(PC, PetscBool);

extern __attribute__((visibility("default"))) PetscErrorCode PCTelescopeGetSubcommType(PC, PetscSubcommType *);
extern __attribute__((visibility("default"))) PetscErrorCode PCTelescopeSetSubcommType(PC, PetscSubcommType);
extern __attribute__((visibility("default"))) PetscErrorCode PCTelescopeGetReductionFactor(PC, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PCTelescopeSetReductionFactor(PC, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCTelescopeGetIgnoreDM(PC, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PCTelescopeSetIgnoreDM(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCTelescopeGetUseCoarseDM(PC, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PCTelescopeSetUseCoarseDM(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCTelescopeGetIgnoreKSPComputeOperators(PC, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PCTelescopeSetIgnoreKSPComputeOperators(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCTelescopeGetDM(PC, DM *);

extern __attribute__((visibility("default"))) PetscErrorCode PCPatchSetSaveOperators(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCPatchGetSaveOperators(PC, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PCPatchSetPrecomputeElementTensors(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCPatchGetPrecomputeElementTensors(PC, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PCPatchSetPartitionOfUnity(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCPatchGetPartitionOfUnity(PC, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PCPatchSetSubMatType(PC, MatType);
extern __attribute__((visibility("default"))) PetscErrorCode PCPatchGetSubMatType(PC, MatType *);
extern __attribute__((visibility("default"))) PetscErrorCode PCPatchSetCellNumbering(PC, PetscSection);
extern __attribute__((visibility("default"))) PetscErrorCode PCPatchGetCellNumbering(PC, PetscSection *);
extern __attribute__((visibility("default"))) PetscErrorCode PCPatchSetConstructType(PC, PCPatchConstructType, PetscErrorCode (*)(PC, PetscInt *, IS **, IS *, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode PCPatchGetConstructType(PC, PCPatchConstructType *, PetscErrorCode (**)(PC, PetscInt *, IS **, IS *, void *), void **);
extern __attribute__((visibility("default"))) PetscErrorCode PCPatchSetDiscretisationInfo(PC, PetscInt, DM *, PetscInt *, PetscInt *, const PetscInt **, const PetscInt *, PetscInt, const PetscInt *, PetscInt, const PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode PCPatchSetComputeOperator(PC, PetscErrorCode (*)(PC, PetscInt, Vec, Mat, IS, PetscInt, const PetscInt *, const PetscInt *, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode PCPatchSetComputeFunction(PC pc, PetscErrorCode (*func)(PC, PetscInt, Vec, Vec, IS, PetscInt, const PetscInt *, const PetscInt *, void *), void *ctx);
extern __attribute__((visibility("default"))) PetscErrorCode PCPatchSetComputeOperatorInteriorFacets(PC, PetscErrorCode (*)(PC, PetscInt, Vec, Mat, IS, PetscInt, const PetscInt *, const PetscInt *, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode PCPatchSetComputeFunctionInteriorFacets(PC pc, PetscErrorCode (*func)(PC, PetscInt, Vec, Vec, IS, PetscInt, const PetscInt *, const PetscInt *, void *), void *ctx);

extern __attribute__((visibility("default"))) PetscErrorCode PCLMVMSetMatLMVM(PC, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode PCLMVMGetMatLMVM(PC, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode PCLMVMSetIS(PC, IS);
extern __attribute__((visibility("default"))) PetscErrorCode PCLMVMClearIS(PC);

extern __attribute__((visibility("default"))) PetscErrorCode PCExoticSetType(PC, PCExoticType);

extern __attribute__((visibility("default"))) PetscErrorCode PCDeflationSetInitOnly(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCDeflationSetLevels(PC, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCDeflationSetReductionFactor(PC, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCDeflationSetCorrectionFactor(PC, PetscScalar);
extern __attribute__((visibility("default"))) PetscErrorCode PCDeflationSetSpaceToCompute(PC, PCDeflationSpaceType, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PCDeflationSetSpace(PC, Mat, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCDeflationSetProjectionNullSpaceMat(PC, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode PCDeflationSetCoarseMat(PC, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode PCDeflationGetPC(PC, PC *);

extern __attribute__((visibility("default"))) PetscErrorCode PCHPDDMSetAuxiliaryMat(PC, IS, Mat, PetscErrorCode (*)(Mat, PetscReal, Vec, Vec, PetscReal, IS, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode PCHPDDMSetRHSMat(PC, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode PCHPDDMHasNeumannMat(PC, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode PCHPDDMSetCoarseCorrectionType(PC, PCHPDDMCoarseCorrectionType);
extern __attribute__((visibility("default"))) PetscErrorCode PCHPDDMGetCoarseCorrectionType(PC, PCHPDDMCoarseCorrectionType *);
extern __attribute__((visibility("default"))) PetscErrorCode PCHPDDMGetSTShareSubKSP(PC, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode PCHPDDMSetDeflationMat(PC, IS, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode PCHPDDMFinalizePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode PCHPDDMInitializePackage(void);

extern __attribute__((visibility("default"))) PetscErrorCode PCAmgXGetResources(PC, void *);

# 8 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscksp.h" 2

 

extern __attribute__((visibility("default"))) PetscErrorCode KSPInitializePackage(void);












 
typedef struct _p_KSP *KSP;







 
typedef const char *KSPType;
# 86 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscksp.h"

 
extern __attribute__((visibility("default"))) PetscClassId KSP_CLASSID;
extern __attribute__((visibility("default"))) PetscClassId KSPGUESS_CLASSID;
extern __attribute__((visibility("default"))) PetscClassId DMKSP_CLASSID;

extern __attribute__((visibility("default"))) PetscErrorCode KSPCreate(MPI_Comm, KSP *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetType(KSP, KSPType);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetType(KSP, KSPType *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetUp(KSP);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetUpOnBlocks(KSP);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSolve(KSP, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSolveTranspose(KSP, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetUseExplicitTranspose(KSP, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMatSolve(KSP, Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetMatSolveBatchSize(KSP, PetscInt);
__attribute__((deprecated)) static inline PetscErrorCode KSPSetMatSolveBlockSize(KSP ksp, PetscInt n)
{
  return KSPSetMatSolveBatchSize(ksp, n);
}
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetMatSolveBatchSize(KSP, PetscInt *);
__attribute__((deprecated)) static inline PetscErrorCode KSPGetMatSolveBlockSize(KSP ksp, PetscInt *n)
{
  return KSPGetMatSolveBatchSize(ksp, n);
}
extern __attribute__((visibility("default"))) PetscErrorCode KSPReset(KSP);
extern __attribute__((visibility("default"))) PetscErrorCode KSPResetViewers(KSP);
extern __attribute__((visibility("default"))) PetscErrorCode KSPDestroy(KSP *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetReusePreconditioner(KSP, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetReusePreconditioner(KSP, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetSkipPCSetFromOptions(KSP, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode KSPCheckSolve(KSP, PC, Vec);

extern __attribute__((visibility("default"))) PetscFunctionList KSPList;
extern __attribute__((visibility("default"))) PetscFunctionList KSPGuessList;
extern __attribute__((visibility("default"))) PetscFunctionList KSPMonitorList;
extern __attribute__((visibility("default"))) PetscFunctionList KSPMonitorCreateList;
extern __attribute__((visibility("default"))) PetscFunctionList KSPMonitorDestroyList;
extern __attribute__((visibility("default"))) PetscErrorCode    KSPRegister(const char[], PetscErrorCode (*)(KSP));
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorRegister(const char[], PetscViewerType, PetscViewerFormat, PetscErrorCode (*)(KSP, PetscInt, PetscReal, PetscViewerAndFormat *), PetscErrorCode (*)(PetscViewer, PetscViewerFormat, void *, PetscViewerAndFormat **), PetscErrorCode (*)(PetscViewerAndFormat **));

extern __attribute__((visibility("default"))) PetscErrorCode KSPSetPCSide(KSP, PCSide);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetPCSide(KSP, PCSide *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetTolerances(KSP, PetscReal, PetscReal, PetscReal, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetTolerances(KSP, PetscReal *, PetscReal *, PetscReal *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetInitialGuessNonzero(KSP, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetInitialGuessNonzero(KSP, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetErrorIfNotConverged(KSP, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetErrorIfNotConverged(KSP, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetComputeEigenvalues(KSP, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetComputeRitz(KSP, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetComputeEigenvalues(KSP, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetComputeSingularValues(KSP, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetComputeSingularValues(KSP, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetRhs(KSP, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetSolution(KSP, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetResidualNorm(KSP, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetIterationNumber(KSP, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetTotalIterations(KSP, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPCreateVecs(KSP, PetscInt, Vec **, PetscInt, Vec **);
__attribute__((deprecated)) static inline PetscErrorCode KSPGetVecs(KSP ksp, PetscInt n, Vec **x, PetscInt m, Vec **y)
{
  return KSPCreateVecs(ksp, n, x, m, y);
}

extern __attribute__((visibility("default"))) PetscErrorCode KSPSetPreSolve(KSP, PetscErrorCode (*)(KSP, Vec, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetPostSolve(KSP, PetscErrorCode (*)(KSP, Vec, Vec, void *), void *);

extern __attribute__((visibility("default"))) PetscErrorCode KSPSetPC(KSP, PC);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetPC(KSP, PC *);

extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitor(KSP, PetscInt, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorSet(KSP, PetscErrorCode (*)(KSP, PetscInt, PetscReal, void *), void *, PetscErrorCode (*)(void **));
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorCancel(KSP);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetMonitorContext(KSP, void *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetResidualHistory(KSP, const PetscReal *[], PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetResidualHistory(KSP, PetscReal[], PetscInt, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetErrorHistory(KSP, const PetscReal *[], PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetErrorHistory(KSP, PetscReal[], PetscInt, PetscBool);

extern __attribute__((visibility("default"))) PetscErrorCode KSPBuildSolutionDefault(KSP, Vec, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPBuildResidualDefault(KSP, Vec, Vec, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPDestroyDefault(KSP);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetWorkVecs(KSP, PetscInt);

extern __attribute__((visibility("default"))) PetscErrorCode PCKSPGetKSP(PC, KSP *);
extern __attribute__((visibility("default"))) PetscErrorCode PCKSPSetKSP(PC, KSP);
extern __attribute__((visibility("default"))) PetscErrorCode PCBJacobiGetSubKSP(PC, PetscInt *, PetscInt *, KSP *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCASMGetSubKSP(PC, PetscInt *, PetscInt *, KSP *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCGASMGetSubKSP(PC, PetscInt *, PetscInt *, KSP *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitGetSubKSP(PC, PetscInt *, KSP *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCFieldSplitSchurGetSubKSP(PC, PetscInt *, KSP *[]);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGGetSmoother(PC, PetscInt, KSP *);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGGetSmootherDown(PC, PetscInt, KSP *);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGGetSmootherUp(PC, PetscInt, KSP *);
extern __attribute__((visibility("default"))) PetscErrorCode PCMGGetCoarseSolve(PC, KSP *);
extern __attribute__((visibility("default"))) PetscErrorCode PCGalerkinGetKSP(PC, KSP *);
extern __attribute__((visibility("default"))) PetscErrorCode PCDeflationGetCoarseKSP(PC, KSP *);



 
extern __attribute__((visibility("default"))) PetscFunctionList PCMGCoarseList;
extern __attribute__((visibility("default"))) PetscErrorCode    PCMGRegisterCoarseSpaceConstructor(const char[], PetscErrorCode (*)(PC, PetscInt, DM, KSP, PetscInt, Mat, Mat *));
extern __attribute__((visibility("default"))) PetscErrorCode    PCMGGetCoarseSpaceConstructor(const char[], PetscErrorCode (**)(PC, PetscInt, DM, KSP, PetscInt, Mat, Mat *));

extern __attribute__((visibility("default"))) PetscErrorCode KSPBuildSolution(KSP, Vec, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPBuildResidual(KSP, Vec, Vec, Vec *);

extern __attribute__((visibility("default"))) PetscErrorCode KSPRichardsonSetScale(KSP, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode KSPRichardsonSetSelfScale(KSP, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode KSPChebyshevSetEigenvalues(KSP, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode KSPChebyshevEstEigSet(KSP, PetscReal, PetscReal, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode KSPChebyshevEstEigSetUseNoisy(KSP, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode KSPChebyshevEstEigGetKSP(KSP, KSP *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPComputeExtremeSingularValues(KSP, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPComputeEigenvalues(KSP, PetscInt, PetscReal[], PetscReal[], PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPComputeEigenvaluesExplicitly(KSP, PetscInt, PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode KSPComputeRitz(KSP, PetscBool, PetscBool, PetscInt *, Vec[], PetscReal[], PetscReal[]);












 
typedef enum {
  KSP_FCD_TRUNC_TYPE_STANDARD,
  KSP_FCD_TRUNC_TYPE_NOTAY
} KSPFCDTruncationType;
extern __attribute__((visibility("default"))) const char *const KSPFCDTruncationTypes[];

extern __attribute__((visibility("default"))) PetscErrorCode KSPFCGSetMmax(KSP, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode KSPFCGGetMmax(KSP, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPFCGSetNprealloc(KSP, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode KSPFCGGetNprealloc(KSP, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPFCGSetTruncationType(KSP, KSPFCDTruncationType);
extern __attribute__((visibility("default"))) PetscErrorCode KSPFCGGetTruncationType(KSP, KSPFCDTruncationType *);

extern __attribute__((visibility("default"))) PetscErrorCode KSPPIPEFCGSetMmax(KSP, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode KSPPIPEFCGGetMmax(KSP, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPPIPEFCGSetNprealloc(KSP, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode KSPPIPEFCGGetNprealloc(KSP, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPPIPEFCGSetTruncationType(KSP, KSPFCDTruncationType);
extern __attribute__((visibility("default"))) PetscErrorCode KSPPIPEFCGGetTruncationType(KSP, KSPFCDTruncationType *);

extern __attribute__((visibility("default"))) PetscErrorCode KSPPIPEGCRSetMmax(KSP, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode KSPPIPEGCRGetMmax(KSP, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPPIPEGCRSetNprealloc(KSP, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode KSPPIPEGCRGetNprealloc(KSP, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPPIPEGCRSetTruncationType(KSP, KSPFCDTruncationType);
extern __attribute__((visibility("default"))) PetscErrorCode KSPPIPEGCRGetTruncationType(KSP, KSPFCDTruncationType *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPPIPEGCRSetUnrollW(KSP, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode KSPPIPEGCRGetUnrollW(KSP, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode KSPGMRESSetRestart(KSP, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGMRESGetRestart(KSP, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGMRESSetHapTol(KSP, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGMRESSetBreakdownTolerance(KSP, PetscReal);

extern __attribute__((visibility("default"))) PetscErrorCode KSPGMRESSetPreAllocateVectors(KSP);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGMRESSetOrthogonalization(KSP, PetscErrorCode (*)(KSP, PetscInt));
extern __attribute__((visibility("default"))) PetscErrorCode KSPGMRESGetOrthogonalization(KSP, PetscErrorCode (**)(KSP, PetscInt));
extern __attribute__((visibility("default"))) PetscErrorCode KSPGMRESModifiedGramSchmidtOrthogonalization(KSP, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGMRESClassicalGramSchmidtOrthogonalization(KSP, PetscInt);

extern __attribute__((visibility("default"))) PetscErrorCode KSPLGMRESSetAugDim(KSP, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode KSPLGMRESSetConstant(KSP);

extern __attribute__((visibility("default"))) PetscErrorCode KSPPIPEFGMRESSetShift(KSP, PetscScalar);

extern __attribute__((visibility("default"))) PetscErrorCode KSPGCRSetRestart(KSP, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGCRGetRestart(KSP, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGCRSetModifyPC(KSP, PetscErrorCode (*)(KSP, PetscInt, PetscReal, void *), void *, PetscErrorCode (*)(void *));

extern __attribute__((visibility("default"))) PetscErrorCode KSPFETIDPGetInnerBDDC(KSP, PC *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPFETIDPSetInnerBDDC(KSP, PC);
extern __attribute__((visibility("default"))) PetscErrorCode KSPFETIDPGetInnerKSP(KSP, KSP *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPFETIDPSetPressureOperator(KSP, Mat);

extern __attribute__((visibility("default"))) PetscErrorCode KSPHPDDMSetDeflationMat(KSP, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode KSPHPDDMGetDeflationMat(KSP, Mat *);
# 284 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscksp.h"
__attribute__((deprecated)) static inline PetscErrorCode KSPHPDDMMatSolve(KSP ksp, Mat B, Mat X)
{
  return KSPMatSolve(ksp, B, X);
}
















 
typedef enum {
  KSP_HPDDM_TYPE_GMRES   = 0,
  KSP_HPDDM_TYPE_BGMRES  = 1,
  KSP_HPDDM_TYPE_CG      = 2,
  KSP_HPDDM_TYPE_BCG     = 3,
  KSP_HPDDM_TYPE_GCRODR  = 4,
  KSP_HPDDM_TYPE_BGCRODR = 5,
  KSP_HPDDM_TYPE_BFBCG   = 6,
  KSP_HPDDM_TYPE_PREONLY = 7
} KSPHPDDMType;
extern __attribute__((visibility("default"))) const char *const KSPHPDDMTypes[];












 
typedef enum {
  KSP_HPDDM_PRECISION_HALF      = 0,
  KSP_HPDDM_PRECISION_SINGLE    = 1,
  KSP_HPDDM_PRECISION_DOUBLE    = 2,
  KSP_HPDDM_PRECISION_QUADRUPLE = 3
} KSPHPDDMPrecision;
extern __attribute__((visibility("default"))) PetscErrorCode KSPHPDDMSetType(KSP, KSPHPDDMType);
extern __attribute__((visibility("default"))) PetscErrorCode KSPHPDDMGetType(KSP, KSPHPDDMType *);









 
typedef enum {
  KSP_GMRES_CGS_REFINE_NEVER,
  KSP_GMRES_CGS_REFINE_IFNEEDED,
  KSP_GMRES_CGS_REFINE_ALWAYS
} KSPGMRESCGSRefinementType;
extern __attribute__((visibility("default"))) const char *const KSPGMRESCGSRefinementTypes[];











 














 















 

extern __attribute__((visibility("default"))) PetscErrorCode KSPGMRESSetCGSRefinementType(KSP, KSPGMRESCGSRefinementType);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGMRESGetCGSRefinementType(KSP, KSPGMRESCGSRefinementType *);

extern __attribute__((visibility("default"))) PetscErrorCode KSPFGMRESModifyPCNoChange(KSP, PetscInt, PetscInt, PetscReal, void *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPFGMRESModifyPCKSP(KSP, PetscInt, PetscInt, PetscReal, void *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPFGMRESSetModifyPC(KSP, PetscErrorCode (*)(KSP, PetscInt, PetscInt, PetscReal, void *), void *, PetscErrorCode (*)(void *));

extern __attribute__((visibility("default"))) PetscErrorCode KSPQCGSetTrustRegionRadius(KSP, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode KSPQCGGetQuadratic(KSP, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPQCGGetTrialStepNorm(KSP, PetscReal *);

extern __attribute__((visibility("default"))) PetscErrorCode KSPBCGSLSetXRes(KSP, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode KSPBCGSLSetPol(KSP, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode KSPBCGSLSetEll(KSP, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode KSPBCGSLSetUsePseudoinverse(KSP, PetscBool);

extern __attribute__((visibility("default"))) PetscErrorCode KSPSetFromOptions(KSP);
extern __attribute__((visibility("default"))) PetscErrorCode KSPResetFromOptions(KSP);
extern __attribute__((visibility("default"))) PetscErrorCode KSPAddOptionsChecker(PetscErrorCode (*)(KSP));

extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorSetFromOptions(KSP, const char[], const char[], void *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorLGCreate(MPI_Comm, const char[], const char[], const char[], PetscInt, const char *[], int, int, int, int, PetscDrawLG *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorResidual(KSP, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorResidualDraw(KSP, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorResidualDrawLG(KSP, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorResidualDrawLGCreate(PetscViewer, PetscViewerFormat, void *, PetscViewerAndFormat **);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorResidualShort(KSP, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorResidualRange(KSP, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorTrueResidual(KSP, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorTrueResidualDraw(KSP, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorTrueResidualDrawLG(KSP, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorTrueResidualDrawLGCreate(PetscViewer, PetscViewerFormat, void *, PetscViewerAndFormat **);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorTrueResidualMax(KSP, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorError(KSP, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorErrorDraw(KSP, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorErrorDrawLG(KSP, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorErrorDrawLGCreate(PetscViewer, PetscViewerFormat, void *, PetscViewerAndFormat **);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorSolution(KSP, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorSolutionDraw(KSP, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorSolutionDrawLG(KSP, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorSolutionDrawLGCreate(PetscViewer, PetscViewerFormat, void *, PetscViewerAndFormat **);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorSingularValue(KSP, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorSingularValueCreate(PetscViewer, PetscViewerFormat, void *, PetscViewerAndFormat **);
__attribute__((deprecated)) static inline PetscErrorCode KSPMonitorDefault(KSP ksp, PetscInt n, PetscReal rnorm, PetscViewerAndFormat *vf)
{
  return KSPMonitorResidual(ksp, n, rnorm, vf);
}
__attribute__((deprecated)) static inline PetscErrorCode KSPMonitorTrueResidualNorm(KSP ksp, PetscInt n, PetscReal rnorm, PetscViewerAndFormat *vf)
{
  return KSPMonitorTrueResidual(ksp, n, rnorm, vf);
}
__attribute__((deprecated)) static inline PetscErrorCode KSPMonitorTrueResidualMaxNorm(KSP ksp, PetscInt n, PetscReal rnorm, PetscViewerAndFormat *vf)
{
  return KSPMonitorTrueResidualMax(ksp, n, rnorm, vf);
}

extern __attribute__((visibility("default"))) PetscErrorCode KSPGMRESMonitorKrylov(KSP, PetscInt, PetscReal, void *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorDynamicTolerance(KSP ksp, PetscInt its, PetscReal fnorm, void *dummy);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorDynamicToleranceDestroy(void **dummy);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorSAWs(KSP, PetscInt, PetscReal, void *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorSAWsCreate(KSP, void **);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorSAWsDestroy(void **);

extern __attribute__((visibility("default"))) PetscErrorCode KSPUnwindPreconditioner(KSP, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode KSPInitialResidual(KSP, Vec, Vec, Vec, Vec, Vec);

extern __attribute__((visibility("default"))) PetscErrorCode KSPSetOperators(KSP, Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetOperators(KSP, Mat *, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetOperatorsSet(KSP, PetscBool *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetOptionsPrefix(KSP, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode KSPAppendOptionsPrefix(KSP, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetOptionsPrefix(KSP, const char *[]);

extern __attribute__((visibility("default"))) PetscErrorCode KSPSetDiagonalScale(KSP, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetDiagonalScale(KSP, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetDiagonalScaleFix(KSP, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetDiagonalScaleFix(KSP, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode KSPView(KSP, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode KSPLoad(KSP, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode KSPViewFromOptions(KSP, PetscObject, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode KSPConvergedReasonView(KSP, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode KSPConvergedReasonViewSet(KSP, PetscErrorCode (*)(KSP, void *), void *vctx, PetscErrorCode (*)(void **));
extern __attribute__((visibility("default"))) PetscErrorCode KSPConvergedReasonViewFromOptions(KSP);
extern __attribute__((visibility("default"))) PetscErrorCode KSPConvergedReasonViewCancel(KSP);
extern __attribute__((visibility("default"))) PetscErrorCode KSPConvergedRateView(KSP, PetscViewer);

__attribute__((deprecated)) static inline PetscErrorCode KSPReasonView(KSP ksp, PetscViewer v)
{
  return KSPConvergedReasonView(ksp, v);
}
__attribute__((deprecated)) static inline PetscErrorCode KSPReasonViewFromOptions(KSP ksp)
{
  return KSPConvergedReasonViewFromOptions(ksp);
}



extern __attribute__((visibility("default"))) PetscErrorCode KSPLSQRSetExactMatNorm(KSP, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode KSPLSQRSetComputeStandardErrorVec(KSP, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode KSPLSQRGetStandardErrorVec(KSP, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPLSQRGetNorms(KSP, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPLSQRMonitorResidual(KSP, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPLSQRMonitorResidualDrawLG(KSP, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPLSQRMonitorResidualDrawLGCreate(PetscViewer, PetscViewerFormat, void *, PetscViewerAndFormat **);

extern __attribute__((visibility("default"))) PetscErrorCode PCRedundantGetKSP(PC, KSP *);
extern __attribute__((visibility("default"))) PetscErrorCode PCRedistributeGetKSP(PC, KSP *);
extern __attribute__((visibility("default"))) PetscErrorCode PCTelescopeGetKSP(PC, KSP *);















 
typedef enum {
  KSP_NORM_DEFAULT          = -1,
  KSP_NORM_NONE             = 0,
  KSP_NORM_PRECONDITIONED   = 1,
  KSP_NORM_UNPRECONDITIONED = 2,
  KSP_NORM_NATURAL          = 3
} KSPNormType;

extern __attribute__((visibility("default"))) const char *const *const KSPNormTypes;











 








 








 








 

extern __attribute__((visibility("default"))) PetscErrorCode KSPSetNormType(KSP, KSPNormType);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetNormType(KSP, KSPNormType *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetSupportedNorm(KSP ksp, KSPNormType, PCSide, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetCheckNormIteration(KSP, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetLagNorm(KSP, PetscBool);

















 
typedef enum {  
  KSP_CONVERGED_RTOL_NORMAL     = 1,
  KSP_CONVERGED_ATOL_NORMAL     = 9,
  KSP_CONVERGED_RTOL            = 2,
  KSP_CONVERGED_ATOL            = 3,
  KSP_CONVERGED_ITS             = 4,
  KSP_CONVERGED_CG_NEG_CURVE    = 5,
  KSP_CONVERGED_CG_CONSTRAINED  = 6,
  KSP_CONVERGED_STEP_LENGTH     = 7,
  KSP_CONVERGED_HAPPY_BREAKDOWN = 8,
   
  KSP_DIVERGED_NULL                      = -2,
  KSP_DIVERGED_ITS                       = -3,
  KSP_DIVERGED_DTOL                      = -4,
  KSP_DIVERGED_BREAKDOWN                 = -5,
  KSP_DIVERGED_BREAKDOWN_BICG            = -6,
  KSP_DIVERGED_NONSYMMETRIC              = -7,
  KSP_DIVERGED_INDEFINITE_PC             = -8,
  KSP_DIVERGED_NANORINF                  = -9,
  KSP_DIVERGED_INDEFINITE_MAT            = -10,
  KSP_DIVERGED_PC_FAILED                 = -11,
  KSP_DIVERGED_PCSETUP_FAILED  = -11,

  KSP_CONVERGED_ITERATING = 0
} KSPConvergedReason;
extern __attribute__((visibility("default"))) const char *const *KSPConvergedReasons;














 














 














 









 










 











 









 









 














 













 









 

extern __attribute__((visibility("default"))) PetscErrorCode KSPSetConvergenceTest(KSP, PetscErrorCode (*)(KSP, PetscInt, PetscReal, KSPConvergedReason *, void *), void *, PetscErrorCode (*)(void *));
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetConvergenceTest(KSP, PetscErrorCode (**)(KSP, PetscInt, PetscReal, KSPConvergedReason *, void *), void **, PetscErrorCode (**)(void *));
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetAndClearConvergenceTest(KSP, PetscErrorCode (**)(KSP, PetscInt, PetscReal, KSPConvergedReason *, void *), void **, PetscErrorCode (**)(void *));
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetConvergenceContext(KSP, void *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPConvergedDefault(KSP, PetscInt, PetscReal, KSPConvergedReason *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPLSQRConvergedDefault(KSP, PetscInt, PetscReal, KSPConvergedReason *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPConvergedDefaultDestroy(void *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPConvergedDefaultCreate(void **);
extern __attribute__((visibility("default"))) PetscErrorCode KSPConvergedDefaultSetUIRNorm(KSP);
extern __attribute__((visibility("default"))) PetscErrorCode KSPConvergedDefaultSetUMIRNorm(KSP);
extern __attribute__((visibility("default"))) PetscErrorCode KSPConvergedDefaultSetConvergedMaxits(KSP, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode KSPConvergedSkip(KSP, PetscInt, PetscReal, KSPConvergedReason *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetConvergedReason(KSP, KSPConvergedReason *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetConvergedReasonString(KSP, const char **);
extern __attribute__((visibility("default"))) PetscErrorCode KSPComputeConvergenceRate(KSP, PetscReal *, PetscReal *, PetscReal *, PetscReal *);

__attribute__((deprecated)) static inline void KSPDefaultConverged(void)
{  
}

__attribute__((deprecated)) static inline void KSPDefaultConvergedDestroy(void)
{  
}

__attribute__((deprecated)) static inline void KSPDefaultConvergedCreate(void)
{  
}

__attribute__((deprecated)) static inline void KSPDefaultConvergedSetUIRNorm(void)
{  
}

__attribute__((deprecated)) static inline void KSPDefaultConvergedSetUMIRNorm(void)
{  
}

__attribute__((deprecated)) static inline void KSPSkipConverged(void)
{  
}


extern __attribute__((visibility("default"))) PetscErrorCode KSPComputeOperator(KSP, MatType, Mat *);
__attribute__((deprecated)) static inline PetscErrorCode KSPComputeExplicitOperator(KSP A, Mat *B)
{
  return KSPComputeOperator(A, ((void*)0), B);
}







 
typedef enum {
  KSP_CG_SYMMETRIC = 0,
  KSP_CG_HERMITIAN = 1
} KSPCGType;
extern __attribute__((visibility("default"))) const char *const KSPCGTypes[];

extern __attribute__((visibility("default"))) PetscErrorCode KSPCGSetType(KSP, KSPCGType);
extern __attribute__((visibility("default"))) PetscErrorCode KSPCGUseSingleReduction(KSP, PetscBool);

extern __attribute__((visibility("default"))) PetscErrorCode KSPCGSetRadius(KSP, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode KSPCGGetNormD(KSP, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPCGGetObjFcn(KSP, PetscReal *);

extern __attribute__((visibility("default"))) PetscErrorCode KSPGLTRGetMinEig(KSP, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGLTRGetLambda(KSP, PetscReal *);
__attribute__((deprecated)) static inline PetscErrorCode KSPCGGLTRGetMinEig(KSP ksp, PetscReal *x)
{
  return KSPGLTRGetMinEig(ksp, x);
}
__attribute__((deprecated)) static inline PetscErrorCode KSPCGGLTRGetLambda(KSP ksp, PetscReal *x)
{
  return KSPGLTRGetLambda(ksp, x);
}

extern __attribute__((visibility("default"))) PetscErrorCode KSPPythonSetType(KSP, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode KSPPythonGetType(KSP, const char *[]);

extern __attribute__((visibility("default"))) PetscErrorCode PCSetPreSolve(PC, PetscErrorCode (*)(PC, KSP));
extern __attribute__((visibility("default"))) PetscErrorCode PCPreSolve(PC, KSP);
extern __attribute__((visibility("default"))) PetscErrorCode PCPostSolve(PC, KSP);


extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorLGRange(KSP, PetscInt, PetscReal, void *);

extern __attribute__((visibility("default"))) PetscErrorCode PCShellSetPreSolve(PC, PetscErrorCode (*)(PC, KSP, Vec, Vec));
extern __attribute__((visibility("default"))) PetscErrorCode PCShellSetPostSolve(PC, PetscErrorCode (*)(PC, KSP, Vec, Vec));







 
typedef struct _p_KSPGuess *KSPGuess;






 
typedef const char *KSPGuessType;


extern __attribute__((visibility("default"))) PetscErrorCode KSPGuessRegister(const char[], PetscErrorCode (*)(KSPGuess));
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetGuess(KSP, KSPGuess);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetGuess(KSP, KSPGuess *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGuessView(KSPGuess, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGuessDestroy(KSPGuess *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGuessCreate(MPI_Comm, KSPGuess *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGuessSetType(KSPGuess, KSPGuessType);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGuessGetType(KSPGuess, KSPGuessType *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGuessSetTolerance(KSPGuess, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGuessSetUp(KSPGuess);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGuessUpdate(KSPGuess, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGuessFormGuess(KSPGuess, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGuessSetFromOptions(KSPGuess);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGuessFischerSetModel(KSPGuess, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetUseFischerGuess(KSP, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetInitialGuessKnoll(KSP, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetInitialGuessKnoll(KSP, PetscBool *);







 
typedef enum {
  MAT_SCHUR_COMPLEMENT_AINV_DIAG,
  MAT_SCHUR_COMPLEMENT_AINV_LUMP,
  MAT_SCHUR_COMPLEMENT_AINV_BLOCK_DIAG,
  MAT_SCHUR_COMPLEMENT_AINV_FULL
} MatSchurComplementAinvType;
extern __attribute__((visibility("default"))) const char *const MatSchurComplementAinvTypes[];

typedef enum {
  MAT_LMVM_SYMBROYDEN_SCALE_NONE     = 0,
  MAT_LMVM_SYMBROYDEN_SCALE_SCALAR   = 1,
  MAT_LMVM_SYMBROYDEN_SCALE_DIAGONAL = 2,
  MAT_LMVM_SYMBROYDEN_SCALE_USER     = 3
} MatLMVMSymBroydenScaleType;
extern __attribute__((visibility("default"))) const char *const MatLMVMSymBroydenScaleTypes[];

extern __attribute__((visibility("default"))) PetscErrorCode MatCreateSchurComplement(Mat, Mat, Mat, Mat, Mat, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatSchurComplementGetKSP(Mat, KSP *);
extern __attribute__((visibility("default"))) PetscErrorCode MatSchurComplementSetKSP(Mat, KSP);
extern __attribute__((visibility("default"))) PetscErrorCode MatSchurComplementSetSubMatrices(Mat, Mat, Mat, Mat, Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatSchurComplementUpdateSubMatrices(Mat, Mat, Mat, Mat, Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatSchurComplementGetSubMatrices(Mat, Mat *, Mat *, Mat *, Mat *, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatSchurComplementSetAinvType(Mat, MatSchurComplementAinvType);
extern __attribute__((visibility("default"))) PetscErrorCode MatSchurComplementGetAinvType(Mat, MatSchurComplementAinvType *);
extern __attribute__((visibility("default"))) PetscErrorCode MatSchurComplementGetPmat(Mat, MatReuse, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatSchurComplementComputeExplicitOperator(Mat, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatGetSchurComplement(Mat, IS, IS, IS, IS, MatReuse, Mat *, MatSchurComplementAinvType, MatReuse, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateSchurComplementPmat(Mat, Mat, Mat, Mat, MatSchurComplementAinvType, MatReuse, Mat *);

extern __attribute__((visibility("default"))) PetscErrorCode MatCreateLMVMDFP(MPI_Comm, PetscInt, PetscInt, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateLMVMBFGS(MPI_Comm, PetscInt, PetscInt, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateLMVMSR1(MPI_Comm, PetscInt, PetscInt, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateLMVMBroyden(MPI_Comm, PetscInt, PetscInt, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateLMVMBadBroyden(MPI_Comm, PetscInt, PetscInt, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateLMVMSymBroyden(MPI_Comm, PetscInt, PetscInt, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateLMVMSymBadBroyden(MPI_Comm, PetscInt, PetscInt, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateLMVMDiagBroyden(MPI_Comm, PetscInt, PetscInt, Mat *);

extern __attribute__((visibility("default"))) PetscErrorCode MatLMVMUpdate(Mat, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatLMVMIsAllocated(Mat, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatLMVMAllocate(Mat, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatLMVMReset(Mat, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode MatLMVMResetShift(Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatLMVMClearJ0(Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatLMVMSetJ0(Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode MatLMVMSetJ0Scale(Mat, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode MatLMVMSetJ0Diag(Mat, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatLMVMSetJ0PC(Mat, PC);
extern __attribute__((visibility("default"))) PetscErrorCode MatLMVMSetJ0KSP(Mat, KSP);
extern __attribute__((visibility("default"))) PetscErrorCode MatLMVMApplyJ0Fwd(Mat, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatLMVMApplyJ0Inv(Mat, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatLMVMGetJ0(Mat, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatLMVMGetJ0PC(Mat, PC *);
extern __attribute__((visibility("default"))) PetscErrorCode MatLMVMGetJ0KSP(Mat, KSP *);
extern __attribute__((visibility("default"))) PetscErrorCode MatLMVMSetHistorySize(Mat, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode MatLMVMGetUpdateCount(Mat, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode MatLMVMGetRejectCount(Mat, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode MatLMVMSymBroydenSetDelta(Mat, PetscScalar);
extern __attribute__((visibility("default"))) PetscErrorCode MatLMVMSymBroydenSetScaleType(Mat, MatLMVMSymBroydenScaleType);

extern __attribute__((visibility("default"))) PetscErrorCode KSPSetDM(KSP, DM);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetDMActive(KSP, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetDM(KSP, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetApplicationContext(KSP, void *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPGetApplicationContext(KSP, void *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetComputeRHS(KSP, PetscErrorCode (*func)(KSP, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetComputeOperators(KSP, PetscErrorCode (*)(KSP, Mat, Mat, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPSetComputeInitialGuess(KSP, PetscErrorCode (*)(KSP, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMKSPSetComputeOperators(DM, PetscErrorCode (*)(KSP, Mat, Mat, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMKSPGetComputeOperators(DM, PetscErrorCode (**)(KSP, Mat, Mat, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMKSPSetComputeRHS(DM, PetscErrorCode (*)(KSP, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMKSPGetComputeRHS(DM, PetscErrorCode (**)(KSP, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMKSPSetComputeInitialGuess(DM, PetscErrorCode (*)(KSP, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMKSPGetComputeInitialGuess(DM, PetscErrorCode (**)(KSP, Vec, void *), void *);

extern __attribute__((visibility("default"))) PetscErrorCode DMGlobalToLocalSolve(DM, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMProjectField(DM, PetscReal, Vec, void (**)(PetscInt, PetscInt, PetscInt, const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], const PetscInt[], const PetscInt[], const PetscScalar[], const PetscScalar[], const PetscScalar[], PetscReal, const PetscReal[], PetscInt, const PetscScalar[], PetscScalar[]), InsertMode, Vec);

extern __attribute__((visibility("default"))) PetscErrorCode DMAdaptInterpolator(DM, DM, Mat, KSP, Mat, Mat, Mat *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMCheckInterpolator(DM, Mat, Mat, Mat, PetscReal);
# 8 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsnes.h" 2




 







 
typedef struct _p_SNES *SNES;







 
typedef const char *SNESType;
# 52 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsnes.h"

 
extern __attribute__((visibility("default"))) PetscClassId SNES_CLASSID;
extern __attribute__((visibility("default"))) PetscClassId DMSNES_CLASSID;

extern __attribute__((visibility("default"))) PetscErrorCode SNESInitializePackage(void);

extern __attribute__((visibility("default"))) PetscErrorCode SNESCreate(MPI_Comm, SNES *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESReset(SNES);
extern __attribute__((visibility("default"))) PetscErrorCode SNESDestroy(SNES *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetType(SNES, SNESType);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMonitor(SNES, PetscInt, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMonitorSet(SNES, PetscErrorCode (*)(SNES, PetscInt, PetscReal, void *), void *, PetscErrorCode (*)(void **));
extern __attribute__((visibility("default"))) PetscErrorCode SNESMonitorSetFromOptions(SNES, const char[], const char[], const char[], PetscErrorCode (*)(SNES, PetscInt, PetscReal, PetscViewerAndFormat *), PetscErrorCode (*)(SNES, PetscViewerAndFormat *));
extern __attribute__((visibility("default"))) PetscErrorCode SNESMonitorCancel(SNES);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMonitorSAWs(SNES, PetscInt, PetscReal, void *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMonitorSAWsCreate(SNES, void **);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMonitorSAWsDestroy(void **);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetConvergenceHistory(SNES, PetscReal[], PetscInt[], PetscInt, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetConvergenceHistory(SNES, PetscReal *[], PetscInt *[], PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetUp(SNES);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSolve(SNES, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetErrorIfNotConverged(SNES, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetErrorIfNotConverged(SNES, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode SNESSetWorkVecs(SNES, PetscInt);

extern __attribute__((visibility("default"))) PetscErrorCode SNESAddOptionsChecker(PetscErrorCode (*)(SNES));

extern __attribute__((visibility("default"))) PetscErrorCode SNESSetUpdate(SNES, PetscErrorCode (*)(SNES, PetscInt));

extern __attribute__((visibility("default"))) PetscErrorCode SNESRegister(const char[], PetscErrorCode (*)(SNES));

extern __attribute__((visibility("default"))) PetscErrorCode SNESGetKSP(SNES, KSP *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetKSP(SNES, KSP);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetSolution(SNES, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetSolution(SNES, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetSolutionUpdate(SNES, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetRhs(SNES, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESView(SNES, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLoad(SNES, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode SNESConvergedReasonViewSet(SNES, PetscErrorCode (*)(SNES, void *), void *, PetscErrorCode (*)(void **));
extern __attribute__((visibility("default"))) PetscErrorCode SNESViewFromOptions(SNES, PetscObject, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode SNESConvergedReasonView(SNES, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode SNESConvergedReasonViewFromOptions(SNES);
extern __attribute__((visibility("default"))) PetscErrorCode SNESConvergedReasonViewCancel(SNES);

__attribute__((deprecated)) static inline PetscErrorCode SNESReasonView(SNES snes, PetscViewer v)
{
  return SNESConvergedReasonView(snes, v);
}
__attribute__((deprecated)) static inline PetscErrorCode SNESReasonViewFromOptions(SNES snes)
{
  return SNESConvergedReasonViewFromOptions(snes);
}



extern __attribute__((visibility("default"))) PetscErrorCode SNESSetOptionsPrefix(SNES, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode SNESAppendOptionsPrefix(SNES, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetOptionsPrefix(SNES, const char *[]);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetFromOptions(SNES);
extern __attribute__((visibility("default"))) PetscErrorCode SNESResetFromOptions(SNES);

extern __attribute__((visibility("default"))) PetscErrorCode SNESSetUseMatrixFree(SNES, PetscBool, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetUseMatrixFree(SNES, PetscBool *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateSNESMF(SNES, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatSNESMFGetSNES(Mat, SNES *);
extern __attribute__((visibility("default"))) PetscErrorCode MatSNESMFSetReuseBase(Mat, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode MatSNESMFGetReuseBase(Mat, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode MatMFFDComputeJacobian(SNES, Vec, Mat, Mat, void *);
extern __attribute__((visibility("default"))) PetscErrorCode MatCreateSNESMFMore(SNES, Vec, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode MatSNESMFMoreSetParameters(Mat, PetscReal, PetscReal, PetscReal);

extern __attribute__((visibility("default"))) PetscErrorCode SNESGetType(SNES, SNESType *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMonitorDefaultSetUp(SNES, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMonitorDefault(SNES, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMonitorScaling(SNES, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMonitorRange(SNES, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMonitorRatio(SNES, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMonitorRatioSetUp(SNES, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMonitorSolution(SNES, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMonitorResidual(SNES, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMonitorSolutionUpdate(SNES, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMonitorDefaultShort(SNES, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMonitorDefaultField(SNES, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMonitorJacUpdateSpectrum(SNES, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMonitorFields(SNES, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorSNESResidual(KSP, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorSNESResidualDrawLG(KSP, PetscInt, PetscReal, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode KSPMonitorSNESResidualDrawLGCreate(PetscViewer, PetscViewerFormat, void *, PetscViewerAndFormat **);

extern __attribute__((visibility("default"))) PetscErrorCode SNESSetTolerances(SNES, PetscReal, PetscReal, PetscReal, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetDivergenceTolerance(SNES, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetTolerances(SNES, PetscReal *, PetscReal *, PetscReal *, PetscInt *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetDivergenceTolerance(SNES, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetTrustRegionTolerance(SNES, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetForceIteration(SNES, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetForceIteration(SNES, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetIterationNumber(SNES, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetIterationNumber(SNES, PetscInt);

extern __attribute__((visibility("default"))) PetscErrorCode SNESNewtonTRSetPreCheck(SNES, PetscErrorCode (*)(SNES, Vec, Vec, PetscBool *, void *), void *ctx);
extern __attribute__((visibility("default"))) PetscErrorCode SNESNewtonTRGetPreCheck(SNES, PetscErrorCode (**)(SNES, Vec, Vec, PetscBool *, void *), void **ctx);
extern __attribute__((visibility("default"))) PetscErrorCode SNESNewtonTRSetPostCheck(SNES, PetscErrorCode (*)(SNES, Vec, Vec, Vec, PetscBool *, PetscBool *, void *), void *ctx);
extern __attribute__((visibility("default"))) PetscErrorCode SNESNewtonTRGetPostCheck(SNES, PetscErrorCode (**)(SNES, Vec, Vec, Vec, PetscBool *, PetscBool *, void *), void **ctx);

extern __attribute__((visibility("default"))) PetscErrorCode SNESNewtonTRDCGetRhoFlag(SNES, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESNewtonTRDCSetPreCheck(SNES, PetscErrorCode (*)(SNES, Vec, Vec, PetscBool *, void *), void *ctx);
extern __attribute__((visibility("default"))) PetscErrorCode SNESNewtonTRDCGetPreCheck(SNES, PetscErrorCode (**)(SNES, Vec, Vec, PetscBool *, void *), void **ctx);
extern __attribute__((visibility("default"))) PetscErrorCode SNESNewtonTRDCSetPostCheck(SNES, PetscErrorCode (*)(SNES, Vec, Vec, Vec, PetscBool *, PetscBool *, void *), void *ctx);
extern __attribute__((visibility("default"))) PetscErrorCode SNESNewtonTRDCGetPostCheck(SNES, PetscErrorCode (**)(SNES, Vec, Vec, Vec, PetscBool *, PetscBool *, void *), void **ctx);

extern __attribute__((visibility("default"))) PetscErrorCode SNESGetNonlinearStepFailures(SNES, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetMaxNonlinearStepFailures(SNES, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetMaxNonlinearStepFailures(SNES, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetNumberFunctionEvals(SNES, PetscInt *);

extern __attribute__((visibility("default"))) PetscErrorCode SNESSetLagPreconditioner(SNES, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetLagPreconditioner(SNES, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetLagJacobian(SNES, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetLagJacobian(SNES, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetLagPreconditionerPersists(SNES, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetLagJacobianPersists(SNES, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetGridSequence(SNES, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetGridSequence(SNES, PetscInt *);

extern __attribute__((visibility("default"))) PetscErrorCode SNESGetLinearSolveIterations(SNES, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetLinearSolveFailures(SNES, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetMaxLinearSolveFailures(SNES, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetMaxLinearSolveFailures(SNES, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetCountersReset(SNES, PetscBool);

extern __attribute__((visibility("default"))) PetscErrorCode SNESKSPSetUseEW(SNES, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode SNESKSPGetUseEW(SNES, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESKSPSetParametersEW(SNES, PetscInt, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode SNESKSPGetParametersEW(SNES, PetscInt *, PetscReal *, PetscReal *, PetscReal *, PetscReal *, PetscReal *, PetscReal *);


extern __attribute__((visibility("default"))) PetscErrorCode SNESMonitorLGRange(SNES, PetscInt, PetscReal, void *);

extern __attribute__((visibility("default"))) PetscErrorCode SNESSetApplicationContext(SNES, void *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetApplicationContext(SNES, void *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetComputeApplicationContext(SNES, PetscErrorCode (*)(SNES, void **), PetscErrorCode (*)(void **));

extern __attribute__((visibility("default"))) PetscErrorCode SNESPythonSetType(SNES, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode SNESPythonGetType(SNES, const char *[]);

extern __attribute__((visibility("default"))) PetscErrorCode SNESSetFunctionDomainError(SNES);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetFunctionDomainError(SNES, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetJacobianDomainError(SNES, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetJacobianDomainError(SNES);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetCheckJacobianDomainError(SNES, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetCheckJacobianDomainError(SNES, PetscBool *);
















































 
typedef enum {                        
  SNES_CONVERGED_FNORM_ABS      = 2,  
  SNES_CONVERGED_FNORM_RELATIVE = 3,  
  SNES_CONVERGED_SNORM_RELATIVE = 4,  
  SNES_CONVERGED_ITS            = 5,  
  SNES_BREAKOUT_INNER_ITER      = 6,  
                                      
   
  SNES_DIVERGED_FUNCTION_DOMAIN      = -1,  
  SNES_DIVERGED_FUNCTION_COUNT       = -2,
  SNES_DIVERGED_LINEAR_SOLVE         = -3,  
  SNES_DIVERGED_FNORM_NAN            = -4,
  SNES_DIVERGED_MAX_IT               = -5,
  SNES_DIVERGED_LINE_SEARCH          = -6,   
  SNES_DIVERGED_INNER                = -7,   
  SNES_DIVERGED_LOCAL_MIN            = -8,   
  SNES_DIVERGED_DTOL                 = -9,   
  SNES_DIVERGED_JACOBIAN_DOMAIN      = -10,  
  SNES_DIVERGED_TR_DELTA             = -11,
  SNES_CONVERGED_TR_DELTA  = -11,

  SNES_CONVERGED_ITERATING = 0
} SNESConvergedReason;
extern __attribute__((visibility("default"))) const char *const *SNESConvergedReasons;








 








 












 









 








 









 








 








 









 








 

extern __attribute__((visibility("default"))) PetscErrorCode SNESSetConvergenceTest(SNES, PetscErrorCode (*)(SNES, PetscInt, PetscReal, PetscReal, PetscReal, SNESConvergedReason *, void *), void *, PetscErrorCode (*)(void *));
extern __attribute__((visibility("default"))) PetscErrorCode SNESConvergedDefault(SNES, PetscInt, PetscReal, PetscReal, PetscReal, SNESConvergedReason *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESConvergedSkip(SNES, PetscInt, PetscReal, PetscReal, PetscReal, SNESConvergedReason *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESConvergedCorrectPressure(SNES, PetscInt, PetscReal, PetscReal, PetscReal, SNESConvergedReason *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetConvergedReason(SNES, SNESConvergedReason *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetConvergedReasonString(SNES, const char **);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetConvergedReason(SNES, SNESConvergedReason);

__attribute__((deprecated)) static inline void SNESSkipConverged(void)
{  
}


 
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetFunction(SNES, Vec, PetscErrorCode (*)(SNES, Vec, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetFunction(SNES, Vec *, PetscErrorCode (**)(SNES, Vec, Vec, void *), void **);
extern __attribute__((visibility("default"))) PetscErrorCode SNESComputeFunction(SNES, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode SNESComputeMFFunction(SNES, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetInitialFunction(SNES, Vec);

extern __attribute__((visibility("default"))) PetscErrorCode SNESSetJacobian(SNES, Mat, Mat, PetscErrorCode (*)(SNES, Vec, Mat, Mat, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetJacobian(SNES, Mat *, Mat *, PetscErrorCode (**)(SNES, Vec, Mat, Mat, void *), void **);
extern __attribute__((visibility("default"))) PetscErrorCode SNESObjectiveComputeFunctionDefaultFD(SNES, Vec, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESComputeJacobianDefault(SNES, Vec, Mat, Mat, void *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESComputeJacobianDefaultColor(SNES, Vec, Mat, Mat, void *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetComputeInitialGuess(SNES, PetscErrorCode (*)(SNES, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetPicard(SNES, Vec, PetscErrorCode (*)(SNES, Vec, Vec, void *), Mat, Mat, PetscErrorCode (*)(SNES, Vec, Mat, Mat, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetPicard(SNES, Vec *, PetscErrorCode (**)(SNES, Vec, Vec, void *), Mat *, Mat *, PetscErrorCode (**)(SNES, Vec, Mat, Mat, void *), void **);
extern __attribute__((visibility("default"))) PetscErrorCode SNESPicardComputeFunction(SNES, Vec, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESPicardComputeMFFunction(SNES, Vec, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESPicardComputeJacobian(SNES, Vec, Mat, Mat, void *);

extern __attribute__((visibility("default"))) PetscErrorCode SNESSetObjective(SNES, PetscErrorCode (*)(SNES, Vec, PetscReal *, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetObjective(SNES, PetscErrorCode (**)(SNES, Vec, PetscReal *, void *), void **);
extern __attribute__((visibility("default"))) PetscErrorCode SNESComputeObjective(SNES, Vec, PetscReal *);














 

typedef enum {
  SNES_NORM_DEFAULT            = -1,
  SNES_NORM_NONE               = 0,
  SNES_NORM_ALWAYS             = 1,
  SNES_NORM_INITIAL_ONLY       = 2,
  SNES_NORM_FINAL_ONLY         = 3,
  SNES_NORM_INITIAL_FINAL_ONLY = 4
} SNESNormSchedule;
extern __attribute__((visibility("default"))) const char *const *const SNESNormSchedules;










 










 














 













 










 

extern __attribute__((visibility("default"))) PetscErrorCode SNESSetNormSchedule(SNES, SNESNormSchedule);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetNormSchedule(SNES, SNESNormSchedule *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetFunctionNorm(SNES, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetFunctionNorm(SNES, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetUpdateNorm(SNES, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetSolutionNorm(SNES, PetscReal *);










 
typedef enum {
  SNES_FUNCTION_DEFAULT          = -1,
  SNES_FUNCTION_UNPRECONDITIONED = 0,
  SNES_FUNCTION_PRECONDITIONED   = 1
} SNESFunctionType;
extern __attribute__((visibility("default"))) const char *const *const SNESFunctionTypes;

extern __attribute__((visibility("default"))) PetscErrorCode SNESSetFunctionType(SNES, SNESFunctionType);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetFunctionType(SNES, SNESFunctionType *);

extern __attribute__((visibility("default"))) PetscErrorCode SNESSetNGS(SNES, PetscErrorCode (*)(SNES, Vec, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetNGS(SNES, PetscErrorCode (**)(SNES, Vec, Vec, void *), void **);
extern __attribute__((visibility("default"))) PetscErrorCode SNESComputeNGS(SNES, Vec, Vec);

extern __attribute__((visibility("default"))) PetscErrorCode SNESNGSSetSweeps(SNES, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode SNESNGSGetSweeps(SNES, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESNGSSetTolerances(SNES, PetscReal, PetscReal, PetscReal, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode SNESNGSGetTolerances(SNES, PetscReal *, PetscReal *, PetscReal *, PetscInt *);

extern __attribute__((visibility("default"))) PetscErrorCode SNESSetAlwaysComputesFinalResidual(SNES, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetAlwaysComputesFinalResidual(SNES, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode SNESShellGetContext(SNES, void *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESShellSetContext(SNES, void *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESShellSetSolve(SNES, PetscErrorCode (*)(SNES, Vec));

 







 
typedef struct _p_LineSearch *SNESLineSearch;







 
typedef const char *SNESLineSearchType;
# 570 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsnes.h"

extern __attribute__((visibility("default"))) PetscFunctionList SNESList;
extern __attribute__((visibility("default"))) PetscClassId      SNESLINESEARCH_CLASSID;
extern __attribute__((visibility("default"))) PetscFunctionList SNESLineSearchList;





 typedef PetscErrorCode (*SNESLineSearchVIProjectFunc)(SNES, Vec);
 typedef PetscErrorCode (*SNESLineSearchVINormFunc)(SNES, Vec, Vec, PetscReal *);
 typedef PetscErrorCode (*SNESLineSearchApplyFunc)(SNESLineSearch);
 typedef PetscErrorCode (*SNESLineSearchUserFunc)(SNESLineSearch, void *);

extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchCreate(MPI_Comm, SNESLineSearch *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchReset(SNESLineSearch);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchView(SNESLineSearch, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchDestroy(SNESLineSearch *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchGetType(SNESLineSearch, SNESLineSearchType *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchSetType(SNESLineSearch, SNESLineSearchType);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchSetFromOptions(SNESLineSearch);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchSetFunction(SNESLineSearch, PetscErrorCode (*)(SNES, Vec, Vec));
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchSetUp(SNESLineSearch);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchApply(SNESLineSearch, Vec, Vec, PetscReal *, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchPreCheck(SNESLineSearch, Vec, Vec, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchPostCheck(SNESLineSearch, Vec, Vec, Vec, PetscBool *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchSetWorkVecs(SNESLineSearch, PetscInt);

 

extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchSetPreCheck(SNESLineSearch, PetscErrorCode (*)(SNESLineSearch, Vec, Vec, PetscBool *, void *), void *ctx);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchSetPostCheck(SNESLineSearch, PetscErrorCode (*)(SNESLineSearch, Vec, Vec, Vec, PetscBool *, PetscBool *, void *), void *ctx);

extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchGetPreCheck(SNESLineSearch, PetscErrorCode (**)(SNESLineSearch, Vec, Vec, PetscBool *, void *), void **ctx);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchGetPostCheck(SNESLineSearch, PetscErrorCode (**)(SNESLineSearch, Vec, Vec, Vec, PetscBool *, PetscBool *, void *), void **ctx);

 

extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchSetVIFunctions(SNESLineSearch, SNESLineSearchVIProjectFunc, SNESLineSearchVINormFunc);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchGetVIFunctions(SNESLineSearch, SNESLineSearchVIProjectFunc *, SNESLineSearchVINormFunc *);

 
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchSetSNES(SNESLineSearch, SNES);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchGetSNES(SNESLineSearch, SNES *);

 
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchGetTolerances(SNESLineSearch, PetscReal *, PetscReal *, PetscReal *, PetscReal *, PetscReal *, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchSetTolerances(SNESLineSearch, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal, PetscInt);

extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchPreCheckPicard(SNESLineSearch, Vec, Vec, PetscBool *, void *);

extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchGetLambda(SNESLineSearch, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchSetLambda(SNESLineSearch, PetscReal);

extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchGetDamping(SNESLineSearch, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchSetDamping(SNESLineSearch, PetscReal);

extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchGetOrder(SNESLineSearch, PetscInt *order);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchSetOrder(SNESLineSearch, PetscInt order);













 
typedef enum {
  SNES_LINESEARCH_SUCCEEDED,
  SNES_LINESEARCH_FAILED_NANORINF,
  SNES_LINESEARCH_FAILED_DOMAIN,
  SNES_LINESEARCH_FAILED_REDUCT,  
  SNES_LINESEARCH_FAILED_USER,
  SNES_LINESEARCH_FAILED_FUNCTION
} SNESLineSearchReason;

extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchGetReason(SNESLineSearch, SNESLineSearchReason *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchSetReason(SNESLineSearch, SNESLineSearchReason);

extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchGetVecs(SNESLineSearch, Vec *, Vec *, Vec *, Vec *, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchSetVecs(SNESLineSearch, Vec, Vec, Vec, Vec, Vec);

extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchGetNorms(SNESLineSearch, PetscReal *, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchSetNorms(SNESLineSearch, PetscReal, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchComputeNorms(SNESLineSearch);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchSetComputeNorms(SNESLineSearch, PetscBool);

extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchMonitor(SNESLineSearch);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchMonitorSet(SNESLineSearch, PetscErrorCode (*)(SNESLineSearch, void *), void *, PetscErrorCode (*)(void **));
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchMonitorSetFromOptions(SNESLineSearch, const char[], const char[], const char[], PetscErrorCode (*)(SNESLineSearch, PetscViewerAndFormat *), PetscErrorCode (*)(SNESLineSearch, PetscViewerAndFormat *));
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchMonitorCancel(SNESLineSearch);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchMonitorUpdate(SNESLineSearch, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchSetDefaultMonitor(SNESLineSearch, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchGetDefaultMonitor(SNESLineSearch, PetscViewer *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchMonitorSolutionUpdate(SNESLineSearch, PetscViewerAndFormat *);

extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchAppendOptionsPrefix(SNESLineSearch, const char prefix[]);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchGetOptionsPrefix(SNESLineSearch, const char *prefix[]);

 
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchShellSetUserFunc(SNESLineSearch, SNESLineSearchUserFunc, void *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchShellGetUserFunc(SNESLineSearch, SNESLineSearchUserFunc *, void **);

 
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchBTSetAlpha(SNESLineSearch, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchBTGetAlpha(SNESLineSearch, PetscReal *);

 
extern __attribute__((visibility("default"))) PetscErrorCode SNESLineSearchRegister(const char[], PetscErrorCode (*)(SNESLineSearch));

 
extern __attribute__((visibility("default"))) PetscErrorCode SNESVISetVariableBounds(SNES, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode SNESVISetComputeVariableBounds(SNES, PetscErrorCode (*)(SNES, Vec, Vec));
extern __attribute__((visibility("default"))) PetscErrorCode SNESVIGetInactiveSet(SNES, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESVIGetActiveSetIS(SNES, Vec, Vec, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESVIComputeInactiveSetFnorm(SNES, Vec, Vec, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESVISetRedundancyCheck(SNES, PetscErrorCode (*)(SNES, IS, IS *, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESVIComputeMeritFunction(Vec, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESVIComputeFunction(SNES, Vec, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSetVI(DM, IS);
extern __attribute__((visibility("default"))) PetscErrorCode DMDestroyVI(DM);

extern __attribute__((visibility("default"))) PetscErrorCode SNESTestLocalMin(SNES);

 
extern __attribute__((visibility("default"))) PetscErrorCode SNESComputeJacobian(SNES, Vec, Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode SNESTestJacobian(SNES);

extern __attribute__((visibility("default"))) PetscErrorCode SNESSetDM(SNES, DM);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetDM(SNES, DM *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetNPC(SNES, SNES);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetNPC(SNES, SNES *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESHasNPC(SNES, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESApplyNPC(SNES, Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetNPCFunction(SNES, Vec, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESComputeFunctionDefaultNPC(SNES, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetNPCSide(SNES, PCSide);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetNPCSide(SNES, PCSide *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESSetLineSearch(SNES, SNESLineSearch);
extern __attribute__((visibility("default"))) PetscErrorCode SNESGetLineSearch(SNES, SNESLineSearch *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESRestrictHookAdd(SNES, PetscErrorCode (*)(SNES, SNES, void *), void *);

__attribute__((deprecated)) static inline PetscErrorCode SNESGetSNESLineSearch(SNES snes, SNESLineSearch *ls)
{
  return SNESGetLineSearch(snes, ls);
}
__attribute__((deprecated)) static inline PetscErrorCode SNESSetSNESLineSearch(SNES snes, SNESLineSearch ls)
{
  return SNESSetLineSearch(snes, ls);
}

extern __attribute__((visibility("default"))) PetscErrorCode SNESSetUpMatrices(SNES);
extern __attribute__((visibility("default"))) PetscErrorCode DMSNESSetFunction(DM, PetscErrorCode (*)(SNES, Vec, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSNESGetFunction(DM, PetscErrorCode (**)(SNES, Vec, Vec, void *), void **);
extern __attribute__((visibility("default"))) PetscErrorCode DMSNESSetFunctionContextDestroy(DM, PetscErrorCode (*)(void *));
extern __attribute__((visibility("default"))) PetscErrorCode DMSNESSetMFFunction(DM, PetscErrorCode (*)(SNES, Vec, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSNESSetNGS(DM, PetscErrorCode (*)(SNES, Vec, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSNESGetNGS(DM, PetscErrorCode (**)(SNES, Vec, Vec, void *), void **);
extern __attribute__((visibility("default"))) PetscErrorCode DMSNESSetJacobian(DM, PetscErrorCode (*)(SNES, Vec, Mat, Mat, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSNESGetJacobian(DM, PetscErrorCode (**)(SNES, Vec, Mat, Mat, void *), void **);
extern __attribute__((visibility("default"))) PetscErrorCode DMSNESSetJacobianContextDestroy(DM, PetscErrorCode (*)(void *));
extern __attribute__((visibility("default"))) PetscErrorCode DMSNESSetPicard(DM, PetscErrorCode (*)(SNES, Vec, Vec, void *), PetscErrorCode (*)(SNES, Vec, Mat, Mat, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSNESGetPicard(DM, PetscErrorCode (**)(SNES, Vec, Vec, void *), PetscErrorCode (**)(SNES, Vec, Mat, Mat, void *), void **);
extern __attribute__((visibility("default"))) PetscErrorCode DMSNESSetObjective(DM, PetscErrorCode (*)(SNES, Vec, PetscReal *, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSNESGetObjective(DM, PetscErrorCode (**)(SNES, Vec, PetscReal *, void *), void **);
extern __attribute__((visibility("default"))) PetscErrorCode DMCopyDMSNES(DM, DM);

 typedef PetscErrorCode (*DMDASNESFunction)(DMDALocalInfo *, void *, void *, void *);
 typedef PetscErrorCode (*DMDASNESJacobian)(DMDALocalInfo *, void *, Mat, Mat, void *);
 typedef PetscErrorCode (*DMDASNESObjective)(DMDALocalInfo *, void *, PetscReal *, void *);

 typedef PetscErrorCode (*DMDASNESFunctionVec)(DMDALocalInfo *, Vec, Vec, void *);
 typedef PetscErrorCode (*DMDASNESJacobianVec)(DMDALocalInfo *, Vec, Mat, Mat, void *);
 typedef PetscErrorCode (*DMDASNESObjectiveVec)(DMDALocalInfo *, Vec, PetscReal *, void *);

extern __attribute__((visibility("default"))) PetscErrorCode DMDASNESSetFunctionLocal(DM, InsertMode, DMDASNESFunction, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDASNESSetJacobianLocal(DM, DMDASNESJacobian, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDASNESSetObjectiveLocal(DM, DMDASNESObjective, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDASNESSetPicardLocal(DM, InsertMode, PetscErrorCode (*)(DMDALocalInfo *, void *, void *, void *), PetscErrorCode (*)(DMDALocalInfo *, void *, Mat, Mat, void *), void *);

extern __attribute__((visibility("default"))) PetscErrorCode DMDASNESSetFunctionLocalVec(DM, InsertMode, DMDASNESFunctionVec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDASNESSetJacobianLocalVec(DM, DMDASNESJacobianVec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDASNESSetObjectiveLocalVec(DM, DMDASNESObjectiveVec, void *);

extern __attribute__((visibility("default"))) PetscErrorCode DMSNESSetBoundaryLocal(DM, PetscErrorCode (*)(DM, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSNESSetFunctionLocal(DM, PetscErrorCode (*)(DM, Vec, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSNESSetJacobianLocal(DM, PetscErrorCode (*)(DM, Vec, Mat, Mat, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSNESGetBoundaryLocal(DM, PetscErrorCode (**)(DM, Vec, void *), void **);
extern __attribute__((visibility("default"))) PetscErrorCode DMSNESGetFunctionLocal(DM, PetscErrorCode (**)(DM, Vec, Vec, void *), void **);
extern __attribute__((visibility("default"))) PetscErrorCode DMSNESGetJacobianLocal(DM, PetscErrorCode (**)(DM, Vec, Mat, Mat, void *), void **);

 
extern __attribute__((visibility("default"))) PetscErrorCode SNESMultiblockSetFields(SNES, const char[], PetscInt, const PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMultiblockSetIS(SNES, const char[], IS);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMultiblockSetBlockSize(SNES, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMultiblockSetType(SNES, PCCompositeType);







 
typedef const char *SNESMSType;
# 790 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscsnes.h"

extern __attribute__((visibility("default"))) PetscErrorCode SNESMSRegister(SNESMSType, PetscInt, PetscInt, PetscReal, const PetscReal[], const PetscReal[], const PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMSGetType(SNES, SNESMSType *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMSSetType(SNES, SNESMSType);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMSGetDamping(SNES, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMSSetDamping(SNES, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMSFinalizePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMSInitializePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode SNESMSRegisterDestroy(void);

 

typedef enum {
  SNES_NGMRES_RESTART_NONE       = 0,
  SNES_NGMRES_RESTART_PERIODIC   = 1,
  SNES_NGMRES_RESTART_DIFFERENCE = 2
} SNESNGMRESRestartType;
extern __attribute__((visibility("default"))) const char *const SNESNGMRESRestartTypes[];

typedef enum {
  SNES_NGMRES_SELECT_NONE       = 0,
  SNES_NGMRES_SELECT_DIFFERENCE = 1,
  SNES_NGMRES_SELECT_LINESEARCH = 2
} SNESNGMRESSelectType;
extern __attribute__((visibility("default"))) const char *const SNESNGMRESSelectTypes[];

extern __attribute__((visibility("default"))) PetscErrorCode SNESNGMRESSetRestartType(SNES, SNESNGMRESRestartType);
extern __attribute__((visibility("default"))) PetscErrorCode SNESNGMRESSetSelectType(SNES, SNESNGMRESSelectType);
extern __attribute__((visibility("default"))) PetscErrorCode SNESNGMRESSetRestartFmRise(SNES, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode SNESNGMRESGetRestartFmRise(SNES, PetscBool *);

 

typedef enum {
  SNES_NCG_FR  = 0,
  SNES_NCG_PRP = 1,
  SNES_NCG_HS  = 2,
  SNES_NCG_DY  = 3,
  SNES_NCG_CD  = 4
} SNESNCGType;
extern __attribute__((visibility("default"))) const char *const SNESNCGTypes[];

extern __attribute__((visibility("default"))) PetscErrorCode SNESNCGSetType(SNES, SNESNCGType);

typedef enum {
  SNES_QN_SCALE_DEFAULT  = 0,
  SNES_QN_SCALE_NONE     = 1,
  SNES_QN_SCALE_SCALAR   = 2,
  SNES_QN_SCALE_DIAGONAL = 3,
  SNES_QN_SCALE_JACOBIAN = 4
} SNESQNScaleType;
extern __attribute__((visibility("default"))) const char *const SNESQNScaleTypes[];
typedef enum {
  SNES_QN_RESTART_DEFAULT  = 0,
  SNES_QN_RESTART_NONE     = 1,
  SNES_QN_RESTART_POWELL   = 2,
  SNES_QN_RESTART_PERIODIC = 3
} SNESQNRestartType;
extern __attribute__((visibility("default"))) const char *const SNESQNRestartTypes[];
typedef enum {
  SNES_QN_LBFGS      = 0,
  SNES_QN_BROYDEN    = 1,
  SNES_QN_BADBROYDEN = 2
} SNESQNType;
extern __attribute__((visibility("default"))) const char *const SNESQNTypes[];

extern __attribute__((visibility("default"))) PetscErrorCode SNESQNSetType(SNES, SNESQNType);
extern __attribute__((visibility("default"))) PetscErrorCode SNESQNSetScaleType(SNES, SNESQNScaleType);
extern __attribute__((visibility("default"))) PetscErrorCode SNESQNSetRestartType(SNES, SNESQNRestartType);

extern __attribute__((visibility("default"))) PetscErrorCode SNESNASMGetType(SNES, PCASMType *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESNASMSetType(SNES, PCASMType);
extern __attribute__((visibility("default"))) PetscErrorCode SNESNASMGetSubdomains(SNES, PetscInt *, SNES **, VecScatter **, VecScatter **, VecScatter **);
extern __attribute__((visibility("default"))) PetscErrorCode SNESNASMSetSubdomains(SNES, PetscInt, SNES *, VecScatter *, VecScatter *, VecScatter *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESNASMSetDamping(SNES, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode SNESNASMGetDamping(SNES, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESNASMGetSubdomainVecs(SNES, PetscInt *, Vec **, Vec **, Vec **, Vec **);
extern __attribute__((visibility("default"))) PetscErrorCode SNESNASMSetComputeFinalJacobian(SNES, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode SNESNASMGetSNES(SNES, PetscInt, SNES *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESNASMGetNumber(SNES, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESNASMSetWeight(SNES, Vec);

typedef enum {
  SNES_COMPOSITE_ADDITIVE,
  SNES_COMPOSITE_MULTIPLICATIVE,
  SNES_COMPOSITE_ADDITIVEOPTIMAL
} SNESCompositeType;
extern __attribute__((visibility("default"))) const char *const SNESCompositeTypes[];

extern __attribute__((visibility("default"))) PetscErrorCode SNESCompositeSetType(SNES, SNESCompositeType);
extern __attribute__((visibility("default"))) PetscErrorCode SNESCompositeAddSNES(SNES, SNESType);
extern __attribute__((visibility("default"))) PetscErrorCode SNESCompositeGetSNES(SNES, PetscInt, SNES *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESCompositeGetNumber(SNES, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESCompositeSetDamping(SNES, PetscInt, PetscReal);

extern __attribute__((visibility("default"))) PetscErrorCode SNESPatchSetDiscretisationInfo(SNES, PetscInt, DM *, PetscInt *, PetscInt *, const PetscInt **, const PetscInt *, PetscInt, const PetscInt *, PetscInt, const PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESPatchSetComputeOperator(SNES, PetscErrorCode (*func)(PC, PetscInt, Vec, Mat, IS, PetscInt, const PetscInt *, const PetscInt *, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESPatchSetComputeFunction(SNES, PetscErrorCode (*func)(PC, PetscInt, Vec, Vec, IS, PetscInt, const PetscInt *, const PetscInt *, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESPatchSetConstructType(SNES, PCPatchConstructType, PetscErrorCode (*func)(PC, PetscInt *, IS **, IS *, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESPatchSetCellNumbering(SNES, PetscSection);













 
typedef enum {
  SNES_FAS_MULTIPLICATIVE,
  SNES_FAS_ADDITIVE,
  SNES_FAS_FULL,
  SNES_FAS_KASKADE
} SNESFASType;
extern __attribute__((visibility("default"))) const char *const SNESFASTypes[];

 
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASSetType(SNES, SNESFASType);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASGetType(SNES, SNESFASType *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASSetLevels(SNES, PetscInt, MPI_Comm *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASGetLevels(SNES, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASGetCycleSNES(SNES, PetscInt, SNES *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASSetNumberSmoothUp(SNES, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASSetNumberSmoothDown(SNES, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASSetCycles(SNES, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASSetMonitor(SNES, PetscViewerAndFormat *, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASSetLog(SNES, PetscBool);

extern __attribute__((visibility("default"))) PetscErrorCode SNESFASSetGalerkin(SNES, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASGetGalerkin(SNES, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASGalerkinFunctionDefault(SNES, Vec, Vec, void *);

 
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASCycleGetSmoother(SNES, SNES *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASCycleGetSmootherUp(SNES, SNES *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASCycleGetSmootherDown(SNES, SNES *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASCycleGetCorrection(SNES, SNES *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASCycleGetInterpolation(SNES, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASCycleGetRestriction(SNES, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASCycleGetInjection(SNES, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASCycleGetRScale(SNES, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASCycleSetCycles(SNES, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASCycleIsFine(SNES, PetscBool *);

 
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASSetInterpolation(SNES, PetscInt, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASGetInterpolation(SNES, PetscInt, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASSetRestriction(SNES, PetscInt, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASGetRestriction(SNES, PetscInt, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASSetInjection(SNES, PetscInt, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASGetInjection(SNES, PetscInt, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASSetRScale(SNES, PetscInt, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASGetRScale(SNES, PetscInt, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASSetContinuation(SNES, PetscBool);

extern __attribute__((visibility("default"))) PetscErrorCode SNESFASGetSmoother(SNES, PetscInt, SNES *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASGetSmootherUp(SNES, PetscInt, SNES *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASGetSmootherDown(SNES, PetscInt, SNES *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASGetCoarseSolve(SNES, SNES *);

 
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASFullSetDownSweep(SNES, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASCreateCoarseVec(SNES, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASRestrict(SNES, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASFullSetTotal(SNES, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode SNESFASFullGetTotal(SNES, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode DMSNESCheckDiscretization(SNES, DM, PetscReal, Vec, PetscReal, PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode DMSNESCheckResidual(SNES, DM, Vec, PetscReal, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSNESCheckJacobian(SNES, DM, Vec, PetscReal, PetscBool *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSNESCheckFromOptions(SNES, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode DMSNESComputeJacobianAction(DM, Vec, Vec, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMSNESCreateJacobianMF(DM, Vec, void *, Mat *);

# 9 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscts.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscconvest.h" 1


 





 









 
typedef struct _p_PetscConvEst *PetscConvEst;

extern __attribute__((visibility("default"))) PetscErrorCode PetscConvEstCreate(MPI_Comm, PetscConvEst *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscConvEstDestroy(PetscConvEst *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscConvEstView(PetscConvEst, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode PetscConvEstSetFromOptions(PetscConvEst);
extern __attribute__((visibility("default"))) PetscErrorCode PetscConvEstGetSolver(PetscConvEst, PetscObject *);
extern __attribute__((visibility("default"))) PetscErrorCode PetscConvEstSetSolver(PetscConvEst, PetscObject);
extern __attribute__((visibility("default"))) PetscErrorCode PetscConvEstSetUp(PetscConvEst);
extern __attribute__((visibility("default"))) PetscErrorCode PetscConvEstComputeInitialGuess(PetscConvEst, PetscInt, DM, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode PetscConvEstComputeError(PetscConvEst, PetscInt, DM, Vec, PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscConvEstGetConvRate(PetscConvEst, PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode PetscConvEstMonitorDefault(PetscConvEst, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode PetscConvEstRateView(PetscConvEst, const PetscReal[], PetscViewer);

# 10 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscts.h" 2

 







 
typedef struct _p_TS *TS;







 
typedef const char *TSType;
# 53 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscts.h"







 
typedef enum {
  TS_LINEAR,
  TS_NONLINEAR
} TSProblemType;















 
typedef enum {
  TS_EQ_UNSPECIFIED               = -1,
  TS_EQ_EXPLICIT                  = 0,
  TS_EQ_ODE_EXPLICIT              = 1,
  TS_EQ_DAE_SEMI_EXPLICIT_INDEX1  = 100,
  TS_EQ_DAE_SEMI_EXPLICIT_INDEX2  = 200,
  TS_EQ_DAE_SEMI_EXPLICIT_INDEX3  = 300,
  TS_EQ_DAE_SEMI_EXPLICIT_INDEXHI = 500,
  TS_EQ_IMPLICIT                  = 1000,
  TS_EQ_ODE_IMPLICIT              = 1001,
  TS_EQ_DAE_IMPLICIT_INDEX1       = 1100,
  TS_EQ_DAE_IMPLICIT_INDEX2       = 1200,
  TS_EQ_DAE_IMPLICIT_INDEX3       = 1300,
  TS_EQ_DAE_IMPLICIT_INDEXHI      = 1500
} TSEquationType;
extern __attribute__((visibility("default"))) const char *const *TSEquationTypes;












 
typedef enum {
  TS_CONVERGED_ITERATING          = 0,
  TS_CONVERGED_TIME               = 1,
  TS_CONVERGED_ITS                = 2,
  TS_CONVERGED_USER               = 3,
  TS_CONVERGED_EVENT              = 4,
  TS_CONVERGED_PSEUDO_FATOL       = 5,
  TS_CONVERGED_PSEUDO_FRTOL       = 6,
  TS_DIVERGED_NONLINEAR_SOLVE     = -1,
  TS_DIVERGED_STEP_REJECTED       = -2,
  TSFORWARD_DIVERGED_LINEAR_SOLVE = -3,
  TSADJOINT_DIVERGED_LINEAR_SOLVE = -4
} TSConvergedReason;
extern __attribute__((visibility("default"))) const char *const *TSConvergedReasons;







 







 







 







 







 










 










 










 










 















 
typedef enum {
  TS_EXACTFINALTIME_UNSPECIFIED = 0,
  TS_EXACTFINALTIME_STEPOVER    = 1,
  TS_EXACTFINALTIME_INTERPOLATE = 2,
  TS_EXACTFINALTIME_MATCHSTEP   = 3
} TSExactFinalTimeOption;
extern __attribute__((visibility("default"))) const char *const TSExactFinalTimeOptions[];

 
extern __attribute__((visibility("default"))) PetscClassId TS_CLASSID;
extern __attribute__((visibility("default"))) PetscClassId DMTS_CLASSID;
extern __attribute__((visibility("default"))) PetscClassId TSADAPT_CLASSID;

extern __attribute__((visibility("default"))) PetscErrorCode TSInitializePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode TSFinalizePackage(void);

extern __attribute__((visibility("default"))) PetscErrorCode TSCreate(MPI_Comm, TS *);
extern __attribute__((visibility("default"))) PetscErrorCode TSClone(TS, TS *);
extern __attribute__((visibility("default"))) PetscErrorCode TSDestroy(TS *);

extern __attribute__((visibility("default"))) PetscErrorCode TSSetProblemType(TS, TSProblemType);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetProblemType(TS, TSProblemType *);
extern __attribute__((visibility("default"))) PetscErrorCode TSMonitor(TS, PetscInt, PetscReal, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TSMonitorSet(TS, PetscErrorCode (*)(TS, PetscInt, PetscReal, Vec, void *), void *, PetscErrorCode (*)(void **));
extern __attribute__((visibility("default"))) PetscErrorCode TSMonitorSetFromOptions(TS, const char[], const char[], const char[], PetscErrorCode (*)(TS, PetscInt, PetscReal, Vec, PetscViewerAndFormat *), PetscErrorCode (*)(TS, PetscViewerAndFormat *));
extern __attribute__((visibility("default"))) PetscErrorCode TSMonitorCancel(TS);

extern __attribute__((visibility("default"))) PetscErrorCode TSSetOptionsPrefix(TS, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode TSAppendOptionsPrefix(TS, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetOptionsPrefix(TS, const char *[]);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetFromOptions(TS);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetUp(TS);
extern __attribute__((visibility("default"))) PetscErrorCode TSReset(TS);

extern __attribute__((visibility("default"))) PetscErrorCode TSSetSolution(TS, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetSolution(TS, Vec *);

extern __attribute__((visibility("default"))) PetscErrorCode TS2SetSolution(TS, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TS2GetSolution(TS, Vec *, Vec *);

extern __attribute__((visibility("default"))) PetscErrorCode TSGetSolutionComponents(TS, PetscInt *, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetAuxSolution(TS, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetTimeError(TS, PetscInt, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetTimeError(TS, Vec);

extern __attribute__((visibility("default"))) PetscErrorCode TSSetRHSJacobianP(TS, Mat, PetscErrorCode (*)(TS, PetscReal, Vec, Mat, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetRHSJacobianP(TS, Mat *, PetscErrorCode (**)(TS, PetscReal, Vec, Mat, void *), void **);
extern __attribute__((visibility("default"))) PetscErrorCode TSComputeRHSJacobianP(TS, PetscReal, Vec, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetIJacobianP(TS, Mat, PetscErrorCode (*)(TS, PetscReal, Vec, Vec, PetscReal, Mat, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSComputeIJacobianP(TS, PetscReal, Vec, Vec, PetscReal, Mat, PetscBool);
extern __attribute__((visibility("default")))                __attribute__((deprecated)) PetscErrorCode TSComputeDRDPFunction(TS, PetscReal, Vec, Vec *);
extern __attribute__((visibility("default")))                __attribute__((deprecated)) PetscErrorCode TSComputeDRDUFunction(TS, PetscReal, Vec, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetIHessianProduct(TS, Vec *, PetscErrorCode (*)(TS, PetscReal, Vec, Vec *, Vec, Vec *, void *), Vec *, PetscErrorCode (*)(TS, PetscReal, Vec, Vec *, Vec, Vec *, void *), Vec *, PetscErrorCode (*)(TS, PetscReal, Vec, Vec *, Vec, Vec *, void *), Vec *, PetscErrorCode (*)(TS, PetscReal, Vec, Vec *, Vec, Vec *, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSComputeIHessianProductFunctionUU(TS, PetscReal, Vec, Vec *, Vec, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TSComputeIHessianProductFunctionUP(TS, PetscReal, Vec, Vec *, Vec, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TSComputeIHessianProductFunctionPU(TS, PetscReal, Vec, Vec *, Vec, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TSComputeIHessianProductFunctionPP(TS, PetscReal, Vec, Vec *, Vec, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetRHSHessianProduct(TS, Vec *, PetscErrorCode (*)(TS, PetscReal, Vec, Vec *, Vec, Vec *, void *), Vec *, PetscErrorCode (*)(TS, PetscReal, Vec, Vec *, Vec, Vec *, void *), Vec *, PetscErrorCode (*)(TS, PetscReal, Vec, Vec *, Vec, Vec *, void *), Vec *, PetscErrorCode (*)(TS, PetscReal, Vec, Vec *, Vec, Vec *, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSComputeRHSHessianProductFunctionUU(TS, PetscReal, Vec, Vec *, Vec, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TSComputeRHSHessianProductFunctionUP(TS, PetscReal, Vec, Vec *, Vec, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TSComputeRHSHessianProductFunctionPU(TS, PetscReal, Vec, Vec *, Vec, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TSComputeRHSHessianProductFunctionPP(TS, PetscReal, Vec, Vec *, Vec, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetCostHessianProducts(TS, PetscInt, Vec *, Vec *, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetCostHessianProducts(TS, PetscInt *, Vec **, Vec **, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TSComputeSNESJacobian(TS, Vec, Mat, Mat);







 
typedef struct _p_TSTrajectory *TSTrajectory;







 
typedef const char *TSTrajectoryType;





extern __attribute__((visibility("default"))) PetscFunctionList TSTrajectoryList;
extern __attribute__((visibility("default"))) PetscClassId      TSTRAJECTORY_CLASSID;
extern __attribute__((visibility("default"))) PetscBool         TSTrajectoryRegisterAllCalled;

extern __attribute__((visibility("default"))) PetscErrorCode TSSetSaveTrajectory(TS);
extern __attribute__((visibility("default"))) PetscErrorCode TSResetTrajectory(TS);
extern __attribute__((visibility("default"))) PetscErrorCode TSRemoveTrajectory(TS);

extern __attribute__((visibility("default"))) PetscErrorCode TSTrajectoryCreate(MPI_Comm, TSTrajectory *);
extern __attribute__((visibility("default"))) PetscErrorCode TSTrajectoryReset(TSTrajectory);
extern __attribute__((visibility("default"))) PetscErrorCode TSTrajectoryDestroy(TSTrajectory *);
extern __attribute__((visibility("default"))) PetscErrorCode TSTrajectoryView(TSTrajectory, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode TSTrajectorySetType(TSTrajectory, TS, TSTrajectoryType);
extern __attribute__((visibility("default"))) PetscErrorCode TSTrajectoryGetType(TSTrajectory, TS, TSTrajectoryType *);
extern __attribute__((visibility("default"))) PetscErrorCode TSTrajectorySet(TSTrajectory, TS, PetscInt, PetscReal, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TSTrajectoryGet(TSTrajectory, TS, PetscInt, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TSTrajectoryGetVecs(TSTrajectory, TS, PetscInt, PetscReal *, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TSTrajectoryGetUpdatedHistoryVecs(TSTrajectory, TS, PetscReal, Vec *, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TSTrajectoryGetNumSteps(TSTrajectory, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode TSTrajectoryRestoreUpdatedHistoryVecs(TSTrajectory, Vec *, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TSTrajectorySetFromOptions(TSTrajectory, TS);
extern __attribute__((visibility("default"))) PetscErrorCode TSTrajectoryRegister(const char[], PetscErrorCode (*)(TSTrajectory, TS));
extern __attribute__((visibility("default"))) PetscErrorCode TSTrajectoryRegisterAll(void);
extern __attribute__((visibility("default"))) PetscErrorCode TSTrajectorySetUp(TSTrajectory, TS);
extern __attribute__((visibility("default"))) PetscErrorCode TSTrajectorySetUseHistory(TSTrajectory, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode TSTrajectorySetMonitor(TSTrajectory, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode TSTrajectorySetVariableNames(TSTrajectory, const char *const *);
extern __attribute__((visibility("default"))) PetscErrorCode TSTrajectorySetTransform(TSTrajectory, PetscErrorCode (*)(void *, Vec, Vec *), PetscErrorCode (*)(void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSTrajectorySetSolutionOnly(TSTrajectory, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode TSTrajectoryGetSolutionOnly(TSTrajectory, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode TSTrajectorySetKeepFiles(TSTrajectory, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode TSTrajectorySetDirname(TSTrajectory, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode TSTrajectorySetFiletemplate(TSTrajectory, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetTrajectory(TS, TSTrajectory *);

extern __attribute__((visibility("default"))) PetscErrorCode TSSetCostGradients(TS, PetscInt, Vec *, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetCostGradients(TS, PetscInt *, Vec **, Vec **);
extern __attribute__((visibility("default"))) __attribute__((deprecated)) PetscErrorCode TSSetCostIntegrand(TS, PetscInt, Vec, PetscErrorCode (*)(TS, PetscReal, Vec, Vec, void *), PetscErrorCode (*)(TS, PetscReal, Vec, Vec *, void *), PetscErrorCode (*)(TS, PetscReal, Vec, Vec *, void *), PetscBool, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetCostIntegral(TS, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TSComputeCostIntegrand(TS, PetscReal, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TSCreateQuadratureTS(TS, PetscBool, TS *);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetQuadratureTS(TS, PetscBool *, TS *);

extern __attribute__((visibility("default"))) PetscErrorCode TSAdjointSetFromOptions(TS, PetscOptionItems *);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdjointMonitor(TS, PetscInt, PetscReal, Vec, PetscInt, Vec *, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdjointMonitorSet(TS, PetscErrorCode (*)(TS, PetscInt, PetscReal, Vec, PetscInt, Vec *, Vec *, void *), void *, PetscErrorCode (*)(void **));
extern __attribute__((visibility("default"))) PetscErrorCode TSAdjointMonitorCancel(TS);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdjointMonitorSetFromOptions(TS, const char[], const char[], const char[], PetscErrorCode (*)(TS, PetscInt, PetscReal, Vec, PetscInt, Vec *, Vec *, PetscViewerAndFormat *), PetscErrorCode (*)(TS, PetscViewerAndFormat *));

extern __attribute__((visibility("default")))                __attribute__((deprecated)) PetscErrorCode TSAdjointSetRHSJacobian(TS, Mat, PetscErrorCode (*)(TS, PetscReal, Vec, Mat, void *), void *);
extern __attribute__((visibility("default")))                __attribute__((deprecated)) PetscErrorCode TSAdjointComputeRHSJacobian(TS, PetscReal, Vec, Mat);
extern __attribute__((visibility("default")))                __attribute__((deprecated)) PetscErrorCode TSAdjointComputeDRDPFunction(TS, PetscReal, Vec, Vec *);
extern __attribute__((visibility("default")))                __attribute__((deprecated)) PetscErrorCode TSAdjointComputeDRDYFunction(TS, PetscReal, Vec, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdjointSolve(TS);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdjointSetSteps(TS, PetscInt);

extern __attribute__((visibility("default"))) PetscErrorCode TSAdjointStep(TS);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdjointSetUp(TS);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdjointReset(TS);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdjointCostIntegral(TS);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdjointSetForward(TS, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdjointResetForward(TS);

extern __attribute__((visibility("default"))) PetscErrorCode TSForwardSetSensitivities(TS, PetscInt, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode TSForwardGetSensitivities(TS, PetscInt *, Mat *);
extern __attribute__((visibility("default")))                __attribute__((deprecated)) PetscErrorCode TSForwardSetIntegralGradients(TS, PetscInt, Vec *);
extern __attribute__((visibility("default")))                __attribute__((deprecated)) PetscErrorCode TSForwardGetIntegralGradients(TS, PetscInt *, Vec **);
extern __attribute__((visibility("default"))) PetscErrorCode TSForwardSetUp(TS);
extern __attribute__((visibility("default"))) PetscErrorCode TSForwardReset(TS);
extern __attribute__((visibility("default"))) PetscErrorCode TSForwardCostIntegral(TS);
extern __attribute__((visibility("default"))) PetscErrorCode TSForwardStep(TS);
extern __attribute__((visibility("default"))) PetscErrorCode TSForwardSetInitialSensitivities(TS, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode TSForwardGetStages(TS, PetscInt *, Mat *[]);

extern __attribute__((visibility("default"))) PetscErrorCode TSSetMaxSteps(TS, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetMaxSteps(TS, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetMaxTime(TS, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetMaxTime(TS, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetExactFinalTime(TS, TSExactFinalTimeOption);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetExactFinalTime(TS, TSExactFinalTimeOption *);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetTimeSpan(TS, PetscInt, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetTimeSpan(TS, PetscInt *, const PetscReal **);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetTimeSpanSolutions(TS, PetscInt *, Vec **);

extern __attribute__((visibility("default"))) __attribute__((deprecated)) PetscErrorCode TSSetInitialTimeStep(TS, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) __attribute__((deprecated)) PetscErrorCode TSSetDuration(TS, PetscInt, PetscReal);
extern __attribute__((visibility("default"))) __attribute__((deprecated)) PetscErrorCode TSGetDuration(TS, PetscInt *, PetscReal *);
extern __attribute__((visibility("default"))) __attribute__((deprecated)) PetscErrorCode TSGetTimeStepNumber(TS, PetscInt *);
extern __attribute__((visibility("default"))) __attribute__((deprecated)) PetscErrorCode TSGetTotalSteps(TS, PetscInt *);

extern __attribute__((visibility("default"))) PetscErrorCode TSMonitorDefault(TS, PetscInt, PetscReal, Vec, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode TSMonitorExtreme(TS, PetscInt, PetscReal, Vec, PetscViewerAndFormat *);

typedef struct _n_TSMonitorDrawCtx *TSMonitorDrawCtx;
extern __attribute__((visibility("default"))) PetscErrorCode         TSMonitorDrawCtxCreate(MPI_Comm, const char[], const char[], int, int, int, int, PetscInt, TSMonitorDrawCtx *);
extern __attribute__((visibility("default"))) PetscErrorCode         TSMonitorDrawCtxDestroy(TSMonitorDrawCtx *);
extern __attribute__((visibility("default"))) PetscErrorCode         TSMonitorDrawSolution(TS, PetscInt, PetscReal, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode         TSMonitorDrawSolutionPhase(TS, PetscInt, PetscReal, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode         TSMonitorDrawError(TS, PetscInt, PetscReal, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode         TSMonitorDrawSolutionFunction(TS, PetscInt, PetscReal, Vec, void *);

extern __attribute__((visibility("default"))) PetscErrorCode TSAdjointMonitorDefault(TS, PetscInt, PetscReal, Vec, PetscInt, Vec *, Vec *, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdjointMonitorDrawSensi(TS, PetscInt, PetscReal, Vec, PetscInt, Vec *, Vec *, void *);

extern __attribute__((visibility("default"))) PetscErrorCode TSMonitorSolution(TS, PetscInt, PetscReal, Vec, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode TSMonitorSolutionVTK(TS, PetscInt, PetscReal, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSMonitorSolutionVTKDestroy(void *);

extern __attribute__((visibility("default"))) PetscErrorCode TSStep(TS);
extern __attribute__((visibility("default"))) PetscErrorCode TSEvaluateWLTE(TS, NormType, PetscInt *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TSEvaluateStep(TS, PetscInt, Vec, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode TSSolve(TS, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetEquationType(TS, TSEquationType *);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetEquationType(TS, TSEquationType);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetConvergedReason(TS, TSConvergedReason *);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetConvergedReason(TS, TSConvergedReason);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetSolveTime(TS, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetSNESIterations(TS, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetKSPIterations(TS, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetStepRejections(TS, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetMaxStepRejections(TS, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetSNESFailures(TS, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetMaxSNESFailures(TS, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetErrorIfStepFails(TS, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode TSRestartStep(TS);
extern __attribute__((visibility("default"))) PetscErrorCode TSRollBack(TS);

extern __attribute__((visibility("default"))) PetscErrorCode TSGetStages(TS, PetscInt *, Vec *[]);

extern __attribute__((visibility("default"))) PetscErrorCode TSGetTime(TS, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetTime(TS, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetPrevTime(TS, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetTimeStep(TS, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetTimeStep(TS, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetStepNumber(TS, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetStepNumber(TS, PetscInt);

 typedef PetscErrorCode (*TSRHSFunction)(TS, PetscReal, Vec, Vec, void *);
 typedef PetscErrorCode (*TSRHSJacobian)(TS, PetscReal, Vec, Mat, Mat, void *);
 typedef PetscErrorCode (*TSRHSJacobianP)(TS, PetscReal, Vec, Mat, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetRHSFunction(TS, Vec, TSRHSFunction, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetRHSFunction(TS, Vec *, TSRHSFunction *, void **);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetRHSJacobian(TS, Mat, Mat, TSRHSJacobian, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetRHSJacobian(TS, Mat *, Mat *, TSRHSJacobian *, void **);
extern __attribute__((visibility("default"))) PetscErrorCode TSRHSJacobianSetReuse(TS, PetscBool);

 typedef PetscErrorCode (*TSSolutionFunction)(TS, PetscReal, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetSolutionFunction(TS, TSSolutionFunction, void *);
 typedef PetscErrorCode (*TSForcingFunction)(TS, PetscReal, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetForcingFunction(TS, TSForcingFunction, void *);

 typedef PetscErrorCode (*TSIFunction)(TS, PetscReal, Vec, Vec, Vec, void *);
 typedef PetscErrorCode (*TSIJacobian)(TS, PetscReal, Vec, Vec, PetscReal, Mat, Mat, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetIFunction(TS, Vec, TSIFunction, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetIFunction(TS, Vec *, TSIFunction *, void **);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetIJacobian(TS, Mat, Mat, TSIJacobian, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetIJacobian(TS, Mat *, Mat *, TSIJacobian *, void **);

 typedef PetscErrorCode (*TSI2Function)(TS, PetscReal, Vec, Vec, Vec, Vec, void *);
 typedef PetscErrorCode (*TSI2Jacobian)(TS, PetscReal, Vec, Vec, Vec, PetscReal, PetscReal, Mat, Mat, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetI2Function(TS, Vec, TSI2Function, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetI2Function(TS, Vec *, TSI2Function *, void **);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetI2Jacobian(TS, Mat, Mat, TSI2Jacobian, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetI2Jacobian(TS, Mat *, Mat *, TSI2Jacobian *, void **);

extern __attribute__((visibility("default"))) PetscErrorCode TSRHSSplitSetIS(TS, const char[], IS);
extern __attribute__((visibility("default"))) PetscErrorCode TSRHSSplitGetIS(TS, const char[], IS *);
extern __attribute__((visibility("default"))) PetscErrorCode TSRHSSplitSetRHSFunction(TS, const char[], Vec, TSRHSFunction, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSRHSSplitGetSubTS(TS, const char[], TS *);
extern __attribute__((visibility("default"))) PetscErrorCode TSRHSSplitGetSubTSs(TS, PetscInt *, TS *[]);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetUseSplitRHSFunction(TS, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetUseSplitRHSFunction(TS, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode TSComputeRHSFunctionLinear(TS, PetscReal, Vec, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSComputeRHSJacobianConstant(TS, PetscReal, Vec, Mat, Mat, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSComputeIFunctionLinear(TS, PetscReal, Vec, Vec, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSComputeIJacobianConstant(TS, PetscReal, Vec, Vec, PetscReal, Mat, Mat, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSComputeSolutionFunction(TS, PetscReal, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TSComputeForcingFunction(TS, PetscReal, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TSComputeIJacobianDefaultColor(TS, PetscReal, Vec, Vec, PetscReal, Mat, Mat, void *);

extern __attribute__((visibility("default"))) PetscErrorCode TSSetPreStep(TS, PetscErrorCode (*)(TS));
extern __attribute__((visibility("default"))) PetscErrorCode TSSetPreStage(TS, PetscErrorCode (*)(TS, PetscReal));
extern __attribute__((visibility("default"))) PetscErrorCode TSSetPostStage(TS, PetscErrorCode (*)(TS, PetscReal, PetscInt, Vec *));
extern __attribute__((visibility("default"))) PetscErrorCode TSSetPostEvaluate(TS, PetscErrorCode (*)(TS));
extern __attribute__((visibility("default"))) PetscErrorCode TSSetPostStep(TS, PetscErrorCode (*)(TS));
extern __attribute__((visibility("default"))) PetscErrorCode TSPreStep(TS);
extern __attribute__((visibility("default"))) PetscErrorCode TSPreStage(TS, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TSPostStage(TS, PetscReal, PetscInt, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TSPostEvaluate(TS);
extern __attribute__((visibility("default"))) PetscErrorCode TSPostStep(TS);
extern __attribute__((visibility("default"))) PetscErrorCode TSInterpolate(TS, PetscReal, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetTolerances(TS, PetscReal, Vec, PetscReal, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetTolerances(TS, PetscReal *, Vec *, PetscReal *, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TSErrorWeightedNormInfinity(TS, Vec, Vec, PetscReal *, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TSErrorWeightedNorm2(TS, Vec, Vec, PetscReal *, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TSErrorWeightedNorm(TS, Vec, Vec, NormType, PetscReal *, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TSErrorWeightedENormInfinity(TS, Vec, Vec, Vec, PetscReal *, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TSErrorWeightedENorm2(TS, Vec, Vec, Vec, PetscReal *, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TSErrorWeightedENorm(TS, Vec, Vec, Vec, NormType, PetscReal *, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetCFLTimeLocal(TS, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetCFLTime(TS, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetFunctionDomainError(TS, PetscErrorCode (*)(TS, PetscReal, Vec, PetscBool *));
extern __attribute__((visibility("default"))) PetscErrorCode TSFunctionDomainError(TS, PetscReal, Vec, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode TSPseudoSetTimeStep(TS, PetscErrorCode (*)(TS, PetscReal *, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSPseudoTimeStepDefault(TS, PetscReal *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSPseudoComputeTimeStep(TS, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TSPseudoSetMaxTimeStep(TS, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TSPseudoSetVerifyTimeStep(TS, PetscErrorCode (*)(TS, Vec, void *, PetscReal *, PetscBool *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSPseudoVerifyTimeStepDefault(TS, Vec, void *, PetscReal *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode TSPseudoVerifyTimeStep(TS, Vec, PetscReal *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode TSPseudoSetTimeStepIncrement(TS, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TSPseudoIncrementDtFromInitialDt(TS);

extern __attribute__((visibility("default"))) PetscErrorCode TSPythonSetType(TS, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode TSPythonGetType(TS, const char *[]);

extern __attribute__((visibility("default"))) PetscErrorCode TSComputeRHSFunction(TS, PetscReal, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TSComputeRHSJacobian(TS, PetscReal, Vec, Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode TSComputeIFunction(TS, PetscReal, Vec, Vec, Vec, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode TSComputeIJacobian(TS, PetscReal, Vec, Vec, PetscReal, Mat, Mat, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode TSComputeI2Function(TS, PetscReal, Vec, Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TSComputeI2Jacobian(TS, PetscReal, Vec, Vec, Vec, PetscReal, PetscReal, Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode TSComputeLinearStability(TS, PetscReal, PetscReal, PetscReal *, PetscReal *);

extern __attribute__((visibility("default"))) PetscErrorCode TSVISetVariableBounds(TS, Vec, Vec);

extern __attribute__((visibility("default"))) PetscErrorCode DMTSSetBoundaryLocal(DM, PetscErrorCode (*)(DM, PetscReal, Vec, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSSetRHSFunction(DM, TSRHSFunction, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSGetRHSFunction(DM, TSRHSFunction *, void **);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSSetRHSFunctionContextDestroy(DM, PetscErrorCode (*)(void *));
extern __attribute__((visibility("default"))) PetscErrorCode DMTSSetRHSJacobian(DM, TSRHSJacobian, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSGetRHSJacobian(DM, TSRHSJacobian *, void **);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSSetRHSJacobianContextDestroy(DM, PetscErrorCode (*)(void *));
extern __attribute__((visibility("default"))) PetscErrorCode DMTSSetIFunction(DM, TSIFunction, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSGetIFunction(DM, TSIFunction *, void **);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSSetIFunctionContextDestroy(DM, PetscErrorCode (*)(void *));
extern __attribute__((visibility("default"))) PetscErrorCode DMTSSetIJacobian(DM, TSIJacobian, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSGetIJacobian(DM, TSIJacobian *, void **);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSSetIJacobianContextDestroy(DM, PetscErrorCode (*)(void *));
extern __attribute__((visibility("default"))) PetscErrorCode DMTSSetI2Function(DM, TSI2Function, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSGetI2Function(DM, TSI2Function *, void **);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSSetI2FunctionContextDestroy(DM, PetscErrorCode (*)(void *));
extern __attribute__((visibility("default"))) PetscErrorCode DMTSSetI2Jacobian(DM, TSI2Jacobian, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSGetI2Jacobian(DM, TSI2Jacobian *, void **);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSSetI2JacobianContextDestroy(DM, PetscErrorCode (*)(void *));

 typedef PetscErrorCode (*TSTransientVariable)(TS, Vec, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetTransientVariable(TS, TSTransientVariable, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSSetTransientVariable(DM, TSTransientVariable, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSGetTransientVariable(DM, TSTransientVariable *, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSComputeTransientVariable(TS, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TSHasTransientVariable(TS, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode DMTSSetSolutionFunction(DM, TSSolutionFunction, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSGetSolutionFunction(DM, TSSolutionFunction *, void **);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSSetForcingFunction(DM, TSForcingFunction, void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSGetForcingFunction(DM, TSForcingFunction *, void **);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSCheckResidual(TS, DM, PetscReal, Vec, Vec, PetscReal, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSCheckJacobian(TS, DM, PetscReal, Vec, Vec, PetscReal, PetscBool *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSCheckFromOptions(TS, Vec);

extern __attribute__((visibility("default"))) PetscErrorCode DMTSGetIFunctionLocal(DM, PetscErrorCode (**)(DM, PetscReal, Vec, Vec, Vec, void *), void **);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSSetIFunctionLocal(DM, PetscErrorCode (*)(DM, PetscReal, Vec, Vec, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSGetIJacobianLocal(DM, PetscErrorCode (**)(DM, PetscReal, Vec, Vec, PetscReal, Mat, Mat, void *), void **);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSSetIJacobianLocal(DM, PetscErrorCode (*)(DM, PetscReal, Vec, Vec, PetscReal, Mat, Mat, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSGetRHSFunctionLocal(DM, PetscErrorCode (**)(DM, PetscReal, Vec, Vec, void *), void **);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSSetRHSFunctionLocal(DM, PetscErrorCode (*)(DM, PetscReal, Vec, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSCreateRHSMassMatrix(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSCreateRHSMassMatrixLumped(DM);
extern __attribute__((visibility("default"))) PetscErrorCode DMTSDestroyRHSMassMatrix(DM);

extern __attribute__((visibility("default"))) PetscErrorCode DMTSSetIFunctionSerialize(DM, PetscErrorCode (*)(void *, PetscViewer), PetscErrorCode (*)(void **, PetscViewer));
extern __attribute__((visibility("default"))) PetscErrorCode DMTSSetIJacobianSerialize(DM, PetscErrorCode (*)(void *, PetscViewer), PetscErrorCode (*)(void **, PetscViewer));

 typedef PetscErrorCode (*DMDATSRHSFunctionLocal)(DMDALocalInfo *, PetscReal, void *, void *, void *);
 typedef PetscErrorCode (*DMDATSRHSJacobianLocal)(DMDALocalInfo *, PetscReal, void *, Mat, Mat, void *);
 typedef PetscErrorCode (*DMDATSIFunctionLocal)(DMDALocalInfo *, PetscReal, void *, void *, void *, void *);
 typedef PetscErrorCode (*DMDATSIJacobianLocal)(DMDALocalInfo *, PetscReal, void *, void *, PetscReal, Mat, Mat, void *);

extern __attribute__((visibility("default"))) PetscErrorCode DMDATSSetRHSFunctionLocal(DM, InsertMode, PetscErrorCode (*)(DMDALocalInfo *, PetscReal, void *, void *, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDATSSetRHSJacobianLocal(DM, PetscErrorCode (*)(DMDALocalInfo *, PetscReal, void *, Mat, Mat, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDATSSetIFunctionLocal(DM, InsertMode, PetscErrorCode (*)(DMDALocalInfo *, PetscReal, void *, void *, void *, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode DMDATSSetIJacobianLocal(DM, PetscErrorCode (*)(DMDALocalInfo *, PetscReal, void *, void *, PetscReal, Mat, Mat, void *), void *);

extern __attribute__((visibility("default"))) PetscErrorCode DMPlexTSGetGeometryFVM(DM, Vec *, Vec *, PetscReal *);

typedef struct _n_TSMonitorLGCtx *TSMonitorLGCtx;
typedef struct {
  Vec            ray;
  VecScatter     scatter;
  PetscViewer    viewer;
  TSMonitorLGCtx lgctx;
} TSMonitorDMDARayCtx;
extern __attribute__((visibility("default"))) PetscErrorCode TSMonitorDMDARayDestroy(void **);
extern __attribute__((visibility("default"))) PetscErrorCode TSMonitorDMDARay(TS, PetscInt, PetscReal, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSMonitorLGDMDARay(TS, PetscInt, PetscReal, Vec, void *);

 
extern __attribute__((visibility("default"))) PetscFunctionList TSList;
extern __attribute__((visibility("default"))) PetscErrorCode    TSGetType(TS, TSType *);
extern __attribute__((visibility("default"))) PetscErrorCode    TSSetType(TS, TSType);
extern __attribute__((visibility("default"))) PetscErrorCode    TSRegister(const char[], PetscErrorCode (*)(TS));

extern __attribute__((visibility("default"))) PetscErrorCode TSGetSNES(TS, SNES *);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetSNES(TS, SNES);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetKSP(TS, KSP *);

extern __attribute__((visibility("default"))) PetscErrorCode TSView(TS, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode TSLoad(TS, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode TSViewFromOptions(TS, PetscObject, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode TSTrajectoryViewFromOptions(TSTrajectory, PetscObject, const char[]);



extern __attribute__((visibility("default"))) PetscErrorCode TSSetApplicationContext(TS, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetApplicationContext(TS, void *);

extern __attribute__((visibility("default"))) PetscErrorCode TSMonitorLGCtxCreate(MPI_Comm, const char[], const char[], int, int, int, int, PetscInt, TSMonitorLGCtx *);
extern __attribute__((visibility("default"))) PetscErrorCode TSMonitorLGCtxDestroy(TSMonitorLGCtx *);
extern __attribute__((visibility("default"))) PetscErrorCode TSMonitorLGTimeStep(TS, PetscInt, PetscReal, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSMonitorLGSolution(TS, PetscInt, PetscReal, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSMonitorLGSetVariableNames(TS, const char *const *);
extern __attribute__((visibility("default"))) PetscErrorCode TSMonitorLGGetVariableNames(TS, const char *const **);
extern __attribute__((visibility("default"))) PetscErrorCode TSMonitorLGCtxSetVariableNames(TSMonitorLGCtx, const char *const *);
extern __attribute__((visibility("default"))) PetscErrorCode TSMonitorLGSetDisplayVariables(TS, const char *const *);
extern __attribute__((visibility("default"))) PetscErrorCode TSMonitorLGCtxSetDisplayVariables(TSMonitorLGCtx, const char *const *);
extern __attribute__((visibility("default"))) PetscErrorCode TSMonitorLGSetTransform(TS, PetscErrorCode (*)(void *, Vec, Vec *), PetscErrorCode (*)(void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSMonitorLGCtxSetTransform(TSMonitorLGCtx, PetscErrorCode (*)(void *, Vec, Vec *), PetscErrorCode (*)(void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSMonitorLGError(TS, PetscInt, PetscReal, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSMonitorLGSNESIterations(TS, PetscInt, PetscReal, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSMonitorLGKSPIterations(TS, PetscInt, PetscReal, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSMonitorError(TS, PetscInt, PetscReal, Vec, PetscViewerAndFormat *);
extern __attribute__((visibility("default"))) PetscErrorCode TSDMSwarmMonitorMoments(TS, PetscInt, PetscReal, Vec, PetscViewerAndFormat *);

struct _n_TSMonitorLGCtxNetwork {
  PetscInt     nlg;
  PetscDrawLG *lg;
  PetscBool    semilogy;
  PetscInt     howoften;  
};
typedef struct _n_TSMonitorLGCtxNetwork *TSMonitorLGCtxNetwork;
extern __attribute__((visibility("default"))) PetscErrorCode              TSMonitorLGCtxNetworkDestroy(TSMonitorLGCtxNetwork *);
extern __attribute__((visibility("default"))) PetscErrorCode              TSMonitorLGCtxNetworkCreate(TS, const char[], const char[], int, int, int, int, PetscInt, TSMonitorLGCtxNetwork *);
extern __attribute__((visibility("default"))) PetscErrorCode              TSMonitorLGCtxNetworkSolution(TS, PetscInt, PetscReal, Vec, void *);

typedef struct _n_TSMonitorEnvelopeCtx *TSMonitorEnvelopeCtx;
extern __attribute__((visibility("default"))) PetscErrorCode             TSMonitorEnvelopeCtxCreate(TS, TSMonitorEnvelopeCtx *);
extern __attribute__((visibility("default"))) PetscErrorCode             TSMonitorEnvelope(TS, PetscInt, PetscReal, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode             TSMonitorEnvelopeGetBounds(TS, Vec *, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode             TSMonitorEnvelopeCtxDestroy(TSMonitorEnvelopeCtx *);

typedef struct _n_TSMonitorSPEigCtx *TSMonitorSPEigCtx;
extern __attribute__((visibility("default"))) PetscErrorCode          TSMonitorSPEigCtxCreate(MPI_Comm, const char[], const char[], int, int, int, int, PetscInt, TSMonitorSPEigCtx *);
extern __attribute__((visibility("default"))) PetscErrorCode          TSMonitorSPEigCtxDestroy(TSMonitorSPEigCtx *);
extern __attribute__((visibility("default"))) PetscErrorCode          TSMonitorSPEig(TS, PetscInt, PetscReal, Vec, void *);

typedef struct _n_TSMonitorSPCtx *TSMonitorSPCtx;
extern __attribute__((visibility("default"))) PetscErrorCode       TSMonitorSPCtxCreate(MPI_Comm, const char[], const char[], int, int, int, int, PetscInt, PetscInt, PetscBool, TSMonitorSPCtx *);
extern __attribute__((visibility("default"))) PetscErrorCode       TSMonitorSPCtxDestroy(TSMonitorSPCtx *);
extern __attribute__((visibility("default"))) PetscErrorCode       TSMonitorSPSwarmSolution(TS, PetscInt, PetscReal, Vec, void *);

extern __attribute__((visibility("default"))) PetscErrorCode TSSetEventHandler(TS, PetscInt, PetscInt[], PetscBool[], PetscErrorCode (*)(TS, PetscReal, Vec, PetscScalar[], void *), PetscErrorCode (*)(TS, PetscInt, PetscInt[], PetscReal, Vec, PetscBool, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetPostEventIntervalStep(TS, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TSSetEventTolerances(TS, PetscReal, PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetNumEvents(TS, PetscInt *);







 
typedef const char *TSSSPType;




extern __attribute__((visibility("default"))) PetscErrorCode    TSSSPSetType(TS, TSSSPType);
extern __attribute__((visibility("default"))) PetscErrorCode    TSSSPGetType(TS, TSSSPType *);
extern __attribute__((visibility("default"))) PetscErrorCode    TSSSPSetNumStages(TS, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode    TSSSPGetNumStages(TS, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode    TSSSPInitializePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode    TSSSPFinalizePackage(void);
extern __attribute__((visibility("default"))) PetscFunctionList TSSSPList;







 
typedef struct _p_TSAdapt *TSAdapt;







 
typedef const char *TSAdaptType;
# 723 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscts.h"

extern __attribute__((visibility("default"))) PetscErrorCode TSGetAdapt(TS, TSAdapt *);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptRegister(const char[], PetscErrorCode (*)(TSAdapt));
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptInitializePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptFinalizePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptCreate(MPI_Comm, TSAdapt *);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptSetType(TSAdapt, TSAdaptType);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptGetType(TSAdapt, TSAdaptType *);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptSetOptionsPrefix(TSAdapt, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptCandidatesClear(TSAdapt);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptCandidateAdd(TSAdapt, const char[], PetscInt, PetscInt, PetscReal, PetscReal, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptCandidatesGet(TSAdapt, PetscInt *, const PetscInt **, const PetscInt **, const PetscReal **, const PetscReal **);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptChoose(TSAdapt, TS, PetscReal, PetscInt *, PetscReal *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptCheckStage(TSAdapt, TS, PetscReal, Vec, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptView(TSAdapt, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptLoad(TSAdapt, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptSetFromOptions(TSAdapt, PetscOptionItems *);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptReset(TSAdapt);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptDestroy(TSAdapt *);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptSetMonitor(TSAdapt, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptSetAlwaysAccept(TSAdapt, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptSetSafety(TSAdapt, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptGetSafety(TSAdapt, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptSetMaxIgnore(TSAdapt, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptGetMaxIgnore(TSAdapt, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptSetClip(TSAdapt, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptGetClip(TSAdapt, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptSetScaleSolveFailed(TSAdapt, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptGetScaleSolveFailed(TSAdapt, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptSetStepLimits(TSAdapt, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptGetStepLimits(TSAdapt, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptSetCheckStage(TSAdapt, PetscErrorCode (*)(TSAdapt, TS, PetscReal, Vec, PetscBool *));
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptHistorySetHistory(TSAdapt, PetscInt n, PetscReal hist[], PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptHistorySetTrajectory(TSAdapt, TSTrajectory, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptHistoryGetStep(TSAdapt, PetscInt, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptSetTimeStepIncreaseDelay(TSAdapt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptDSPSetFilter(TSAdapt, const char *);
extern __attribute__((visibility("default"))) PetscErrorCode TSAdaptDSPSetPID(TSAdapt, PetscReal, PetscReal, PetscReal);










 
typedef struct _p_TSGLLEAdapt *TSGLLEAdapt;







 
typedef const char *TSGLLEAdaptType;




extern __attribute__((visibility("default"))) PetscErrorCode TSGLLEAdaptRegister(const char[], PetscErrorCode (*)(TSGLLEAdapt));
extern __attribute__((visibility("default"))) PetscErrorCode TSGLLEAdaptInitializePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode TSGLLEAdaptFinalizePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode TSGLLEAdaptCreate(MPI_Comm, TSGLLEAdapt *);
extern __attribute__((visibility("default"))) PetscErrorCode TSGLLEAdaptSetType(TSGLLEAdapt, TSGLLEAdaptType);
extern __attribute__((visibility("default"))) PetscErrorCode TSGLLEAdaptSetOptionsPrefix(TSGLLEAdapt, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode TSGLLEAdaptChoose(TSGLLEAdapt, PetscInt, const PetscInt[], const PetscReal[], const PetscReal[], PetscInt, PetscReal, PetscReal, PetscInt *, PetscReal *, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode TSGLLEAdaptView(TSGLLEAdapt, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode TSGLLEAdaptSetFromOptions(TSGLLEAdapt, PetscOptionItems *);
extern __attribute__((visibility("default"))) PetscErrorCode TSGLLEAdaptDestroy(TSGLLEAdapt *);







 
typedef const char *TSGLLEAcceptType;


 typedef PetscErrorCode (*TSGLLEAcceptFunction)(TS, PetscReal, PetscReal, const PetscReal[], PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode TSGLLEAcceptRegister(const char[], TSGLLEAcceptFunction);







 
typedef const char *TSGLLEType;


extern __attribute__((visibility("default"))) PetscErrorCode TSGLLERegister(const char[], PetscErrorCode (*)(TS));
extern __attribute__((visibility("default"))) PetscErrorCode TSGLLEInitializePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode TSGLLEFinalizePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode TSGLLESetType(TS, TSGLLEType);
extern __attribute__((visibility("default"))) PetscErrorCode TSGLLEGetAdapt(TS, TSGLLEAdapt *);
extern __attribute__((visibility("default"))) PetscErrorCode TSGLLESetAcceptType(TS, TSGLLEAcceptType);







 


extern __attribute__((visibility("default"))) PetscErrorCode TSEIMEXSetMaxRows(TS ts, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode TSEIMEXSetRowCol(TS ts, PetscInt, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode TSEIMEXSetOrdAdapt(TS, PetscBool);







 
typedef const char *TSRKType;
# 860 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscts.h"

extern __attribute__((visibility("default"))) PetscErrorCode TSRKGetOrder(TS, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode TSRKGetType(TS, TSRKType *);
extern __attribute__((visibility("default"))) PetscErrorCode TSRKSetType(TS, TSRKType);
extern __attribute__((visibility("default"))) PetscErrorCode TSRKGetTableau(TS, PetscInt *, const PetscReal **, const PetscReal **, const PetscReal **, const PetscReal **, PetscInt *, const PetscReal **, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode TSRKSetMultirate(TS, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode TSRKGetMultirate(TS, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode TSRKRegister(TSRKType, PetscInt, PetscInt, const PetscReal[], const PetscReal[], const PetscReal[], const PetscReal[], PetscInt, const PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode TSRKInitializePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode TSRKFinalizePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode TSRKRegisterDestroy(void);







 
typedef const char *TSMPRKType;
# 886 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscts.h"

extern __attribute__((visibility("default"))) PetscErrorCode TSMPRKGetType(TS ts, TSMPRKType *);
extern __attribute__((visibility("default"))) PetscErrorCode TSMPRKSetType(TS ts, TSMPRKType);
extern __attribute__((visibility("default"))) PetscErrorCode TSMPRKRegister(TSMPRKType, PetscInt, PetscInt, PetscInt, PetscInt, const PetscReal[], const PetscReal[], const PetscReal[], const PetscInt[], const PetscReal[], const PetscReal[], const PetscReal[], const PetscInt[], const PetscReal[], const PetscReal[], const PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode TSMPRKInitializePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode TSMPRKFinalizePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode TSMPRKRegisterDestroy(void);







 
typedef const char *TSIRKType;


extern __attribute__((visibility("default"))) PetscErrorCode TSIRKGetOrder(TS, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode TSIRKGetType(TS, TSIRKType *);
extern __attribute__((visibility("default"))) PetscErrorCode TSIRKSetType(TS, TSIRKType);
extern __attribute__((visibility("default"))) PetscErrorCode TSIRKGetNumStages(TS, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode TSIRKSetNumStages(TS, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode TSIRKRegister(const char[], PetscErrorCode (*function)(TS));
extern __attribute__((visibility("default"))) PetscErrorCode TSIRKTableauCreate(TS, PetscInt, const PetscReal *, const PetscReal *, const PetscReal *, const PetscReal *, const PetscScalar *, const PetscScalar *, const PetscScalar *);
extern __attribute__((visibility("default"))) PetscErrorCode TSIRKInitializePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode TSIRKFinalizePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode TSIRKRegisterDestroy(void);







 
typedef const char *TSGLEEType;
# 931 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscts.h"






 
extern __attribute__((visibility("default"))) PetscErrorCode TSGLEEGetType(TS ts, TSGLEEType *);
extern __attribute__((visibility("default"))) PetscErrorCode TSGLEESetType(TS ts, TSGLEEType);
extern __attribute__((visibility("default"))) PetscErrorCode TSGLEERegister(TSGLEEType, PetscInt, PetscInt, PetscInt, PetscReal, const PetscReal[], const PetscReal[], const PetscReal[], const PetscReal[], const PetscReal[], const PetscReal[], const PetscReal[], const PetscReal[], const PetscReal[], const PetscReal[], PetscInt, const PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode TSGLEEFinalizePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode TSGLEEInitializePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode TSGLEERegisterDestroy(void);







 
typedef const char *TSARKIMEXType;
# 966 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscts.h"
extern __attribute__((visibility("default"))) PetscErrorCode TSARKIMEXGetType(TS ts, TSARKIMEXType *);
extern __attribute__((visibility("default"))) PetscErrorCode TSARKIMEXSetType(TS ts, TSARKIMEXType);
extern __attribute__((visibility("default"))) PetscErrorCode TSARKIMEXSetFullyImplicit(TS, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode TSARKIMEXGetFullyImplicit(TS, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode TSARKIMEXRegister(TSARKIMEXType, PetscInt, PetscInt, const PetscReal[], const PetscReal[], const PetscReal[], const PetscReal[], const PetscReal[], const PetscReal[], const PetscReal[], const PetscReal[], PetscInt, const PetscReal[], const PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode TSARKIMEXInitializePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode TSARKIMEXFinalizePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode TSARKIMEXRegisterDestroy(void);







 
typedef const char *TSRosWType;
# 999 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscts.h"

extern __attribute__((visibility("default"))) PetscErrorCode TSRosWGetType(TS, TSRosWType *);
extern __attribute__((visibility("default"))) PetscErrorCode TSRosWSetType(TS, TSRosWType);
extern __attribute__((visibility("default"))) PetscErrorCode TSRosWSetRecomputeJacobian(TS, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode TSRosWRegister(TSRosWType, PetscInt, PetscInt, const PetscReal[], const PetscReal[], const PetscReal[], const PetscReal[], PetscInt, const PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode TSRosWRegisterRos4(TSRosWType, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TSRosWInitializePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode TSRosWFinalizePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode TSRosWRegisterDestroy(void);

extern __attribute__((visibility("default"))) PetscErrorCode TSBDFSetOrder(TS, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode TSBDFGetOrder(TS, PetscInt *);







 
typedef const char *TSBasicSymplecticType;




extern __attribute__((visibility("default"))) PetscErrorCode TSBasicSymplecticSetType(TS, TSBasicSymplecticType);
extern __attribute__((visibility("default"))) PetscErrorCode TSBasicSymplecticGetType(TS, TSBasicSymplecticType *);
extern __attribute__((visibility("default"))) PetscErrorCode TSBasicSymplecticRegister(TSBasicSymplecticType, PetscInt, PetscInt, PetscReal[], PetscReal[]);
extern __attribute__((visibility("default"))) PetscErrorCode TSBasicSymplecticInitializePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode TSBasicSymplecticFinalizePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode TSBasicSymplecticRegisterDestroy(void);








 
extern __attribute__((visibility("default"))) PetscErrorCode TSDiscGradSetFormulation(TS, PetscErrorCode (*)(TS, PetscReal, Vec, Mat, void *), PetscErrorCode (*)(TS, PetscReal, Vec, PetscScalar *, void *), PetscErrorCode (*)(TS, PetscReal, Vec, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TSDiscGradIsGonzalez(TS, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode TSDiscGradUseGonzalez(TS, PetscBool);



 
# 1072 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petscts.h"

extern __attribute__((visibility("default"))) PetscErrorCode TSThetaSetTheta(TS, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TSThetaGetTheta(TS, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TSThetaGetEndpoint(TS, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode TSThetaSetEndpoint(TS, PetscBool);

extern __attribute__((visibility("default"))) PetscErrorCode TSAlphaSetRadius(TS, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TSAlphaSetParams(TS, PetscReal, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TSAlphaGetParams(TS, PetscReal *, PetscReal *, PetscReal *);

extern __attribute__((visibility("default"))) PetscErrorCode TSAlpha2SetRadius(TS, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TSAlpha2SetParams(TS, PetscReal, PetscReal, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TSAlpha2GetParams(TS, PetscReal *, PetscReal *, PetscReal *, PetscReal *);

extern __attribute__((visibility("default"))) PetscErrorCode TSSetDM(TS, DM);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetDM(TS, DM *);

extern __attribute__((visibility("default"))) PetscErrorCode SNESTSFormFunction(SNES, Vec, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode SNESTSFormJacobian(SNES, Vec, Mat, Mat, void *);

extern __attribute__((visibility("default"))) PetscErrorCode TSRHSJacobianTest(TS, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode TSRHSJacobianTestTranspose(TS, PetscBool *);

extern __attribute__((visibility("default"))) PetscErrorCode TSGetComputeInitialCondition(TS, PetscErrorCode (**)(TS, Vec));
extern __attribute__((visibility("default"))) PetscErrorCode TSSetComputeInitialCondition(TS, PetscErrorCode (*)(TS, Vec));
extern __attribute__((visibility("default"))) PetscErrorCode TSComputeInitialCondition(TS, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TSGetComputeExactError(TS, PetscErrorCode (**)(TS, Vec, Vec));
extern __attribute__((visibility("default"))) PetscErrorCode TSSetComputeExactError(TS, PetscErrorCode (*)(TS, Vec, Vec));
extern __attribute__((visibility("default"))) PetscErrorCode TSComputeExactError(TS, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode PetscConvEstUseTS(PetscConvEst, PetscBool);

extern __attribute__((visibility("default"))) PetscErrorCode TSSetMatStructure(TS, MatStructure);
# 31 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 2
# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsctao.h" 1





 

extern __attribute__((visibility("default"))) PetscErrorCode VecFischer(Vec, Vec, Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode VecSFischer(Vec, Vec, Vec, Vec, PetscReal, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatDFischer(Mat, Vec, Vec, Vec, Vec, Vec, Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode MatDSFischer(Mat, Vec, Vec, Vec, Vec, PetscReal, Vec, Vec, Vec, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSoftThreshold(Vec, PetscReal, PetscReal, Vec);













 
typedef enum {
  TAO_SUBSET_SUBVEC,
  TAO_SUBSET_MASK,
  TAO_SUBSET_MATRIXFREE
} TaoSubsetType;
extern __attribute__((visibility("default"))) const char *const TaoSubsetTypes[];







 
typedef struct _p_Tao *Tao;







 
typedef enum {
  TAO_ADMM_UPDATE_BASIC,
  TAO_ADMM_UPDATE_ADAPTIVE,
  TAO_ADMM_UPDATE_ADAPTIVE_RELAXED
} TaoADMMUpdateType;
extern __attribute__((visibility("default"))) const char *const TaoADMMUpdateTypes[];










 










 










 







 
typedef enum {
  TAO_ADMM_REGULARIZER_USER,
  TAO_ADMM_REGULARIZER_SOFT_THRESH
} TaoADMMRegularizerType;
extern __attribute__((visibility("default"))) const char *const TaoADMMRegularizerTypes[];










 











 











 
typedef enum {
  TAO_ALMM_CLASSIC,
  TAO_ALMM_PHR
} TaoALMMType;
extern __attribute__((visibility("default"))) const char *const TaoALMMTypes[];







 
typedef const char *TaoType;
# 184 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsctao.h"

extern __attribute__((visibility("default"))) PetscClassId      TAO_CLASSID;
extern __attribute__((visibility("default"))) PetscFunctionList TaoList;


















 
typedef enum {                
  TAO_CONVERGED_GATOL   = 3,  
  TAO_CONVERGED_GRTOL   = 4,  
  TAO_CONVERGED_GTTOL   = 5,  
  TAO_CONVERGED_STEPTOL = 6,  
  TAO_CONVERGED_MINF    = 7,  
  TAO_CONVERGED_USER    = 8,  
   
  TAO_DIVERGED_MAXITS       = -2,
  TAO_DIVERGED_NAN          = -4,
  TAO_DIVERGED_MAXFCN       = -5,
  TAO_DIVERGED_LS_FAILURE   = -6,
  TAO_DIVERGED_TR_REDUCTION = -7,
  TAO_DIVERGED_USER         = -8,  
   
  TAO_CONTINUE_ITERATING = 0
} TaoConvergedReason;

extern __attribute__((visibility("default"))) const char **TaoConvergedReasons;

extern __attribute__((visibility("default"))) PetscErrorCode TaoInitializePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode TaoFinalizePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode TaoCreate(MPI_Comm, Tao *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetFromOptions(Tao);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetUp(Tao);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetType(Tao, TaoType);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetType(Tao, TaoType *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetApplicationContext(Tao, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetApplicationContext(Tao, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoDestroy(Tao *);

extern __attribute__((visibility("default"))) PetscErrorCode TaoSetOptionsPrefix(Tao, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode TaoView(Tao, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode TaoViewFromOptions(Tao, PetscObject, const char[]);

extern __attribute__((visibility("default"))) PetscErrorCode TaoSolve(Tao);

extern __attribute__((visibility("default"))) PetscErrorCode TaoRegister(const char[], PetscErrorCode (*)(Tao));
extern __attribute__((visibility("default"))) PetscErrorCode TaoRegisterDestroy(void);

extern __attribute__((visibility("default"))) PetscErrorCode TaoGetConvergedReason(Tao, TaoConvergedReason *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetSolutionStatus(Tao, PetscInt *, PetscReal *, PetscReal *, PetscReal *, PetscReal *, TaoConvergedReason *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetConvergedReason(Tao, TaoConvergedReason);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetSolution(Tao, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetSolution(Tao, Vec *);
__attribute__((deprecated)) static inline PetscErrorCode TaoSetInitialVector(Tao t, Vec v)
{
  return TaoSetSolution(t, v);
}
__attribute__((deprecated)) static inline PetscErrorCode TaoGetInitialVector(Tao t, Vec *v)
{
  return TaoGetSolution(t, v);
}

extern __attribute__((visibility("default"))) PetscErrorCode TaoSetObjective(Tao, PetscErrorCode (*)(Tao, Vec, PetscReal *, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetObjective(Tao, PetscErrorCode (**)(Tao, Vec, PetscReal *, void *), void **);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetGradient(Tao, Vec, PetscErrorCode (*)(Tao, Vec, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetGradient(Tao, Vec *, PetscErrorCode (**)(Tao, Vec, Vec, void *), void **);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetObjectiveAndGradient(Tao, Vec, PetscErrorCode (*)(Tao, Vec, PetscReal *, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetObjectiveAndGradient(Tao, Vec *, PetscErrorCode (**)(Tao, Vec, PetscReal *, Vec, void *), void **);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetHessian(Tao, Mat, Mat, PetscErrorCode (*)(Tao, Vec, Mat, Mat, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetHessian(Tao, Mat *, Mat *, PetscErrorCode (**)(Tao, Vec, Mat, Mat, void *), void **);
__attribute__((deprecated)) static inline PetscErrorCode TaoSetObjectiveRoutine(Tao t, PetscErrorCode (*f)(Tao, Vec, PetscReal *, void *), void *c)
{
  return TaoSetObjective(t, f, c);
}
__attribute__((deprecated)) static inline PetscErrorCode TaoGetGradientVector(Tao t, Vec *v)
{
  return TaoGetGradient(t, v, ((void*)0), ((void*)0));
}
__attribute__((deprecated)) static inline PetscErrorCode TaoSetGradientRoutine(Tao t, PetscErrorCode (*f)(Tao, Vec, Vec, void *), void *c)
{
  return TaoSetGradient(t, ((void*)0), f, c);
}
__attribute__((deprecated)) static inline PetscErrorCode TaoSetObjectiveAndGradientRoutine(Tao t, PetscErrorCode (*f)(Tao, Vec, PetscReal *, Vec, void *), void *c)
{
  return TaoSetObjectiveAndGradient(t, ((void*)0), f, c);
}
__attribute__((deprecated)) static inline PetscErrorCode TaoSetHessianRoutine(Tao t, Mat H, Mat P, PetscErrorCode (*f)(Tao, Vec, Mat, Mat, void *), void *c)
{
  return TaoSetHessian(t, H, P, f, c);
}

extern __attribute__((visibility("default"))) PetscErrorCode TaoSetGradientNorm(Tao, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetGradientNorm(Tao, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetLMVMMatrix(Tao, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetLMVMMatrix(Tao, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetRecycleHistory(Tao, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetRecycleHistory(Tao, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLMVMSetH0(Tao, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLMVMGetH0(Tao, Mat *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLMVMGetH0KSP(Tao, KSP *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLMVMRecycle(Tao, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetResidualRoutine(Tao, Vec, PetscErrorCode (*)(Tao, Vec, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetResidualWeights(Tao, Vec, PetscInt, PetscInt *, PetscInt *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetConstraintsRoutine(Tao, Vec, PetscErrorCode (*)(Tao, Vec, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetInequalityConstraintsRoutine(Tao, Vec, PetscErrorCode (*)(Tao, Vec, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetEqualityConstraintsRoutine(Tao, Vec, PetscErrorCode (*)(Tao, Vec, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetJacobianResidualRoutine(Tao, Mat, Mat, PetscErrorCode (*)(Tao, Vec, Mat, Mat, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetJacobianRoutine(Tao, Mat, Mat, PetscErrorCode (*)(Tao, Vec, Mat, Mat, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetJacobianStateRoutine(Tao, Mat, Mat, Mat, PetscErrorCode (*)(Tao, Vec, Mat, Mat, Mat, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetJacobianDesignRoutine(Tao, Mat, PetscErrorCode (*)(Tao, Vec, Mat, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetJacobianInequalityRoutine(Tao, Mat, Mat, PetscErrorCode (*)(Tao, Vec, Mat, Mat, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetJacobianEqualityRoutine(Tao, Mat, Mat, PetscErrorCode (*)(Tao, Vec, Mat, Mat, void *), void *);

extern __attribute__((visibility("default"))) PetscErrorCode TaoPythonSetType(Tao, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode TaoPythonGetType(Tao, const char *[]);

extern __attribute__((visibility("default"))) PetscErrorCode TaoShellSetSolve(Tao, PetscErrorCode (*)(Tao));
extern __attribute__((visibility("default"))) PetscErrorCode TaoShellSetContext(Tao, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoShellGetContext(Tao, void *);

__attribute__((deprecated)) static inline PetscErrorCode TaoSetSeparableObjectiveRoutine(Tao tao, Vec res, PetscErrorCode (*func)(Tao, Vec, Vec, void *), void *ctx)
{
  return TaoSetResidualRoutine(tao, res, func, ctx);
}
__attribute__((deprecated)) static inline PetscErrorCode TaoSetSeparableObjectiveWeights(Tao tao, Vec sigma_v, PetscInt n, PetscInt *rows, PetscInt *cols, PetscReal *vals)
{
  return TaoSetResidualWeights(tao, sigma_v, n, rows, cols, vals);
}

extern __attribute__((visibility("default"))) PetscErrorCode TaoSetStateDesignIS(Tao, IS, IS);

extern __attribute__((visibility("default"))) PetscErrorCode TaoComputeObjective(Tao, Vec, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoComputeResidual(Tao, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TaoTestGradient(Tao, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TaoComputeGradient(Tao, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TaoComputeObjectiveAndGradient(Tao, Vec, PetscReal *, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TaoComputeConstraints(Tao, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TaoComputeInequalityConstraints(Tao, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TaoComputeEqualityConstraints(Tao, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TaoDefaultComputeGradient(Tao, Vec, Vec, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoIsObjectiveDefined(Tao, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoIsGradientDefined(Tao, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoIsObjectiveAndGradientDefined(Tao, PetscBool *);

__attribute__((deprecated)) static inline PetscErrorCode TaoComputeSeparableObjective(Tao tao, Vec X, Vec F)
{
  return TaoComputeResidual(tao, X, F);
}

extern __attribute__((visibility("default"))) PetscErrorCode TaoTestHessian(Tao);
extern __attribute__((visibility("default"))) PetscErrorCode TaoComputeHessian(Tao, Vec, Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode TaoComputeResidualJacobian(Tao, Vec, Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode TaoComputeJacobian(Tao, Vec, Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode TaoComputeJacobianState(Tao, Vec, Mat, Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode TaoComputeJacobianEquality(Tao, Vec, Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode TaoComputeJacobianInequality(Tao, Vec, Mat, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode TaoComputeJacobianDesign(Tao, Vec, Mat);

extern __attribute__((visibility("default"))) PetscErrorCode TaoDefaultComputeHessian(Tao, Vec, Mat, Mat, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoDefaultComputeHessianColor(Tao, Vec, Mat, Mat, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoDefaultComputeHessianMFFD(Tao, Vec, Mat, Mat, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoComputeDualVariables(Tao, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetVariableBounds(Tao, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetVariableBounds(Tao, Vec *, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetDualVariables(Tao, Vec *, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetInequalityBounds(Tao, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetInequalityBounds(Tao, Vec *, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetVariableBoundsRoutine(Tao, PetscErrorCode (*)(Tao, Vec, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoComputeVariableBounds(Tao);

extern __attribute__((visibility("default"))) PetscErrorCode TaoGetTolerances(Tao, PetscReal *, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetTolerances(Tao, PetscReal, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetConstraintTolerances(Tao, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetConstraintTolerances(Tao, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetFunctionLowerBound(Tao, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetInitialTrustRegionRadius(Tao, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetMaximumIterations(Tao, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetMaximumFunctionEvaluations(Tao, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetFunctionLowerBound(Tao, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetInitialTrustRegionRadius(Tao, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetCurrentTrustRegionRadius(Tao, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetMaximumIterations(Tao, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetCurrentFunctionEvaluations(Tao, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetMaximumFunctionEvaluations(Tao, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetIterationNumber(Tao, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetIterationNumber(Tao, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetTotalIterationNumber(Tao, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetTotalIterationNumber(Tao, PetscInt);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetResidualNorm(Tao, PetscReal *);

extern __attribute__((visibility("default"))) PetscErrorCode TaoAppendOptionsPrefix(Tao, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetOptionsPrefix(Tao, const char *[]);
extern __attribute__((visibility("default"))) PetscErrorCode TaoResetStatistics(Tao);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetUpdate(Tao, PetscErrorCode (*)(Tao, PetscInt, void *), void *);

extern __attribute__((visibility("default"))) PetscErrorCode TaoGetKSP(Tao, KSP *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetLinearSolveIterations(Tao, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoKSPSetUseEW(Tao, PetscBool);

# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsctaolinesearch.h" 1



typedef struct _p_TaoLineSearch *TaoLineSearch;

# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsctao.h" 1
# 7 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsctaolinesearch.h" 2

typedef enum {
  TAOLINESEARCH_FAILED_INFORNAN     = -1,
  TAOLINESEARCH_FAILED_BADPARAMETER = -2,
  TAOLINESEARCH_FAILED_ASCENT       = -3,
  TAOLINESEARCH_CONTINUE_ITERATING  = 0,
  TAOLINESEARCH_SUCCESS             = 1,
  TAOLINESEARCH_SUCCESS_USER        = 2,
  TAOLINESEARCH_HALTED_OTHER        = 3,
  TAOLINESEARCH_HALTED_MAXFCN       = 4,
  TAOLINESEARCH_HALTED_UPPERBOUND   = 5,
  TAOLINESEARCH_HALTED_LOWERBOUND   = 6,
  TAOLINESEARCH_HALTED_RTOL         = 7,
  TAOLINESEARCH_HALTED_USER         = 8
} TaoLineSearchConvergedReason;

typedef const char *TaoLineSearchType;
# 30 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsctaolinesearch.h"

extern __attribute__((visibility("default"))) PetscClassId      TAOLINESEARCH_CLASSID;
extern __attribute__((visibility("default"))) PetscFunctionList TaoLineSearchList;

extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchCreate(MPI_Comm, TaoLineSearch *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchSetFromOptions(TaoLineSearch);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchSetUp(TaoLineSearch);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchDestroy(TaoLineSearch *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchMonitor(TaoLineSearch, PetscInt, PetscReal, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchView(TaoLineSearch, PetscViewer);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchViewFromOptions(TaoLineSearch, PetscObject, const char[]);

extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchSetOptionsPrefix(TaoLineSearch, const char prefix[]);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchReset(TaoLineSearch);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchAppendOptionsPrefix(TaoLineSearch, const char[]);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchGetOptionsPrefix(TaoLineSearch, const char *[]);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchApply(TaoLineSearch, Vec, PetscReal *, Vec, Vec, PetscReal *, TaoLineSearchConvergedReason *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchGetStepLength(TaoLineSearch, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchGetStartingVector(TaoLineSearch, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchGetStepDirection(TaoLineSearch, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchSetInitialStepLength(TaoLineSearch, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchGetSolution(TaoLineSearch, Vec, PetscReal *, Vec, PetscReal *, TaoLineSearchConvergedReason *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchGetFullStepObjective(TaoLineSearch, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchGetNumberFunctionEvaluations(TaoLineSearch, PetscInt *, PetscInt *, PetscInt *);

extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchGetType(TaoLineSearch, TaoLineSearchType *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchSetType(TaoLineSearch, TaoLineSearchType);

extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchIsUsingTaoRoutines(TaoLineSearch, PetscBool *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchSetObjectiveAndGTSRoutine(TaoLineSearch, PetscErrorCode (*)(TaoLineSearch, Vec, Vec, PetscReal *, PetscReal *, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchSetObjectiveRoutine(TaoLineSearch, PetscErrorCode (*)(TaoLineSearch, Vec, PetscReal *, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchSetGradientRoutine(TaoLineSearch, PetscErrorCode (*)(TaoLineSearch, Vec, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchSetObjectiveAndGradientRoutine(TaoLineSearch, PetscErrorCode (*)(TaoLineSearch, Vec, PetscReal *, Vec, void *), void *);

extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchComputeObjective(TaoLineSearch, Vec, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchComputeGradient(TaoLineSearch, Vec, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchComputeObjectiveAndGradient(TaoLineSearch, Vec, PetscReal *, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchComputeObjectiveAndGTS(TaoLineSearch, Vec, PetscReal *, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchSetVariableBounds(TaoLineSearch, Vec, Vec);

extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchInitializePackage(void);
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchFinalizePackage(void);

extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchRegister(const char[], PetscErrorCode (*)(TaoLineSearch));
extern __attribute__((visibility("default"))) PetscErrorCode TaoLineSearchUseTaoRoutines(TaoLineSearch, Tao);

# 398 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsctao.h" 2

extern __attribute__((visibility("default"))) PetscErrorCode TaoGetLineSearch(Tao, TaoLineSearch *);

extern __attribute__((visibility("default"))) PetscErrorCode TaoSetConvergenceHistory(Tao, PetscReal *, PetscReal *, PetscReal *, PetscInt *, PetscInt, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetConvergenceHistory(Tao, PetscReal **, PetscReal **, PetscReal **, PetscInt **, PetscInt *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetMonitor(Tao, PetscErrorCode (*)(Tao, void *), void *, PetscErrorCode (*)(void **));
extern __attribute__((visibility("default"))) PetscErrorCode TaoCancelMonitors(Tao);
extern __attribute__((visibility("default"))) PetscErrorCode TaoMonitorDefault(Tao, void *);
__attribute__((deprecated)) static inline PetscErrorCode TaoDefaultMonitor(Tao tao, void *ctx)
{
  return TaoMonitorDefault(tao, ctx);
}
extern __attribute__((visibility("default"))) PetscErrorCode TaoDefaultGMonitor(Tao, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoDefaultSMonitor(Tao, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoDefaultCMonitor(Tao, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSolutionMonitor(Tao, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoResidualMonitor(Tao, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGradientMonitor(Tao, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoStepDirectionMonitor(Tao, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoDrawSolutionMonitor(Tao, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoDrawStepMonitor(Tao, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoDrawGradientMonitor(Tao, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoAddLineSearchCounts(Tao);

extern __attribute__((visibility("default"))) PetscErrorCode TaoDefaultConvergenceTest(Tao, void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoSetConvergenceTest(Tao, PetscErrorCode (*)(Tao, void *), void *);

extern __attribute__((visibility("default"))) PetscErrorCode          TaoLCLSetStateDesignIS(Tao, IS, IS);
extern __attribute__((visibility("default"))) PetscErrorCode          TaoMonitor(Tao, PetscInt, PetscReal, PetscReal, PetscReal, PetscReal);
typedef struct _n_TaoMonitorDrawCtx *TaoMonitorDrawCtx;
extern __attribute__((visibility("default"))) PetscErrorCode          TaoMonitorDrawCtxCreate(MPI_Comm, const char[], const char[], int, int, int, int, PetscInt, TaoMonitorDrawCtx *);
extern __attribute__((visibility("default"))) PetscErrorCode          TaoMonitorDrawCtxDestroy(TaoMonitorDrawCtx *);

extern __attribute__((visibility("default"))) PetscErrorCode TaoBRGNGetSubsolver(Tao, Tao *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoBRGNSetRegularizerObjectiveAndGradientRoutine(Tao, PetscErrorCode (*)(Tao, Vec, PetscReal *, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoBRGNSetRegularizerHessianRoutine(Tao, Mat, PetscErrorCode (*)(Tao, Vec, Mat, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoBRGNSetRegularizerWeight(Tao, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TaoBRGNSetL1SmoothEpsilon(Tao, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TaoBRGNSetDictionaryMatrix(Tao, Mat);
extern __attribute__((visibility("default"))) PetscErrorCode TaoBRGNGetDampingVector(Tao, Vec *);

extern __attribute__((visibility("default"))) PetscErrorCode TaoADMMGetMisfitSubsolver(Tao, Tao *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoADMMGetRegularizationSubsolver(Tao, Tao *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoADMMGetDualVector(Tao, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoADMMGetSpectralPenalty(Tao, PetscReal *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoADMMSetSpectralPenalty(Tao, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TaoGetADMMParentTao(Tao, Tao *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoADMMSetConstraintVectorRHS(Tao, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TaoADMMSetRegularizerCoefficient(Tao, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TaoADMMSetMisfitConstraintJacobian(Tao, Mat, Mat, PetscErrorCode (*)(Tao, Vec, Mat, Mat, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoADMMSetRegularizerConstraintJacobian(Tao, Mat, Mat, PetscErrorCode (*)(Tao, Vec, Mat, Mat, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoADMMSetRegularizerHessianRoutine(Tao, Mat, Mat, PetscErrorCode (*)(Tao, Vec, Mat, Mat, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoADMMSetRegularizerObjectiveAndGradientRoutine(Tao, PetscErrorCode (*)(Tao, Vec, PetscReal *, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoADMMSetMisfitHessianRoutine(Tao, Mat, Mat, PetscErrorCode (*)(Tao, Vec, Mat, Mat, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoADMMSetMisfitObjectiveAndGradientRoutine(Tao, PetscErrorCode (*)(Tao, Vec, PetscReal *, Vec, void *), void *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoADMMSetMisfitHessianChangeStatus(Tao, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode TaoADMMSetRegHessianChangeStatus(Tao, PetscBool);
extern __attribute__((visibility("default"))) PetscErrorCode TaoADMMSetMinimumSpectralPenalty(Tao, PetscReal);
extern __attribute__((visibility("default"))) PetscErrorCode TaoADMMSetRegularizerType(Tao, TaoADMMRegularizerType);
extern __attribute__((visibility("default"))) PetscErrorCode TaoADMMGetRegularizerType(Tao, TaoADMMRegularizerType *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoADMMSetUpdateType(Tao, TaoADMMUpdateType);
extern __attribute__((visibility("default"))) PetscErrorCode TaoADMMGetUpdateType(Tao, TaoADMMUpdateType *);

extern __attribute__((visibility("default"))) PetscErrorCode TaoALMMGetType(Tao, TaoALMMType *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoALMMSetType(Tao, TaoALMMType);
extern __attribute__((visibility("default"))) PetscErrorCode TaoALMMGetSubsolver(Tao, Tao *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoALMMSetSubsolver(Tao, Tao);
extern __attribute__((visibility("default"))) PetscErrorCode TaoALMMGetMultipliers(Tao, Vec *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoALMMSetMultipliers(Tao, Vec);
extern __attribute__((visibility("default"))) PetscErrorCode TaoALMMGetPrimalIS(Tao, IS *, IS *);
extern __attribute__((visibility("default"))) PetscErrorCode TaoALMMGetDualIS(Tao, IS *, IS *);
# 32 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 2
# 14 "include/ParticleSwarm.h" 2
# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stdbool.h" 1 3































 




 
# 51 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stdbool.h" 3



# 16 "include/ParticleSwarm.h" 2
# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 1 3












 










# 69 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

     


         
# 194 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

     
# 244 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

# 17 "include/ParticleSwarm.h" 2
# 1 "include/common.h" 1








 





# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 1


 

# 12 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h"

# 24 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h"






# 16 "include/common.h" 2




# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 1 3












 










# 69 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

     


         
# 194 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

     
# 244 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

# 23 "include/common.h" 2







 
typedef struct {
    PetscScalar x, y, z;
} Cmpnts;



 
typedef struct {
    PetscScalar x, y;
} Cmpnts2;



 
typedef struct {
    PetscReal t, f;
} FlowWave;



 
typedef struct {
    Cmpnts min_coords;  
    Cmpnts max_coords;  
} BoundingBox;



 
typedef struct {
    PetscInt64 PID;      
    PetscInt64 cell[3];  
    Cmpnts loc;          
    Cmpnts vel;          
    Cmpnts weights;      
} Particle;


typedef struct {
    PetscMPIInt rank_xm; 
    PetscMPIInt rank_xp; 
    PetscMPIInt rank_ym; 
    PetscMPIInt rank_yp; 
    PetscMPIInt rank_zm; 
    PetscMPIInt rank_zp; 
    
} RankNeighbors;



 
typedef struct {
    Cmpnts vertices[8];  
} Cell;






 
typedef struct {
    
    DM da;                  
    DM fda;                 
    DM fda2;                  
    PetscReal xMin,yMin,zMin; 
    PetscReal xMax,yMax,zMax; 
    PetscInt IM, JM, KM;    
    BoundingBox bbox;       
    DMDALocalInfo info;     
    PetscReal rx;           
    PetscReal ry;           
    PetscReal rz;           

    
    Vec Ucont,lUcont;              
    Vec Ucat, lUcat;               
    Vec P, lP;                  
    Vec Nvert, lNvert;              
    Vec Nvert_o, lNvert_o;            
    PetscReal ConstantVelocity;
    PetscReal ConstantContra;
    PetscReal ConstantPressure;
    PetscReal ConstantNvert;
  
    
    Vec Ucat_sum;           
    Vec Ucat_cross_sum;     
    Vec Ucat_square_sum;    
    Vec P_sum;              

    
    Vec lCs;                
    Vec Cs;                 

    
    Vec K_Omega;            
    Vec K_Omega_o;          
  Vec lK_Omega,lK_Omega_o;  

    
    DM swarm;               
    PetscMPIInt *miglist;      
    PetscInt ParticleInitialization;
    PetscInt NumberofParticles;   

    
    PetscReal dt;           
    PetscReal ren;          
    PetscReal ti;            
    PetscReal step;            
    PetscInt  FieldInitialization;
    PetscInt  LoggingFrequency;  
  
    
    PetscBool averaging;    
    PetscBool les;          
    PetscBool rans;         
  RankNeighbors neighbors;  

    
    PetscInt _this;         
  
} UserCtx;













 
typedef struct {
    PetscInt  startTime;        
    PetscInt  endTime;          
    PetscInt  timeStep;         

    char      eulerianExt[8];   
    char      particleExt[8];   
    char      eulerianPrefix[20];  
    char      particlePrefix[20];  
    PetscBool outputParticles;  
} PostProcessParams;

typedef enum {
    VTK_STRUCTURED,
    VTK_POLYDATA
} VTKFileType;

 








 
typedef struct _n_VTKMetaData {
     
    VTKFileType  fileType;
 
     
    PetscInt          mx, my, mz;    
    PetscInt          nnodes;        

     
    PetscInt          npoints;       

     
    PetscScalar      *coords;        

     
    PetscScalar      *scalarField;
    const char  *scalarFieldName;
    PetscInt          numScalarFields;

     
    PetscScalar      *vectorField;        
    const char  *vectorFieldName;    
    PetscInt          numVectorFields;    

     
    PetscInt         *connectivity; 
    PetscInt         *offsets;
} VTKMetaData;








































 


 
typedef enum {
    BC_FACE_POS_X,
    BC_FACE_NEG_X,
    BC_FACE_POS_Y,
    BC_FACE_NEG_Y,
    BC_FACE_POS_Z,
    BC_FACE_NEG_Z
} BCFace;

 
typedef enum {
    BC_TYPE_DIRICHLET,
    BC_TYPE_NEUMANN
     
} BCType;






 
typedef enum {
    LEFT = 0,     
    RIGHT,        
    BOTTOM,       
    TOP,          
    FRONT,        
    BACK,         
    NUM_FACES     
} Face;


typedef struct {
    PetscInt local_index; 
    PetscInt target_rank; 
    
} MigrationInfo;

# 18 "include/ParticleSwarm.h" 2
# 1 "include/logging.h" 1






 





# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 1


 

# 12 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h"

# 24 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h"






# 14 "include/logging.h" 2
# 1 "include/AnalyticalSolution.h" 1



# 1 "/usr/include/time.h" 1 3















 



 






# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 1 3































 





# 50 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3


 







 
# 69 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 80 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 87 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3

# 103 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/icc/stddef.h" 3





 
# 30 "/usr/include/time.h" 2 3


 
# 1 "/usr/include/bits/time.h" 1 3
















 



 








 


 


# 43 "/usr/include/bits/time.h" 3


 

 

 

 

 

 

 

 

 

 

 


 



# 82 "/usr/include/bits/time.h" 3

# 34 "/usr/include/time.h" 2 3


 
# 1 "/usr/include/bits/types/struct_tm.h" 1 3





 
struct tm
{
  int tm_sec;			 
  int tm_min;			 
  int tm_hour;			 
  int tm_mday;			 
  int tm_mon;			 
  int tm_year;			 
  int tm_wday;			 
  int tm_yday;			 
  int tm_isdst;			 


  long int tm_gmtoff;		 
  const char *tm_zone;		 




};

# 40 "/usr/include/time.h" 2 3





# 1 "/usr/include/bits/types/struct_itimerspec.h" 1 3






 
struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };

# 49 "/usr/include/time.h" 2 3
struct sigevent;


# 58 "/usr/include/time.h" 3






 






 
extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));

 
extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));

 
extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

 
extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));




 
extern size_t strftime (char *__restrict __s, size_t __maxsize,
			const char *__restrict __format,
			const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));

# 99 "/usr/include/time.h" 3



 

extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
			  const char *__restrict __format,
			  const struct tm *__restrict __tp,
			  locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));










 
extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


 
extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));



 
extern struct tm *gmtime_r (const time_t *__restrict __timer,
			    struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));


 
extern struct tm *localtime_r (const time_t *__restrict __timer,
			       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));



 
extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));

 
extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


 


 
extern char *asctime_r (const struct tm *__restrict __tp,
			char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));

 
extern char *ctime_r (const time_t *__restrict __timer,
		      char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



 
extern char *__tzname[2];	 
extern int __daylight;		 
extern long int __timezone;	 



 
extern char *tzname[2];


 
extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));



extern int daylight;
extern long int timezone;




 
extern int stime (const time_t *__when) __attribute__ ((__nothrow__ , __leaf__));




 






 

 
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));

 
extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));

 
extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__))  __attribute__ ((__const__));







 
extern int nanosleep (const struct timespec *__requested_time,
		      struct timespec *__remaining);


 
extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));

 
extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));

 
extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));





 
extern int clock_nanosleep (clockid_t __clock_id, int __flags,
			    const struct timespec *__req,
			    struct timespec *__rem);

 
extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));



 
extern int timer_create (clockid_t __clock_id,
			 struct sigevent *__restrict __evp,
			 timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));

 
extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));

 
extern int timer_settime (timer_t __timerid, int __flags,
			  const struct itimerspec *__restrict __value,
			  struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));

 
extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));

 
extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));




 
extern int timespec_get (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



# 291 "/usr/include/time.h" 3

# 306 "/usr/include/time.h" 3



# 8 "include/AnalyticalSolution.h" 2
# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 1 3












 










# 69 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

     


         
# 194 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

     
# 244 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

# 9 "include/AnalyticalSolution.h" 2




# 1 "include/ParticleSwarm.h" 1






 

# 15 "include/AnalyticalSolution.h" 2
# 1 "include/walkingsearch.h" 1








 





# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 1


 

# 12 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h"

# 24 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h"






# 16 "include/walkingsearch.h" 2
# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 1 3












 










# 69 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

     


         
# 194 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

     
# 244 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

# 18 "include/walkingsearch.h" 2
# 1 "include/logging.h" 1






 

# 20 "include/walkingsearch.h" 2
# 1 "include/setup.h" 1



# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 1 3












 










# 69 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

     


         
# 194 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

     
# 244 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

# 9 "include/setup.h" 2




# 1 "include/walkingsearch.h" 1








 

# 16 "include/setup.h" 2
# 1 "include/grid.h" 1






 





# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 1


 

# 12 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h"

# 24 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h"






# 14 "include/grid.h" 2
# 1 "include/io.h" 1






 




# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 1


 

# 12 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h"

# 24 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h"






# 13 "include/io.h" 2
# 1 "include/grid.h" 1






 

# 16 "include/io.h" 2






















 
PetscErrorCode ReadGridGenerationInputs(UserCtx *user, PetscInt *grid1d, PetscReal *xMin, PetscReal *xMax,
                               PetscReal *yMin, PetscReal *yMax, PetscReal *zMin, PetscReal *zMax,  PetscInt **imm, PetscInt **jmm, PetscInt **kmm,
					PetscInt *nblk);















 
PetscErrorCode ReadGridFile(const char *filename, PetscInt *nblk, PetscInt **imm, PetscInt **jmm, 
                            PetscInt **kmm, PetscInt *grid1d, MPI_Comm comm);












 
PetscErrorCode ReadSimulationFields(UserCtx *user, PetscInt ti);















 
PetscErrorCode ReadFieldData(UserCtx *user, const char *field_name, Vec field_vec, PetscInt ti, const char *ext);












 
PetscErrorCode ReadStatisticalFields(UserCtx *user,PetscInt ti);











 
PetscErrorCode ReadLESFields(UserCtx *user, PetscInt ti);










 
PetscErrorCode ReadRANSFields(UserCtx *user, PetscInt ti);














 
PetscErrorCode WriteFieldData(UserCtx *user, const char *field_name, Vec field_vec, PetscInt ti, const char *ext);












 
PetscErrorCode WriteSimulationFields(UserCtx *user);











 
PetscErrorCode WriteStatisticalFields(UserCtx *user);










 
PetscErrorCode WriteLESFields(UserCtx *user);










 
PetscErrorCode WriteRANSFields(UserCtx *user);



















 
PetscErrorCode WriteSwarmField(UserCtx *user, const char *field_name, PetscInt ti, const char *ext);























 
PetscInt ReadDataFileToArray(const char   *filename,
                        double      **data_out,
                        PetscInt          *Nout,
                        MPI_Comm      comm);
























 
PetscInt CreateVTKFileFromMetadata(const char       *filename,
                              const VTKMetaData *meta,
                              MPI_Comm          comm);










 
PetscErrorCode VecToArrayOnRank0(Vec inVec, PetscInt *N, double **arrayOut);
















 
PetscErrorCode ReadSwarmField(UserCtx *user, const char *field_name, PetscInt ti, const char *ext);












 
PetscErrorCode ReadAllSwarmFields(UserCtx *user, PetscInt ti);














 
PetscErrorCode ReadPositionsFromFile(PetscInt timeIndex,
                                      UserCtx *user,
                                      double **coordsArray,
				     PetscInt *Ncoords);















 
PetscErrorCode ReadFieldDataToRank0(PetscInt timeIndex,
                                           const char *fieldName,
                                           UserCtx *user,
                                           double **scalarArray,
				    PetscInt *Nscalars);


# 18 "include/grid.h" 2
# 1 "include/setup.h" 1
# 19 "include/grid.h" 2
























 
PetscErrorCode ParseGridInputs(UserCtx *user, PetscInt *generate_grid, PetscInt *grid1d, PetscReal *xMin, PetscReal *xMax,
                               PetscReal *yMin, PetscReal *yMax, PetscReal *zMin, PetscReal *zMax,  PetscInt **imm, PetscInt **jmm, PetscInt **kmm,
                               PetscInt *nblk, FILE *fd);













 
PetscErrorCode DetermineGridSizes(PetscInt bi, UserCtx *user, PetscInt *IM, PetscInt *JM, PetscInt *KM,
                                  FILE *fd, PetscInt generate_grid, PetscInt *imm, PetscInt *jmm, PetscInt *kmm, PetscInt *nblk);


















 
PetscErrorCode InitializeGridDM(UserCtx *user);



















 
PetscErrorCode AssignGridCoordinates(UserCtx *user, PetscInt generate_grid, PetscInt grid1d, PetscInt IM, PetscInt JM, PetscInt KM,  FILE *fd);












 
PetscErrorCode FinalizeGridSetup(PetscInt generate_grid, FILE *fd,PetscInt *imm,PetscInt *jmm,PetscInt *kmm);










 


PetscErrorCode DefineGridCoordinates(UserCtx *user);











 
PetscErrorCode ComputeLocalBoundingBox(UserCtx *user, BoundingBox *localBBox);













 
PetscErrorCode GatherAllBoundingBoxes(UserCtx *user, BoundingBox **allBBoxes);














 
PetscErrorCode BroadcastAllBoundingBoxes(UserCtx *user, BoundingBox **bboxlist);

# 17 "include/setup.h" 2
# 1 "include/interpolation.h" 1



# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 1 3












 










# 69 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

     


         
# 194 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

     
# 244 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

# 9 "include/interpolation.h" 2




# 20 "include/interpolation.h"













 
# 40 "include/interpolation.h"
























 




















 




















 
PetscErrorCode TrilinearInterpolation_Scalar(
    const char   *fieldName,
    PetscReal  ***fieldScal,
    PetscInt      i,
    PetscInt      j,
    PetscInt      k,
    PetscReal     a1,
    PetscReal     a2,
    PetscReal     a3,
    PetscReal    *val);













 
PetscErrorCode TrilinearInterpolation_Vector(
    const char   *fieldName,
    Cmpnts     ***fieldVec,
    PetscInt      i,
    PetscInt      j,
    PetscInt      k,
    PetscReal     a1,
    PetscReal     a2,
    PetscReal     a3,
    Cmpnts       *vec);














 
PetscErrorCode InterpolateEulerFieldToSwarm(
    UserCtx    *user,
    Vec         fieldGlobal,        
    const char *fieldName,          
    const char *swarmOutFieldName);  



















 
PetscErrorCode InterpolateAllFieldsToSwarm(UserCtx *user);






 

PetscErrorCode InterpolateParticleVelocities(UserCtx *user);



















 
PetscErrorCode InterpolateFieldFromCornerToCenter_Scalar(
    PetscReal ***field,
    PetscReal ***centfield,
    UserCtx *user);

















 
PetscErrorCode InterpolateFieldFromCornerToCenter_Vector(
    Cmpnts ***field,
    Cmpnts ***centfield,
    UserCtx *user);



















 
PetscErrorCode InterpolateFieldFromCenterToCorner_Scalar(PetscReal ***field_arr,
                                                  PetscReal ***centfield_arr,
                                                  UserCtx *user);




















 
PetscErrorCode InterpolateFieldFromCenterToCorner_Vector(Cmpnts ***field_arr,
                                                  Cmpnts ***centfield_arr,
                                                  UserCtx *user);



# 20 "include/setup.h" 2
# 1 "include/AnalyticalSolution.h" 1
# 21 "include/setup.h" 2
# 1 "include/ParticleMotion.h" 1





 





# 1 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h" 1


 

# 12 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h"

# 24 "/sw/eb/sw/PETSc/3.18.4-intel-2021b/include/petsc.h"






# 13 "include/ParticleMotion.h" 2
# 1 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 1 3












 










# 69 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

     


         
# 194 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

     
# 244 "/sw/eb/sw/intel-compilers/2021.4.0/compiler/2021.4.0/linux/bin/intel64/../../compiler/include/math.h" 3

# 17 "include/ParticleMotion.h" 2











 
 PetscErrorCode UpdateParticlePosition(UserCtx *user, Cmpnts *position, const Cmpnts *velocity);







 
 PetscErrorCode UpdateAllParticlePositions(UserCtx *user);



















 
PetscErrorCode CheckAndRemoveOutOfBoundsParticles(UserCtx *user,
                                              PetscInt *removedCountLocal,
					      PetscInt *removedCountGlobal);












 
PetscErrorCode DefineBasicMigrationPattern(UserCtx* user);













 
PetscErrorCode PerformBasicMigration(UserCtx* user);
















 
PetscErrorCode IdentifyMigratingParticles(UserCtx *user,
                                        const BoundingBox *bboxlist,
                                        MigrationInfo **migrationList,
                                        PetscInt *migrationCount,
					  PetscInt *listCapacity);



PetscErrorCode SetMigrationRanks(UserCtx* user, const MigrationInfo *migrationList, PetscInt migrationCount);










 
PetscErrorCode PerformMigration(UserCtx *user);

# 22 "include/setup.h" 2



 






 







 




 
PetscErrorCode registerEvents(void);


















 
PetscErrorCode InitializeSimulation(UserCtx **user, PetscMPIInt *rank, PetscMPIInt *size, PetscInt *np, PetscInt *StartStep, PetscInt *StepsToRun,PetscReal *StartTime, PetscInt *nblk, PetscInt *outputFreq);







 
PetscErrorCode SetupGridAndVectors(UserCtx *user, PetscInt block_number);








 
 PetscErrorCode FinalizeSimulation(UserCtx *user, PetscInt block_number, BoundingBox *bboxlist);






















 
 PetscErrorCode Allocate3DArrayScalar(PetscReal ****array, PetscInt nz, PetscInt ny, PetscInt nx);














 
PetscErrorCode Deallocate3DArrayScalar(PetscReal ***array, PetscInt nz, PetscInt ny);














 
 PetscErrorCode Allocate3DArrayVector(Cmpnts ****array, PetscInt nz, PetscInt ny, PetscInt nx);














 
PetscErrorCode Deallocate3DArrayVector(Cmpnts ***array, PetscInt nz, PetscInt ny);


















 
PetscErrorCode GetOwnedCellRange(const DMDALocalInfo *info_nodes, PetscInt dim, PetscInt *xs_cell, PetscInt *xm_cell);















 
PetscErrorCode UpdateLocalGhosts(UserCtx* user, const char *fieldName);


























 
PetscErrorCode SetEulerianFields(UserCtx *user, PetscInt step, PetscInt StartStep, PetscReal time, PetscBool readFields);






















 
PetscErrorCode AdvanceSimulation(UserCtx *user, PetscInt StartStep, PetscReal StartTime, PetscInt StepsToRun, PetscInt OutputFreq, PetscBool readFields, const BoundingBox *bboxlist);












 
PetscErrorCode ComputeAndStoreNeighborRanks(UserCtx *user);















 
PetscErrorCode SetDMDAProcLayout(DM dm, UserCtx *user);

# 21 "include/walkingsearch.h" 2












 
 PetscErrorCode GetCellCharacteristicSize(const Cell *cell, PetscReal *cellSize);
















 
PetscErrorCode ComputeSignedDistanceToPlane(const Cmpnts p1, const Cmpnts p2, const Cmpnts p3, const Cmpnts p4, const Cmpnts p, PetscReal *d, const PetscReal threshold);














 
PetscErrorCode CalculateDistancesToCellFaces(const Cmpnts p, const Cell *cell, PetscReal *d, const PetscReal threshold);
















 
 PetscErrorCode DeterminePointPosition(PetscReal *d, PetscInt *result);














 
PetscErrorCode GetCellVerticesFromGrid(Cmpnts ***coor, PetscInt idx, PetscInt idy, PetscInt idz, Cell *cell);















 
PetscErrorCode InitializeTraversalParameters(UserCtx *user, Particle *particle, PetscInt *idx, PetscInt *idy, PetscInt *idz, PetscInt *traversal_steps);











 
PetscErrorCode CheckCellWithinLocalGrid(UserCtx *user, PetscInt idx, PetscInt idy, PetscInt idz, PetscBool *is_within);











 
PetscErrorCode RetrieveCurrentCell(UserCtx *user, PetscInt idx, PetscInt idy, PetscInt idz, Cell *cell);













































 
 PetscErrorCode EvaluateParticlePosition(const Cell *cell, PetscReal *d, const Cmpnts p, PetscInt *position, const PetscReal threshold);


















 
PetscErrorCode LocateParticleInGrid(UserCtx *user, Particle *particle, PetscReal* d);





















 
PetscErrorCode UpdateCellIndicesBasedOnDistances( PetscReal d[NUM_FACES], PetscInt *idx, PetscInt *idy, PetscInt *idz, DMDALocalInfo *info);

















 
PetscErrorCode FinalizeTraversal(UserCtx *user, Particle *particle, PetscInt traversal_steps, PetscBool cell_found, PetscInt idx, PetscInt idy, PetscInt idz);



















 
PetscErrorCode LocateParticleInGrid(UserCtx *user, Particle *particle, PetscReal *d);

# 16 "include/AnalyticalSolution.h" 2
















 






















 
PetscErrorCode SetLocalCartesianField_Scalar(const char *fieldName, PetscReal *scalarField, Cmpnts *coor,PetscInt FieldInitialization, PetscReal Constant);












 
PetscErrorCode SetLocalCartesianField_Vector(const char *fieldName, Cmpnts *vecField, Cmpnts *coor, PetscInt FieldInitialization, PetscReal Constant);



























 
PetscErrorCode SetAnalyticalCartesianField(UserCtx *user, const char *fieldName);










 
PetscErrorCode SetAnalyticalSolution(Vec tempVec, PetscInt FieldInitialization);















 
PetscErrorCode ApplyAnalyticalBC(UserCtx *user, const char *fieldName);

# 18 "include/logging.h" 2






 
typedef enum {
    LOG_ERROR = 0,    
    LOG_WARNING,      
    LOG_PROFILE,       
    LOG_INFO,         
    LOG_DEBUG = 99,        
} LogLevel;








 






extern PetscLogEvent EVENT_Individualwalkingsearch;
extern PetscLogEvent EVENT_walkingsearch;





















 
# 81 "include/logging.h"




















 
# 112 "include/logging.h"



















 
# 144 "include/logging.h"




















 
# 172 "include/logging.h"














 


# 195 "include/logging.h"
 
# 214 "include/logging.h"























 
# 250 "include/logging.h"















 
# 291 "include/logging.h"


# 302 "include/logging.h"
 
      














 
# 329 "include/logging.h"













 
# 354 "include/logging.h"

















 
# 385 "include/logging.h"












 
# 413 "include/logging.h"


# 422 "include/logging.h"










 
LogLevel get_log_level();



















 
void print_log_level();





 
void set_allowed_functions(const char** functionList, int count);





 
PetscBool is_function_allowed(const char* functionName);














 
PetscErrorCode LOG_CELL_VERTICES(const Cell *cell, PetscMPIInt rank);





















 
PetscErrorCode LOG_FACE_DISTANCES(PetscReal* d);












 
PetscErrorCode LOG_PARTICLE_FIELDS(UserCtx* user, PetscInt printInterval);










 
  PetscErrorCode LOG_INTERPOLATION_ERROR(UserCtx *user);

# 19 "include/ParticleSwarm.h" 2



























 
PetscErrorCode CreateParticleSwarm(UserCtx *user, PetscInt numParticles, PetscInt *particlesPerProcess, BoundingBox *bboxlist);









 
PetscErrorCode InitializeSwarm(UserCtx* user);









 
PetscErrorCode RegisterParticleFields(DM swarm);












 
PetscErrorCode InitializeRandomGenerators(UserCtx *user, PetscRandom *randx, PetscRandom *randy, PetscRandom *randz);















 
PetscErrorCode AssignInitialPropertiesToSwarm(UserCtx* user, PetscInt particlesPerProcess, PetscRandom *randx, PetscRandom *randy, PetscRandom *randz, BoundingBox *bboxlist);














 
PetscErrorCode DistributeParticles(PetscInt numParticles, PetscMPIInt rank, PetscMPIInt size, PetscInt* particlesPerProcess, PetscInt* remainder);











 
PetscErrorCode FinalizeSwarmSetup(PetscRandom *randx, PetscRandom *randy, PetscRandom *randz);














 
PetscErrorCode InitializeParticle(PetscInt i, const PetscInt64 *PIDs, const PetscReal *weights,
                                         const PetscReal *positions, const PetscInt64 *cellIndices,
                                         Particle *particle);












 
PetscErrorCode UpdateSwarmFields(PetscInt i, const Particle *particle,
                                        PetscReal *weights, PetscInt64 *cellIndices);











 
PetscErrorCode LocateAllParticlesInGrid(UserCtx *user);




















 
PetscBool IsParticleInsideBoundingBox(const BoundingBox *bbox, const Particle *particle);











 
PetscErrorCode UpdateParticleWeights(PetscReal *d, Particle *particle);





















 
PetscErrorCode InitializeParticleSwarm(UserCtx *user, PetscInt np, BoundingBox *bboxlist);

# 4 "src/ParticleSwarm.c" 2










 
PetscErrorCode InitializeSwarm(UserCtx* user) {
    PetscErrorCode ierr;  

    
    ierr = DMCreate(PETSC_COMM_WORLD, &user->swarm); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 19, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    ierr = DMSetType(user->swarm, "swarm"); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 20, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    ierr = DMSetDimension(user->swarm, 3); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 21, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    ierr = DMSwarmSetType(user->swarm, DMSWARM_BASIC); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 22, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    do { MPI_Comm comm = (LOG_INFO == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)0, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(0) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "InitializeSwarm - DMSwarm created and configured.\n", __func__); } } while (0);

    return 0;
}













 
static PetscErrorCode RegisterSwarmField(DM swarm, const char *fieldName, PetscInt fieldDim)
{
    PetscErrorCode ierr;
    ;
    
    ierr = DMSwarmRegisterPetscDatatypeField(swarm, fieldName, fieldDim, PETSC_DOUBLE); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 46, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    do { MPI_Comm comm = (LOG_DEBUG == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)0, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(0) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "RegisterSwarmField - Registered field '%s' with dimension=%d.\n", __func__,fieldName, fieldDim); } } while (0);


    
    return 0;
}










 

PetscErrorCode RegisterParticleFields(DM swarm)
{
    PetscErrorCode ierr;
    ;
    
    
    ierr = RegisterSwarmField(swarm, "position", 3); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 71, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    do { MPI_Comm comm = (LOG_DEBUG == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)0, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(0) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "RegisterParticleFields - Registered field 'position'.\n", __func__); } } while (0);
    
    ierr = RegisterSwarmField(swarm, "velocity", 3); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 74, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    do { MPI_Comm comm = (LOG_DEBUG == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)0, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(0) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "RegisterParticleFields - Registered field 'velocity'.\n", __func__); } } while (0);
    
    ierr = RegisterSwarmField(swarm, "DMSwarm_CellID", 3); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 77, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    do { MPI_Comm comm = (LOG_DEBUG == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)0, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(0) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "RegisterParticleFields - Registered field 'DMSwarm_CellID'.\n", __func__); } } while (0);
    
    ierr = RegisterSwarmField(swarm, "weight", 3); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 80, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    do { MPI_Comm comm = (LOG_DEBUG == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)0, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(0) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "RegisterParticleFields - Registered field 'weight'.\n", __func__); } } while (0);
    
    
    ierr = DMSwarmFinalizeFieldRegister(swarm); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 84, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    do { MPI_Comm comm = (LOG_INFO == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)0, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(0) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "RegisterParticleFields - Finalized field registration.\n", __func__); } } while (0);
    
    return 0;
}













 
PetscErrorCode InitializeRandomGenerators(UserCtx* user, PetscRandom *randx, PetscRandom *randy, PetscRandom *randz) {
    PetscErrorCode ierr;  
    PetscMPIInt rank;
    MPI_Comm_rank(PETSC_COMM_WORLD, &rank);

    
    ierr = PetscRandomCreate(PETSC_COMM_WORLD, randx); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 109, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    ierr = PetscRandomSetType((*randx), "rand48"); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 110, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    ierr = PetscRandomSetInterval(*randx, user->bbox.min_coords.x, user->bbox.max_coords.x); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 111, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    ierr = PetscRandomSetSeed(*randx, rank + 12345); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 112, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);  
    ierr = PetscRandomSeed(*randx); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 113, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    do { if ((0 != 0 && 0 != 1)) { fprintf(stderr, "LOG_ALLOW_SYNC ERROR: Invalid scope at %s:%d\n", "src/ParticleSwarm.c", 114); } else if (is_function_allowed(__func__) && (int)(LOG_DEBUG) <= (int)get_log_level()) { MPI_Comm comm = (0 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscSynchronizedPrintf(comm, "[%s] " "InitializeRandomGenerators - Initialized RNG for X-axis.\n", __func__); PetscSynchronizedFlush(comm, PETSC_STDOUT); } } while (0);

    
    ierr = PetscRandomCreate(PETSC_COMM_WORLD, randy); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 117, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    ierr = PetscRandomSetType((*randy), "rand48"); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 118, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    ierr = PetscRandomSetInterval(*randy, user->bbox.min_coords.y, user->bbox.max_coords.y); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 119, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    ierr = PetscRandomSetSeed(*randy, rank + 67890); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 120, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);  
    ierr = PetscRandomSeed(*randy); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 121, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    do { if ((0 != 0 && 0 != 1)) { fprintf(stderr, "LOG_ALLOW_SYNC ERROR: Invalid scope at %s:%d\n", "src/ParticleSwarm.c", 122); } else if (is_function_allowed(__func__) && (int)(LOG_DEBUG) <= (int)get_log_level()) { MPI_Comm comm = (0 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscSynchronizedPrintf(comm, "[%s] " "InitializeRandomGenerators - Initialized RNG for Y-axis.\n", __func__); PetscSynchronizedFlush(comm, PETSC_STDOUT); } } while (0);

    
    ierr = PetscRandomCreate(PETSC_COMM_WORLD, randz); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 125, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    ierr = PetscRandomSetType((*randz), "rand48"); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 126, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    ierr = PetscRandomSetInterval(*randz, user->bbox.min_coords.z, user->bbox.max_coords.z); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 127, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    ierr = PetscRandomSetSeed(*randz, rank + 54321); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 128, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);  
    ierr = PetscRandomSeed(*randz); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 129, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    do { if ((0 != 0 && 0 != 1)) { fprintf(stderr, "LOG_ALLOW_SYNC ERROR: Invalid scope at %s:%d\n", "src/ParticleSwarm.c", 130); } else if (is_function_allowed(__func__) && (int)(LOG_DEBUG) <= (int)get_log_level()) { MPI_Comm comm = (0 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscSynchronizedPrintf(comm, "[%s] " "InitializeRandomGenerators - Initialized RNG for Z-axis.\n", __func__); PetscSynchronizedFlush(comm, PETSC_STDOUT); } } while (0);

    return 0;
}
















 
static PetscErrorCode InitializeParticleBasicProperties(UserCtx *user,
                                                   PetscInt particlesPerProcess,
                                                   PetscRandom *randx, PetscRandom *randy, PetscRandom *randz,
                                                   BoundingBox *bboxlist)
{
    PetscErrorCode ierr;
    DM swarm;
    PetscReal *positions = ((void*)0);
    PetscInt64 *particleIDs = ((void*)0), *cellIDs = ((void*)0);
    PetscMPIInt rank;
    ;

    
    if (!user || !randx || !randy || !randz || !bboxlist) {
        do { MPI_Comm comm = (1 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)LOG_ERROR, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(LOG_ERROR) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "InitializeParticleBasicProperties - One or more input pointers are NULL.\n", __func__); } } while (0);
        do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 166, __func__, "src/ParticleSwarm.c", 85, PETSC_ERROR_INITIAL, "InitializeParticleBasicProperties - Null input detected."); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0);
    }

    ierr = MPI_Comm_rank(PETSC_COMM_WORLD, &rank); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 169, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    swarm = user->swarm;

    do { MPI_Comm comm = (0 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)LOG_INFO, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(LOG_INFO) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "InitializeParticleBasicProperties - Initializing %d particles on rank %d.\n", __func__,particlesPerProcess, rank); } } while (0);


     
    do { MPI_Comm comm = (0 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)LOG_DEBUG, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(LOG_DEBUG) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "InitializeParticleBasicProperties - Retrieving swarm fields.\n", __func__); } } while (0);
    ierr = DMSwarmGetField(swarm, "position", ((void*)0), ((void*)0), (void**)&positions); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 177, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    ierr = DMSwarmGetField(swarm, "DMSwarm_pid", ((void*)0), ((void*)0), (void**)&particleIDs); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 178, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    ierr = DMSwarmGetField(swarm, "DMSwarm_CellID", ((void*)0), ((void*)0), (void**)&cellIDs); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 179, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);

    do { MPI_Comm comm = (0 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)LOG_DEBUG, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(LOG_DEBUG) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "InitializeParticleBasicProperties - Particle Initialization = %d\n", __func__,user->ParticleInitialization); } } while (0);

      
      ierr = InitializeRandomGenerators(user, randx, randy, randz); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 184, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    
     
    for (PetscInt p = 0; p < particlesPerProcess; p++) {
        if (user->ParticleInitialization == 1) {
            ierr = PetscRandomGetValue(*randx, &positions[3 * p + 0]); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 189, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
            ierr = PetscRandomGetValue(*randy, &positions[3 * p + 1]); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 190, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
            ierr = PetscRandomGetValue(*randz, &positions[3 * p + 2]); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 191, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
        } else if (user->ParticleInitialization == 0){
	    ierr = PetscRandomGetValue(*randx, &positions[3 * p + 0]); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 193, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
            ierr = PetscRandomGetValue(*randy, &positions[3 * p + 1]); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 194, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
            positions[3 * p + 2] = user->zMin;
	}

            do { PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_LOOP_ALLOW in %s] Iter=%d: Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)(p), (int)LOG_DEBUG, (int)__current_level_val, (int)__allowed_func_val); } if (__allowed_func_val && (int)(LOG_DEBUG) <= (int)__current_level_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_LOOP_ALLOW in %s] Iter=%d: Level/Func check PASSED.\n", __func__, (int)(p)); } if ((p) % (10) == 0) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_LOOP_ALLOW in %s] Iter=%d: Interval check PASSED. Printing log.\n", __func__, (int)(p)); } MPI_Comm comm = (0 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscPrintf(comm, "[%s] [Iter=%d] " "InitializeParticleBasicProperties - Particle %d initialized at (%.6f, %.6f, %.6f).\n", __func__, (p),p, positions[3 * p + 0], positions[3 * p + 1], positions[3 * p + 2]); } } } while (0);

         
        particleIDs[p] = rank * particlesPerProcess + p;
        do { PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_LOOP_ALLOW in %s] Iter=%d: Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)(p), (int)LOG_DEBUG, (int)__current_level_val, (int)__allowed_func_val); } if (__allowed_func_val && (int)(LOG_DEBUG) <= (int)__current_level_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_LOOP_ALLOW in %s] Iter=%d: Level/Func check PASSED.\n", __func__, (int)(p)); } if ((p) % (10) == 0) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_LOOP_ALLOW in %s] Iter=%d: Interval check PASSED. Printing log.\n", __func__, (int)(p)); } MPI_Comm comm = (0 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscPrintf(comm, "[%s] [Iter=%d] " "InitializeParticleBasicProperties - Assigned particle ID %lld to particle %d.\n", __func__, (p),(long long)particleIDs[p], p); } } } while (0);


         
        cellIDs[3 * p + 0] = -1;
        cellIDs[3 * p + 1] = -1;
        cellIDs[3 * p + 2] = -1;
    }

     
    do { MPI_Comm comm = (0 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)LOG_DEBUG, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(LOG_DEBUG) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "InitializeParticleBasicProperties - Restoring swarm fields.\n", __func__); } } while (0);
    ierr = DMSwarmRestoreField(swarm, "position", ((void*)0), ((void*)0), (void**)&positions); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 213, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    ierr = DMSwarmRestoreField(swarm, "DMSwarm_pid", ((void*)0), ((void*)0), (void**)&particleIDs); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 214, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    ierr = DMSwarmRestoreField(swarm, "DMSwarm_CellID", ((void*)0), ((void*)0), (void**)&cellIDs); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 215, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);

    do { MPI_Comm comm = (0 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)LOG_INFO, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(LOG_INFO) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "InitializeParticleBasicProperties - Successfully initialized %d particles on rank %d.\n", __func__,particlesPerProcess, rank); } } while (0);


    return 0;
}















 
static PetscErrorCode UpdateSwarmFieldValue(const char *fieldName, PetscInt p, PetscInt fieldDim, PetscReal *fieldData)
{
  ;
  if (strcmp(fieldName, "velocity") == 0) {
    
    for (PetscInt d = 0; d < fieldDim; d++) {
      fieldData[fieldDim * p + d] = 0.0;
    }
  } else if (strcmp(fieldName, "temperature") == 0) {
    
    for (PetscInt d = 0; d < fieldDim; d++) {
      fieldData[fieldDim * p + d] = 300.0;
    }
  } else if (strcmp(fieldName, "pressure") == 0) {
    
    for (PetscInt d = 0; d < fieldDim; d++) {
      fieldData[fieldDim * p + d] = 101325.0;
    }
  } else {
    
    for (PetscInt d = 0; d < fieldDim; d++) {
      fieldData[fieldDim * p + d] = 0.0;
    }
  }
  return 0;
}













 
static PetscErrorCode AssignInitialFieldToSwarm(UserCtx *user, const char *fieldName, PetscInt fieldDim)
{
    PetscErrorCode ierr;
    DM             swarm = user->swarm;
    PetscReal     *fieldData = ((void*)0);
    PetscInt       nLocal;

    ;
    
    
    ierr = DMSwarmGetLocalSize(swarm, &nLocal); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 288, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    do { MPI_Comm comm = (LOG_INFO == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)0, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(0) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "AssignInitialFieldToSwarm - %d local particles found.\n", __func__,nLocal); } } while (0);

    
    ierr = DMSwarmGetField(swarm, fieldName, ((void*)0), ((void*)0), (void**)&fieldData); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 292, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    do { MPI_Comm comm = (LOG_DEBUG == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)0, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(0) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "AssignInitialFieldToSwarm - Retrieved field '%s'.\n", __func__,fieldName); } } while (0);

    
    for (PetscInt p = 0; p < nLocal; p++) {
        ierr = UpdateSwarmFieldValue(fieldName, p, fieldDim, fieldData); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 297, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
        do { PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_LOOP_ALLOW in %s] Iter=%d: Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)(p), (int)0, (int)__current_level_val, (int)__allowed_func_val); } if (__allowed_func_val && (int)(0) <= (int)__current_level_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_LOOP_ALLOW in %s] Iter=%d: Level/Func check PASSED.\n", __func__, (int)(p)); } if ((p) % (100) == 0) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_LOOP_ALLOW in %s] Iter=%d: Interval check PASSED. Printing log.\n", __func__, (int)(p)); } MPI_Comm comm = (LOG_DEBUG == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscPrintf(comm, "[%s] [Iter=%d] " "AssignInitialFieldToSwarm - Particle %d: %s = [", __func__, (p),p, fieldName); } } } while (0);

        for (PetscInt d = 0; d < fieldDim; d++) {
            do { MPI_Comm comm = (LOG_DEBUG == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)0, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(0) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "%.6f ", __func__,fieldData[fieldDim * p + d]); } } while (0);
        }
        do { MPI_Comm comm = (LOG_DEBUG == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)0, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(0) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "]\n", __func__); } } while (0);
    }
    
    
    ierr = DMSwarmRestoreField(swarm, fieldName, ((void*)0), ((void*)0), (void**)&fieldData); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 307, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    do { MPI_Comm comm = (LOG_INFO == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)0, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(0) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "AssignInitialFieldToSwarm - Initialization of field '%s' complete.\n", __func__,fieldName); } } while (0);
    
    return 0;
}
















 
PetscErrorCode AssignInitialPropertiesToSwarm(UserCtx* user,
                                              PetscInt particlesPerProcess,
                                              PetscRandom *randx, PetscRandom *randy, PetscRandom *randz,
                                              BoundingBox *bboxlist)
{
    PetscErrorCode ierr;
    ;

    
    if (!user || !randx || !randy || !randz || !bboxlist) {
        do { MPI_Comm comm = (1 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)LOG_ERROR, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(LOG_ERROR) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "AssignInitialPropertiesToSwarm - One or more input pointers are NULL.\n", __func__); } } while (0);
        do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 340, __func__, "src/ParticleSwarm.c", 85, PETSC_ERROR_INITIAL, "AssignInitialPropertiesToSwarm - Null input detected."); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0);
    }

    do { MPI_Comm comm = (1 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)LOG_INFO, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(LOG_INFO) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "AssignInitialPropertiesToSwarm - Initializing swarm with %d particles per process.\n", __func__,particlesPerProcess); } } while (0);


     
    do { MPI_Comm comm = (0 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)LOG_DEBUG, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(LOG_DEBUG) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "AssignInitialPropertiesToSwarm - Initializing basic particle properties.\n", __func__); } } while (0);
    ierr = InitializeParticleBasicProperties(user, particlesPerProcess, randx, randy, randz, bboxlist);
    do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 349, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    do { MPI_Comm comm = (0 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)LOG_INFO, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(LOG_INFO) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "AssignInitialPropertiesToSwarm - Successfully initialized basic particle properties.\n", __func__); } } while (0);

     
     
    do { MPI_Comm comm = (0 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)LOG_DEBUG, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(LOG_DEBUG) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "AssignInitialPropertiesToSwarm - Initializing velocity field.\n", __func__); } } while (0);
    ierr = AssignInitialFieldToSwarm(user, "velocity", 3);
    do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 356, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    do { MPI_Comm comm = (0 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)LOG_INFO, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(LOG_INFO) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "AssignInitialPropertiesToSwarm - Velocity field initialization complete.\n", __func__); } } while (0);

     
    do { MPI_Comm comm = (0 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)LOG_DEBUG, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(LOG_DEBUG) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "AssignInitialPropertiesToSwarm - Initializing weight field.\n", __func__); } } while (0);
    ierr = AssignInitialFieldToSwarm(user, "weight", 3);
    do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 362, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    do { MPI_Comm comm = (0 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)LOG_INFO, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(LOG_INFO) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "AssignInitialPropertiesToSwarm - Weight field initialization complete.\n", __func__); } } while (0);

    

    do { MPI_Comm comm = (1 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)LOG_INFO, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(LOG_INFO) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "AssignInitialPropertiesToSwarm - Successfully completed swarm initialization.\n", __func__); } } while (0);

    return 0;
}
















 
PetscErrorCode DistributeParticles(PetscInt numParticles, PetscMPIInt rank, PetscMPIInt size, PetscInt* particlesPerProcess, PetscInt* remainder) {

    
    *particlesPerProcess = numParticles / size;
    *remainder = numParticles % size;

    
    if (rank < *remainder) {
        *particlesPerProcess += 1;
        do { if ((1 != 0 && 1 != 1)) { fprintf(stderr, "LOG_ALLOW_SYNC ERROR: Invalid scope at %s:%d\n", "src/ParticleSwarm.c", 397); } else if (is_function_allowed(__func__) && (int)(LOG_INFO) <= (int)get_log_level()) { MPI_Comm comm = (1 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscSynchronizedPrintf(comm, "[%s] " "DistributeParticles - Rank %d receives an extra particle. Total: %d\n", __func__,rank, *particlesPerProcess); PetscSynchronizedFlush(comm, PETSC_STDOUT); } } while (0);
    } else {
        do { if ((1 != 0 && 1 != 1)) { fprintf(stderr, "LOG_ALLOW_SYNC ERROR: Invalid scope at %s:%d\n", "src/ParticleSwarm.c", 399); } else if (is_function_allowed(__func__) && (int)(LOG_INFO) <= (int)get_log_level()) { MPI_Comm comm = (1 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscSynchronizedPrintf(comm, "[%s] " "DistributeParticles - Rank %d receives %d particles.\n", __func__,rank, *particlesPerProcess); PetscSynchronizedFlush(comm, PETSC_STDOUT); } } while (0);
    }

    return 0;
}











 
PetscErrorCode FinalizeSwarmSetup(PetscRandom *randx, PetscRandom *randy, PetscRandom *randz) {
    PetscErrorCode ierr;  
    PetscInt  ParticleInitialization; 

    ierr = PetscOptionsGetInt(((void*)0), ((void*)0), "-pinit", &ParticleInitialization, ((void*)0)); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 420, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
 
    if(ParticleInitialization==1){

      
      ierr = PetscRandomDestroy(randx); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 425, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
      ierr = PetscRandomDestroy(randy); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 426, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
      ierr = PetscRandomDestroy(randz); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 427, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
      do { MPI_Comm comm = (LOG_DEBUG == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)0, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(0) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "FinalizeSwarmSetup - Destroyed all random number generators.\n", __func__); } } while (0);
    }else if(ParticleInitialization==0){
      do { MPI_Comm comm = (LOG_DEBUG == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)0, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(0) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "FinalizeSwarmSetup - Not a Random Initialization of Particles.\n", __func__); } } while (0);
    }

    return 0;
}






















 
PetscErrorCode CreateParticleSwarm(UserCtx *user, PetscInt numParticles, PetscInt *particlesPerProcess, BoundingBox *bboxlist) {
    PetscErrorCode ierr;                      
    PetscMPIInt rank, size;                   
    PetscInt remainder = 0;                   
    
    
    if (numParticles <= 0) {
      do { MPI_Comm comm = (1 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)LOG_DEBUG, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(LOG_DEBUG) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "CreateParticleSwarm - Number of particles must be positive. Given: %d\n", __func__,numParticles); } } while (0);
        return 63;
    }

    
    ierr = PetscOptionsInsertFile(PETSC_COMM_WORLD, ((void*)0), "control.dat", PETSC_TRUE); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 470, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    do { MPI_Comm comm = (LOG_DEBUG == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)0, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(0) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "CreateParticleSwarm - Inserted options from control.dat\n", __func__); } } while (0);
    
    do { if ((1 != 0 && 1 != 1)) { fprintf(stderr, "LOG_ALLOW_SYNC ERROR: Invalid scope at %s:%d\n", "src/ParticleSwarm.c", 474); } else if (is_function_allowed(__func__) && (int)(LOG_DEBUG) <= (int)get_log_level()) { MPI_Comm comm = (1 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscSynchronizedPrintf(comm, "[%s] " "CreateParticleSwarm - Domain dimensions: xMin=%.2f, xMax=%.2f,yMin=%.2f, yMax=%.2f,zMin=%.2f, zMax=%.2f \n", __func__,user->xMin,user->xMax,user->yMin,user->yMax, user->zMin,user->zMax); PetscSynchronizedFlush(comm, PETSC_STDOUT); } } while (0);

    
    
    ierr = MPI_Comm_rank(PETSC_COMM_WORLD, &rank); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 477, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    ierr = MPI_Comm_size(PETSC_COMM_WORLD, &size); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 478, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    do { MPI_Comm comm = (1 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)LOG_INFO, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(LOG_INFO) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "CreateParticleSwarm - Rank %d out of %d processes.\n", __func__,rank, size); } } while (0);

    
    ierr = DistributeParticles(numParticles, rank, size, particlesPerProcess, &remainder); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 482, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);

    
    ierr = InitializeSwarm(user); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 485, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);

    
    ierr = RegisterParticleFields(user->swarm); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 488, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);

    
    ierr = DMSwarmSetLocalSizes(user->swarm, *particlesPerProcess, 4); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 491, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    do { MPI_Comm comm = (1 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)LOG_INFO, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(LOG_INFO) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "CreateParticleSwarm - Set local swarm size: %d particles.\n", __func__,*particlesPerProcess); } } while (0);

    
    if (get_log_level() == LOG_DEBUG && is_function_allowed(__func__)) {
      do { MPI_Comm comm = (LOG_DEBUG == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)0, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(0) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "CreateParticleSwarm - Viewing DMSwarm:\n", __func__); } } while (0);
        ierr = DMView(user->swarm, PETSC_VIEWER_STDOUT_(PETSC_COMM_WORLD)); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 497, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    }

    do { MPI_Comm comm = (LOG_INFO == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)0, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(0) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "CreateParticleSwarm - Particle swarm creation and initialization complete.\n", __func__); } } while (0);

    return 0;
}














 
PetscErrorCode InitializeParticle(PetscInt i, const PetscInt64 *PIDs, const PetscReal *weights,
                                         const PetscReal *positions, const PetscInt64 *cellIndices,
                                         Particle *particle) {
    ;
    
    if (particle == ((void*)0)) {
        do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 525, __func__, "src/ParticleSwarm.c", 85, PETSC_ERROR_INITIAL, "InitializeParticle - Output Particle pointer is NULL. \n"); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0);
    }
    
    
    do { if ((1 != 0 && 1 != 1)) { fprintf(stderr, "LOG_ALLOW_SYNC ERROR: Invalid scope at %s:%d\n", "src/ParticleSwarm.c", 529); } else if (is_function_allowed(__func__) && (int)(LOG_INFO) <= (int)get_log_level()) { MPI_Comm comm = (1 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscSynchronizedPrintf(comm, "[%s] " "InitializeParticle - Initializing Particle [%d] with PID: %ld.\n", __func__,i, PIDs[i]); PetscSynchronizedFlush(comm, PETSC_STDOUT); } } while (0);
    
    
    particle->PID = PIDs[i];
    do { if ((1 != 0 && 1 != 1)) { fprintf(stderr, "LOG_ALLOW_SYNC ERROR: Invalid scope at %s:%d\n", "src/ParticleSwarm.c", 533); } else if (is_function_allowed(__func__) && (int)(LOG_DEBUG) <= (int)get_log_level()) { MPI_Comm comm = (1 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscSynchronizedPrintf(comm, "[%s] " "InitializeParticle - Particle [%d] PID set to: %ld.\n", __func__,i, particle ->PID); PetscSynchronizedFlush(comm, PETSC_STDOUT); } } while (0);
    
    
    particle->weights.x = weights[3 * i];
    particle->weights.y = weights[3 * i + 1];
    particle->weights.z = weights[3 * i + 2];
    do { MPI_Comm comm = (LOG_DEBUG == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)0, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(0) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "InitializeParticle - Particle [%d] weights set to: (%.6f, %.6f, %.6f).\n", __func__,i, particle ->weights . x, particle ->weights . y, particle ->weights . z); } } while (0);

    
    
    particle->loc.x = positions[3 * i];
    particle->loc.y = positions[3 * i + 1];
    particle->loc.z = positions[3 * i + 2];
    do { if ((1 != 0 && 1 != 1)) { fprintf(stderr, "LOG_ALLOW_SYNC ERROR: Invalid scope at %s:%d\n", "src/ParticleSwarm.c", 547); } else if (is_function_allowed(__func__) && (int)(LOG_DEBUG) <= (int)get_log_level()) { MPI_Comm comm = (1 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscSynchronizedPrintf(comm, "[%s] " "InitializeParticle - Particle [%d] location set to: (%.6f, %.6f, %.6f).\n", __func__,i, particle ->loc . x, particle ->loc . y, particle ->loc . z); PetscSynchronizedFlush(comm, PETSC_STDOUT); } } while (0);

    
    
    particle->vel.x = 0.0;
    particle->vel.y = 0.0;
    particle->vel.z = 0.0;
    do { if ((1 != 0 && 1 != 1)) { fprintf(stderr, "LOG_ALLOW_SYNC ERROR: Invalid scope at %s:%d\n", "src/ParticleSwarm.c", 553); } else if (is_function_allowed(__func__) && (int)(LOG_DEBUG) <= (int)get_log_level()) { MPI_Comm comm = (1 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscSynchronizedPrintf(comm, "[%s] " "InitializeParticle - Particle [%d] velocities initialized to zero.\n", __func__,i); PetscSynchronizedFlush(comm, PETSC_STDOUT); } } while (0);
    
    
    particle->cell[0] = cellIndices[3 * i];
    particle->cell[1] = cellIndices[3 * i + 1];
    particle->cell[2] = cellIndices[3 * i + 2];
    do { if ((1 != 0 && 1 != 1)) { fprintf(stderr, "LOG_ALLOW_SYNC ERROR: Invalid scope at %s:%d\n", "src/ParticleSwarm.c", 560); } else if (is_function_allowed(__func__) && (int)(LOG_DEBUG) <= (int)get_log_level()) { MPI_Comm comm = (1 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscSynchronizedPrintf(comm, "[%s] " "InitializeParticle - Particle [%d] cell indices set to: [%ld, %ld, %ld].\n", __func__,i, particle ->cell[0], particle ->cell[1], particle ->cell[2]); PetscSynchronizedFlush(comm, PETSC_STDOUT); } } while (0);

    
    
    do { if ((1 != 0 && 1 != 1)) { fprintf(stderr, "LOG_ALLOW_SYNC ERROR: Invalid scope at %s:%d\n", "src/ParticleSwarm.c", 563); } else if (is_function_allowed(__func__) && (int)(LOG_INFO) <= (int)get_log_level()) { MPI_Comm comm = (1 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscSynchronizedPrintf(comm, "[%s] " "InitializeParticle - Completed initialization of Particle [%d]. \n", __func__,i); PetscSynchronizedFlush(comm, PETSC_STDOUT); } } while (0);
    
    return 0;
}












 
PetscErrorCode UpdateSwarmFields(PetscInt i, const Particle *particle,
                                        PetscReal *weights, PetscInt64 *cellIndices) {
    ;
    
    if (particle == ((void*)0)) {
        do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 585, __func__, "src/ParticleSwarm.c", 85, PETSC_ERROR_INITIAL, "UpdateSwarmFields - Input Particle pointer is NULL.\n"); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0);
    }
    
    
    do { if ((1 != 0 && 1 != 1)) { fprintf(stderr, "LOG_ALLOW_SYNC ERROR: Invalid scope at %s:%d\n", "src/ParticleSwarm.c", 589); } else if (is_function_allowed(__func__) && (int)(LOG_INFO) <= (int)get_log_level()) { MPI_Comm comm = (1 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscSynchronizedPrintf(comm, "[%s] " "Updating DMSwarm fields for Particle [%d].\n", __func__,i); PetscSynchronizedFlush(comm, PETSC_STDOUT); } } while (0);
    
    
    weights[3 * i]     = particle->weights.x;
    weights[3 * i + 1] = particle->weights.y;
    weights[3 * i + 2] = particle->weights.z;
    do { if ((1 != 0 && 1 != 1)) { fprintf(stderr, "LOG_ALLOW_SYNC ERROR: Invalid scope at %s:%d\n", "src/ParticleSwarm.c", 596); } else if (is_function_allowed(__func__) && (int)(LOG_DEBUG) <= (int)get_log_level()) { MPI_Comm comm = (1 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscSynchronizedPrintf(comm, "[%s] " "UpdateSwarmFields - Updated weights for Particle [%d]: (%.6f, %.6f, %.6f).\n", __func__,i, weights[3 * i], weights[3 * i + 1], weights[3 * i + 2]); PetscSynchronizedFlush(comm, PETSC_STDOUT); } } while (0);

    
    
    cellIndices[3 * i]     = particle->cell[0];
    cellIndices[3 * i + 1] = particle->cell[1];
    cellIndices[3 * i + 2] = particle->cell[2];
    do { if ((1 != 0 && 1 != 1)) { fprintf(stderr, "LOG_ALLOW_SYNC ERROR: Invalid scope at %s:%d\n", "src/ParticleSwarm.c", 603); } else if (is_function_allowed(__func__) && (int)(LOG_DEBUG) <= (int)get_log_level()) { MPI_Comm comm = (1 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscSynchronizedPrintf(comm, "[%s] " "UpdateSwarmFields -  Updated cell indices for Particle [%d]: [%ld, %ld, %ld].\n", __func__,i, cellIndices[3 * i], cellIndices[3 * i + 1], cellIndices[3 * i + 2]); PetscSynchronizedFlush(comm, PETSC_STDOUT); } } while (0);

    
    
    do { if ((1 != 0 && 1 != 1)) { fprintf(stderr, "LOG_ALLOW_SYNC ERROR: Invalid scope at %s:%d\n", "src/ParticleSwarm.c", 606); } else if (is_function_allowed(__func__) && (int)(LOG_INFO) <= (int)get_log_level()) { MPI_Comm comm = (1 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscSynchronizedPrintf(comm, "[%s] " "UpdateSwarmFields  - Completed updating DMSwarm fields for Particle [%d].\n", __func__,i); PetscSynchronizedFlush(comm, PETSC_STDOUT); } } while (0);
    
    return 0;
}











 
PetscErrorCode LocateAllParticlesInGrid(UserCtx *user) {
    PetscErrorCode ierr;
    PetscMPIInt rank, size;
    PetscInt localNumParticles;
    PetscReal *positions = ((void*)0), *weights = ((void*)0);
    PetscInt64 *cellIndices = ((void*)0), *PIDs = ((void*)0);
    PetscReal d[NUM_FACES];
    DM swarm = user->swarm;
    Particle particle;  

   double __funcTimerStart = 0.0; PetscBool __funcTimerActive = PETSC_FALSE; do { if (is_function_allowed(__func__) && (int)(LOG_PROFILE) == (int)get_log_level()) { PetscLogDouble _timeStamp = 0.0; PetscTime(&_timeStamp); __funcTimerStart = (double)_timeStamp; __funcTimerActive = PETSC_TRUE; (void)((PetscLogPLB && petsc_stageLog->stageInfo[petsc_stageLog->curStage]. perfInfo . active && petsc_stageLog->stageInfo[petsc_stageLog->curStage]. eventLog->eventInfo[EVENT_walkingsearch]. active) ? (((*PetscLogPLB)((EVENT_walkingsearch), 0, (PetscObject)(0), (PetscObject)(0), (PetscObject)(0), (PetscObject)(0))) || PetscLogPushCurrentEvent_Internal(EVENT_walkingsearch)) : 0); } } while (0); 
    
    ;
    
    
    ierr = MPI_Comm_rank(PETSC_COMM_WORLD, &rank); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 637, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    ierr = MPI_Comm_size(PETSC_COMM_WORLD, &size); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 638, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    
    
    
    ierr = MPI_Barrier(PETSC_COMM_WORLD); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 642, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    
    
    ierr = DMSwarmGetLocalSize(swarm, &localNumParticles); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 645, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    
    ierr = DMSwarmGetField(swarm, "position", ((void*)0), ((void*)0), (void**)&positions); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 647, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    ierr = DMSwarmGetField(swarm, "weight", ((void*)0), ((void*)0), (void**)&weights); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 648, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    ierr = DMSwarmGetField(swarm, "DMSwarm_CellID", ((void*)0), ((void*)0), (void**)&cellIndices); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 649, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    ierr = DMSwarmGetField(swarm, "DMSwarm_pid", ((void*)0), ((void*)0), (void**)&PIDs); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 650, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    
    do { MPI_Comm comm = (99 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)0, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(0) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "LocateAllParticlesInGrid - moved to after swarmgetfield - Number of local particles: %d.\n", __func__,localNumParticles); } } while (0);
    
    
    
    for (PetscInt i = 0; i < localNumParticles; ++i) {
        
        ierr = InitializeParticle(i, PIDs, weights, positions, cellIndices, &particle); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 658, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
        
        
	
        
        
        PetscBool particle_detected = IsParticleInsideBoundingBox(&(user->bbox), &particle);
	
        
        if (particle_detected) {
            
	  
            ierr = LocateParticleInGrid(user, &particle, d); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 670, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0); 
	    

            
          ierr = UpdateParticleWeights(d,&particle);
	} 
        
        
        ierr = UpdateSwarmFields(i, &particle, weights, cellIndices); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 678, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    }
    
    
    ierr = DMSwarmRestoreField(swarm, "position", ((void*)0), ((void*)0), (void**)&positions); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 682, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    ierr = DMSwarmRestoreField(swarm, "weight", ((void*)0), ((void*)0), (void**)&weights); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 683, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    ierr = DMSwarmRestoreField(swarm, "DMSwarm_CellID", ((void*)0), ((void*)0), (void**)&cellIndices); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 684, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    ierr = DMSwarmRestoreField(swarm, "DMSwarm_pid", ((void*)0), ((void*)0), (void**)&PIDs); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 685, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    do { if ((0 != 0 && 0 != 1)) { fprintf(stderr, "LOG_ALLOW_SYNC ERROR: Invalid scope at %s:%d\n", "src/ParticleSwarm.c", 686); } else if (is_function_allowed(__func__) && (int)(LOG_INFO) <= (int)get_log_level()) { MPI_Comm comm = (0 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscSynchronizedPrintf(comm, "[%s] " "LocateAllParticlesInGrid - DMSwarm fields restored successfully.\n", __func__); PetscSynchronizedFlush(comm, PETSC_STDOUT); } } while (0);
    
    


    do { if (__funcTimerActive == PETSC_TRUE) { (void)((PetscLogPLE && petsc_stageLog->stageInfo[petsc_stageLog->curStage]. perfInfo . active && petsc_stageLog->stageInfo[petsc_stageLog->curStage]. eventLog->eventInfo[EVENT_walkingsearch]. active) ? (((*PetscLogPLE)((EVENT_walkingsearch), 0, (PetscObject)(0), (PetscObject)(0), (PetscObject)(0), (PetscObject)(0))) || PetscLogPopCurrentEvent_Internal()) : 0); if (is_function_allowed(__func__) && (int)(LOG_PROFILE) == (int)get_log_level()) { PetscLogDouble _timeEnd = 0.0; PetscTime(&_timeEnd); double elapsed = (double)_timeEnd - __funcTimerStart; MPI_Comm comm = (0 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscPrintf(comm, "[%s] Elapsed Time: %f seconds\n", __func__, elapsed); } } } while (0);
    
    return 0;
}




















 
PetscBool IsParticleInsideBoundingBox(const BoundingBox *bbox, const Particle *particle)
{
    
    const char *funcName = "IsParticleInsideBoundingBox";

    
    if (!bbox) {
        
        do { MPI_Comm comm = (LOG_ERROR == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)0, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(0) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "%s: Error - 'bbox' pointer is NULL.", __func__,funcName); } } while (0);
        return PETSC_FALSE;
    }
    if (!particle) {
        do { MPI_Comm comm = (LOG_ERROR == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)0, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(0) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "%s: Error - 'particle' pointer is NULL.", __func__,funcName); } } while (0);
        return PETSC_FALSE;
    }

    
    const Cmpnts loc = particle->loc;
    const Cmpnts min_coords = bbox->min_coords;
    const Cmpnts max_coords = bbox->max_coords;

    
    do { if ((0 != 0 && 0 != 1)) { fprintf(stderr, "LOG_ALLOW_SYNC ERROR: Invalid scope at %s:%d\n", "src/ParticleSwarm.c", 738); } else if (is_function_allowed(__func__) && (int)(LOG_DEBUG) <= (int)get_log_level()) { MPI_Comm comm = (0 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscSynchronizedPrintf(comm, "[%s] " "%s: Particle PID %ld location: (%.6f, %.6f, %.6f).\n", __func__,funcName, particle ->PID, loc . x, loc . y, loc . z); PetscSynchronizedFlush(comm, PETSC_STDOUT); } } while (0);
    do { if ((0 != 0 && 0 != 1)) { fprintf(stderr, "LOG_ALLOW_SYNC ERROR: Invalid scope at %s:%d\n", "src/ParticleSwarm.c", 740); } else if (is_function_allowed(__func__) && (int)(LOG_DEBUG) <= (int)get_log_level()) { MPI_Comm comm = (0 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscSynchronizedPrintf(comm, "[%s] " "%s: BoundingBox min_coords: (%.6f, %.6f, %.6f), max_coords: (%.6f, %.6f, %.6f).\n", __func__,funcName, min_coords . x, min_coords . y, min_coords . z, max_coords . x, max_coords . y, max_coords . z); PetscSynchronizedFlush(comm, PETSC_STDOUT); } } while (0);


    
    if ((loc.x >= min_coords.x && loc.x <= max_coords.x) &&
        (loc.y >= min_coords.y && loc.y <= max_coords.y) &&
        (loc.z >= min_coords.z && loc.z <= max_coords.z)) {
        
        do { if ((0 != 0 && 0 != 1)) { fprintf(stderr, "LOG_ALLOW_SYNC ERROR: Invalid scope at %s:%d\n", "src/ParticleSwarm.c", 747); } else if (is_function_allowed(__func__) && (int)(LOG_DEBUG) <= (int)get_log_level()) { MPI_Comm comm = (0 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscSynchronizedPrintf(comm, "[%s] " "%s: Particle PID %ld is inside the bounding box.\n", __func__,funcName, particle ->PID); PetscSynchronizedFlush(comm, PETSC_STDOUT); } } while (0);
        return PETSC_TRUE;
    }

    
    do { if ((0 != 0 && 0 != 1)) { fprintf(stderr, "LOG_ALLOW_SYNC ERROR: Invalid scope at %s:%d\n", "src/ParticleSwarm.c", 752); } else if (is_function_allowed(__func__) && (int)(LOG_DEBUG) <= (int)get_log_level()) { MPI_Comm comm = (0 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscSynchronizedPrintf(comm, "[%s] " "%s: Particle PID %ld is outside the bounding box.\n", __func__,funcName, particle ->PID); PetscSynchronizedFlush(comm, PETSC_STDOUT); } } while (0);
    return PETSC_FALSE;
}











 
PetscErrorCode UpdateParticleWeights(PetscReal *d, Particle *particle) {

    
    if (!d || !particle) {
        do { PetscErrorCode ierr_seterrq_petsc_ = PetscError(((MPI_Comm)0x44000001), 772, __func__, "src/ParticleSwarm.c", 85, PETSC_ERROR_INITIAL, "UpdateParticleWeights - Null pointer argument (d or particle)."); return ierr_seterrq_petsc_ ? ierr_seterrq_petsc_ : 99; } while (0);

    }


    
    for (PetscInt i = LEFT; i < NUM_FACES; i++) {
        if (d[i] <= 1.0e-14) {
            do { if ((1 != 0 && 1 != 1)) { fprintf(stderr, "LOG_ALLOW_SYNC ERROR: Invalid scope at %s:%d\n", "src/ParticleSwarm.c", 782); } else if (is_function_allowed(__func__) && (int)(LOG_WARNING) <= (int)get_log_level()) { MPI_Comm comm = (1 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscSynchronizedPrintf(comm, "[%s] " "UpdateParticleWeights - face distance d[%d] = %f <= %f; " "clamping to 1e-14 to avoid zero/negative.\n", __func__,i, (double)d[i], 1.0e-14); PetscSynchronizedFlush(comm, PETSC_STDOUT); } } while (0);



            d[i] = 1.0e-14;
        }
    }

    
    do { if ((0 != 0 && 0 != 1)) { fprintf(stderr, "LOG_ALLOW_SYNC ERROR: Invalid scope at %s:%d\n", "src/ParticleSwarm.c", 791); } else if (is_function_allowed(__func__) && (int)(LOG_DEBUG) <= (int)get_log_level()) { MPI_Comm comm = (0 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscSynchronizedPrintf(comm, "[%s] " "UpdateParticleWeights - Calculating weights with distances: " "[LEFT=%f, RIGHT=%f, BOTTOM=%f, TOP=%f, FRONT=%f, BACK=%f].\n", __func__,d[LEFT], d[RIGHT], d[BOTTOM], d[TOP], d[FRONT], d[BACK]); PetscSynchronizedFlush(comm, PETSC_STDOUT); } } while (0);




    
    particle->weights.x = d[LEFT] / (d[LEFT] + d[RIGHT]);
    particle->weights.y = d[BOTTOM] / (d[BOTTOM] + d[TOP]);
    particle->weights.z = d[FRONT] / (d[FRONT] + d[BACK]);

    
    do { if ((0 != 0 && 0 != 1)) { fprintf(stderr, "LOG_ALLOW_SYNC ERROR: Invalid scope at %s:%d\n", "src/ParticleSwarm.c", 801); } else if (is_function_allowed(__func__) && (int)(LOG_DEBUG) <= (int)get_log_level()) { MPI_Comm comm = (0 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscSynchronizedPrintf(comm, "[%s] " "UpdateParticleWeights - Updated particle weights: x=%f, y=%f, z=%f.\n", __func__,particle ->weights . x, particle ->weights . y, particle ->weights . z); PetscSynchronizedFlush(comm, PETSC_STDOUT); } } while (0);



    return 0;
}





















 
 PetscErrorCode InitializeParticleSwarm(UserCtx *user, PetscInt np, BoundingBox *bboxlist) {
    PetscErrorCode ierr;
    PetscInt particlesPerProcess = 0;         
    PetscRandom randx,randy,randz;     
    do { MPI_Comm comm = (1 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)LOG_INFO, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(LOG_INFO) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "Starting particle swarm Initialization with %d particles.\n", __func__,np); } } while (0);

    
    
    
    do { MPI_Comm comm = (1 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)LOG_INFO, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(LOG_INFO) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "Creating particle swarm.\n", __func__); } } while (0);
    ierr = CreateParticleSwarm(user, np, &particlesPerProcess,bboxlist); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 837, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    do { MPI_Comm comm = (1 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscInt __current_level_val = get_log_level(); PetscBool __allowed_func_val = is_function_allowed(__func__); if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Checking: level=%d, get_log_level() returned %d, func_allowed=%d\n", __func__, (int)LOG_INFO, (int)__current_level_val, (int)__allowed_func_val); } if ((int)(LOG_INFO) <= (int)__current_level_val && __allowed_func_val) { if (strcmp(__func__, "LocateAllParticlesInGrid") == 0) { printf("[DEBUG LOG_ALLOW in %s] Check PASSED. Printing log.\n", __func__); } PetscPrintf(comm, "[%s] " "Particle swarm created successfully.\n", __func__); } } while (0);

    
    
    
    ierr = AssignInitialPropertiesToSwarm(user, particlesPerProcess, &randx, &randy, &randz, bboxlist); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 843, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);
    
    ierr = FinalizeSwarmSetup(&randx, &randy, &randz); do { PetscErrorCode ierr_q_; ; ierr_q_ = ierr; if (__builtin_expect(! !(ierr_q_), 0)) return PetscError(((MPI_Comm)0x44000001), 845, __func__, "src/ParticleSwarm.c", ierr_q_, PETSC_ERROR_REPEAT, " "); } while (0);

    
    do { if ((1 != 0 && 1 != 1)) { fprintf(stderr, "LOG_ALLOW_SYNC ERROR: Invalid scope at %s:%d\n", "src/ParticleSwarm.c", 848); } else if (is_function_allowed(__func__) && (int)(LOG_INFO) <= (int)get_log_level()) { MPI_Comm comm = (1 == 0) ? ((MPI_Comm)0x44000001) : ((MPI_Comm)0x44000000); PetscSynchronizedPrintf(comm, "[%s] " " Particles generated & initialized.\n", __func__); PetscSynchronizedFlush(comm, PETSC_STDOUT); } } while (0);

    return 0;
}
